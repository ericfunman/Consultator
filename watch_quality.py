"""
Surveillance continue de la qualit√© du code
Ex√©cution automatique apr√®s chaque modification de fichier
"""

import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer


class CodeQualityWatcher(FileSystemEventHandler):
    """Surveillance des modifications de fichiers pour d√©clencher les tests"""

    def __init__(self):
        self.last_run = 0
        self.debounce_time = 5  # 5 secondes entre les ex√©cutions
        self.project_root = Path.cwd()

    def on_modified(self, event):
        """D√©clench√© quand un fichier est modifi√©"""
        if event.is_directory:
            return

        # Filtrer les types de fichiers
        if not self._should_trigger(event.src_path):
            return

        current_time = time.time()
        if current_time - self.last_run < self.debounce_time:
            return

        self.last_run = current_time

        print(f"\nüîç Modification d√©tect√©e : {event.src_path}")
        print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")

        self._run_quality_checks(event.src_path)

    def _should_trigger(self, file_path):
        """D√©termine si une modification doit d√©clencher les tests"""
        file_path = Path(file_path)

        # Extensions √† surveiller
        python_extensions = {".py"}
        config_extensions = {".yml", ".yaml", ".json", ".cfg", ".ini"}

        if file_path.suffix in python_extensions:
            return True

        if file_path.suffix in config_extensions:
            return True

        # Ignorer certains r√©pertoires/fichiers
        ignore_patterns = {
            "__pycache__",
            ".pytest_cache",
            "reports",
            ".git",
            "backup",
            ".coverage",
        }

        for pattern in ignore_patterns:
            if pattern in str(file_path):
                return False

        return False

    def _run_quality_checks(self, modified_file):
        """Ex√©cute les v√©rifications de qualit√© appropri√©es"""
        file_path = Path(modified_file)

        print("üèÉ‚Äç‚ôÇÔ∏è Ex√©cution des v√©rifications...")

        if file_path.suffix == ".py":
            # Tests sp√©cifiques au fichier Python modifi√©
            self._run_python_checks(file_path)
        else:
            # Tests g√©n√©raux
            self._run_general_checks()

    def _run_python_checks(self, file_path):
        """Tests sp√©cifiques pour les fichiers Python"""
        print(f"üêç V√©rification Python : {file_path.name}")

        # 1. Syntax check
        if self._check_syntax(file_path):
            print("‚úÖ Syntaxe valide")
        else:
            print("‚ùå Erreur de syntaxe")
            return

        # 2. Pylint sur le fichier sp√©cifique
        self._run_pylint_file(file_path)

        # 3. Tests associ√©s
        self._run_related_tests(file_path)

    def _check_syntax(self, file_path):
        """V√©rification de la syntaxe Python"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                compile(f.read(), file_path, "exec")
            return True
        except SyntaxError as e:
            print(f"‚ùå Erreur syntaxe ligne {e.lineno}: {e.msg}")
            return False
        except Exception as e:
            print(f"‚ùå Erreur lecture fichier: {e}")
            return False

    def _run_pylint_file(self, file_path):
        """Pylint sur un fichier sp√©cifique"""
        try:
            result = subprocess.run(
                ["pylint", str(file_path), "--score=yes", "--reports=no"],
                capture_output=True,
                text=True,
                timeout=30,
            )

            if "Your code has been rated at" in result.stdout:
                score_line = [
                    line
                    for line in result.stdout.split("\n")
                    if "Your code has been rated at" in line
                ][0]
                score = score_line.split("rated at ")[1].split("/10")[0]
                print(f"üìä Pylint : {score}/10")

                if float(score) >= 8.0:
                    print("‚úÖ Score Pylint acceptable")
                else:
                    print("‚ö†Ô∏è Score Pylint √† am√©liorer")
            else:
                print("‚ùå Erreur Pylint")

        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout Pylint")
        except Exception as e:
            print(f"‚ùå Erreur Pylint : {e}")

    def _run_related_tests(self, file_path):
        """Ex√©cute les tests li√©s au fichier modifi√©"""
        # Rechercher les tests correspondants
        test_patterns = [
            f"test_{file_path.stem}.py",
            f"test_{file_path.stem}_*.py",
            f"*_test_{file_path.stem}.py",
        ]

        test_files = []
        tests_dir = self.project_root / "tests"

        if tests_dir.exists():
            for pattern in test_patterns:
                test_files.extend(tests_dir.glob(pattern))

        if test_files:
            print(f"üß™ Tests trouv√©s : {[f.name for f in test_files]}")

            for test_file in test_files:
                self._run_specific_test(test_file)
        else:
            print("üîç Aucun test sp√©cifique trouv√©")

    def _run_specific_test(self, test_file):
        """Ex√©cute un fichier de test sp√©cifique"""
        try:
            result = subprocess.run(
                ["python", "-m", "pytest", str(test_file), "-v"],
                capture_output=True,
                text=True,
                timeout=60,
            )

            if result.returncode == 0:
                print(f"‚úÖ Tests {test_file.name} : OK")
            else:
                print(f"‚ùå Tests {test_file.name} : √âCHEC")
                # Afficher les premi√®res lignes d'erreur
                error_lines = result.stdout.split("\n")[-10:]
                for line in error_lines:
                    if line.strip() and not line.startswith("="):
                        print(f"   {line}")

        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout test {test_file.name}")
        except Exception as e:
            print(f"‚ùå Erreur test {test_file.name}: {e}")

    def _run_general_checks(self):
        """Tests g√©n√©raux (fichiers de config, etc.)"""
        print("üîß V√©rifications g√©n√©rales...")

        # Test de d√©marrage rapide
        try:
            result = subprocess.run(
                ["python", "-c", "import app.main; print('Import OK')"],
                capture_output=True,
                text=True,
                timeout=15,
            )

            if result.returncode == 0:
                print("‚úÖ Import application : OK")
            else:
                print("‚ùå Erreur import application")

        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout import application")
        except Exception as e:
            print(f"‚ùå Erreur import : {e}")


class ContinuousQualityMonitor:
    """Moniteur de qualit√© continue"""

    def __init__(self):
        self.observer = Observer()
        self.handler = CodeQualityWatcher()
        self.project_root = Path.cwd()

    def start_monitoring(self):
        """D√©marre la surveillance"""
        print("üéØ SURVEILLANCE CONTINUE DE LA QUALIT√â")
        print("=" * 50)
        print(f"üìÅ R√©pertoire surveill√© : {self.project_root}")
        print("üîç Types de fichiers : .py, .yml, .json, .cfg")
        print("‚ö° D√©lai de debounce : 5 secondes")
        print("üõë Arr√™t avec Ctrl+C")
        print("=" * 50)

        # Surveiller le r√©pertoire app/
        app_path = self.project_root / "app"
        if app_path.exists():
            self.observer.schedule(self.handler, str(app_path), recursive=True)
            print(f"üëÄ Surveillance : {app_path}")

        # Surveiller le r√©pertoire tests/
        tests_path = self.project_root / "tests"
        if tests_path.exists():
            self.observer.schedule(self.handler, str(tests_path), recursive=True)
            print(f"üëÄ Surveillance : {tests_path}")

        # Surveiller les fichiers de config
        config_files = ["setup.cfg", "pyproject.toml", "requirements.txt"]
        for config_file in config_files:
            if (self.project_root / config_file).exists():
                self.observer.schedule(
                    self.handler, str(self.project_root), recursive=False
                )
                break

        self.observer.start()
        print("\n‚úÖ Surveillance d√©marr√©e !")

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë Arr√™t de la surveillance...")
            self.observer.stop()

        self.observer.join()
        print("üëã Surveillance termin√©e")

    def run_initial_check(self):
        """Ex√©cute une v√©rification initiale"""
        print("üèÅ V√©rification initiale...")

        try:
            result = subprocess.run(
                ["python", "run_quality_pipeline.py", "--quick"], timeout=120
            )

            if result.returncode == 0:
                print("‚úÖ V√©rification initiale : OK")
            else:
                print("‚ö†Ô∏è V√©rification initiale : Am√©liorations n√©cessaires")

        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout v√©rification initiale")
        except Exception as e:
            print(f"‚ùå Erreur v√©rification initiale : {e}")


def main():
    """Point d'entr√©e principal"""
    import argparse

    parser = argparse.ArgumentParser(description="Surveillance continue de la qualit√©")
    parser.add_argument(
        "--no-initial", action="store_true", help="Ignorer la v√©rification initiale"
    )
    parser.add_argument(
        "--install-deps",
        action="store_true",
        help="Installer les d√©pendances de surveillance",
    )

    args = parser.parse_args()

    # Installation des d√©pendances si demand√©
    if args.install_deps:
        print("üì¶ Installation des d√©pendances de surveillance...")
        subprocess.run([sys.executable, "-m", "pip", "install", "watchdog"])

    try:
        from watchdog.events import FileSystemEventHandler
        from watchdog.observers import Observer
    except ImportError:
        print("‚ùå Module 'watchdog' manquant")
        print("üì¶ Installation : pip install watchdog")
        print("üîÑ Ou utilisez : python watch_quality.py --install-deps")
        return 1

    monitor = ContinuousQualityMonitor()

    # V√©rification initiale
    if not args.no_initial:
        monitor.run_initial_check()
        print()

    # D√©marrage de la surveillance
    monitor.start_monitoring()

    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
