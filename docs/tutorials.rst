Tutoriels
=========

Cette section contient des guides pratiques pour ma√Ætriser les fonctionnalit√©s avanc√©es de Consultator.

.. _tutorials-import-data:

Import de donn√©es Excel
-----------------------

Apprenez √† importer efficacement vos donn√©es de consultants depuis Excel.

Pr√©paration des donn√©es
~~~~~~~~~~~~~~~~~~~~~~~

**Format requis**

Votre fichier Excel doit contenir les colonnes suivantes :

.. list-table:: Colonnes obligatoires
   :header-rows: 1

   * - Colonne
     - Type
     - Description
     - Exemple
   * - nom
     - Texte
     - Nom de famille en majuscules
     - DUPONT
   * - prenom
     - Texte
     - Pr√©nom
     - Jean
   * - email
     - Texte
     - Adresse email professionnelle
     - jean.dupont@consultant.com

.. list-table:: Colonnes optionnelles
   :header-rows: 1

   * - Colonne
     - Type
     - Description
   * - telephone
     - Texte
     - Num√©ro de t√©l√©phone
   * - competence_1
     - Texte
     - Premi√®re comp√©tence
   * - annees_exp_1
     - Nombre
     - Ann√©es d'exp√©rience pour competence_1
   * - competence_2
     - Texte
     - Deuxi√®me comp√©tence
   * - annees_exp_2
     - Nombre
     - Ann√©es d'exp√©rience pour competence_2

**Exemple de fichier Excel**

.. csv-table:: Exemple de donn√©es
   :header: nom, prenom, email, telephone, competence_1, annees_exp_1, competence_2, annees_exp_2

   DUPONT,Jean,jean.dupont@email.com,+33123456789,Python,5,SQL,3
   MARTIN,Marie,marie.martin@email.com,+33987654321,Data Science,4,Machine Learning,2
   BERNARD,Paul,paul.bernard@email.com,+33555666777,Java,8,Spring,6

Import √©tape par √©tape
~~~~~~~~~~~~~~~~~~~~~~~

1. **Acc√®s √† la fonctionnalit√© d'import**

   - Lancez Consultator
   - Allez dans "üë• Consultants"
   - Cliquez sur "üì• Importer des donn√©es"

2. **S√©lection du fichier**

   - Cliquez sur "Choisir un fichier"
   - S√©lectionnez votre fichier Excel (.xlsx ou .xls)
   - V√©rifiez que le fichier est correctement charg√©

3. **Configuration du mapping**

   .. image:: _static/import_mapping.png
      :alt: Interface de mapping des colonnes

   - V√©rifiez automatiquement le mapping des colonnes
   - Ajustez manuellement si n√©cessaire
   - Consultez l'aper√ßu des donn√©es

4. **Validation des donn√©es**

   Le syst√®me v√©rifie automatiquement :

   - **Format des emails** : Validation des adresses email
   - **Coh√©rence des comp√©tences** : V√©rification des noms de comp√©tences
   - **Doublons** : D√©tection des consultants d√©j√† existants

5. **Import final**

   - Lancez l'import
   - Suivez la progression en temps r√©el
   - Consultez le rapport d'import

Gestion des erreurs d'import
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Erreurs courantes et solutions**

.. list-table:: Probl√®mes fr√©quents
   :header-rows: 1

   * - Erreur
     - Cause
     - Solution
   * - Email invalide
     - Format d'email incorrect
     - V√©rifier et corriger l'adresse email
   * - Comp√©tence inconnue
     - Comp√©tence non r√©f√©renc√©e
     - Ajouter la comp√©tence au r√©f√©rentiel ou corriger le nom
   * - Doublon d√©tect√©
     - Consultant d√©j√† existant
     - Choisir de mettre √† jour ou ignorer
   * - Colonne manquante
     - Colonne obligatoire absente
     - Ajouter la colonne ou modifier le mapping

**Rapport d'erreurs d√©taill√©**

Apr√®s l'import, consultez le rapport qui d√©taille :

- Nombre de consultants import√©s avec succ√®s
- Liste des erreurs par ligne
- Suggestions de correction automatique

.. _tutorials-custom-reports:

Cr√©ation de rapports personnalis√©s
----------------------------------

Apprenez √† cr√©er des rapports sur mesure pour vos besoins d'analyse.

Types de rapports disponibles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Rapports standards**

- **Tableau de bord g√©n√©ral** : Vue d'ensemble des m√©triques
- **Rapport par comp√©tence** : Analyse d√©taill√©e des comp√©tences
- **Rapport financier** : Revenus et performance √©conomique
- **Rapport RH** : √âvolution des effectifs et turnover

**Rapports personnalis√©s**

Cr√©ation d'un rapport sur mesure :

1. **D√©finition des crit√®res**

   - P√©riode d'analyse (date de d√©but/fin)
   - Filtres sur les consultants (comp√©tences, statut, etc.)
   - M√©triques √† inclure
   - Format de sortie (PDF, Excel, HTML)

2. **Configuration des m√©triques**

   .. code-block:: python

      # Exemple de configuration de rapport
      report_config = {
          "title": "Rapport Data Science Q4 2024",
          "period": {
              "start": "2024-10-01",
              "end": "2024-12-31"
          },
          "filters": {
              "skills": ["Python", "Machine Learning", "Data Science"],
              "status": "active"
          },
          "metrics": [
              "consultant_count",
              "average_revenue",
              "skill_distribution",
              "project_completion_rate"
          ],
          "format": "pdf"
      }

3. **G√©n√©ration automatique**

   - Planification des rapports r√©currents
   - Export automatique vers le cloud
   - Distribution par email

Analyse des comp√©tences
~~~~~~~~~~~~~~~~~~~~~~~

**Matrice de comp√©tences**

Visualisez les comp√©tences de votre √©quipe :

.. code-block:: python

   # G√©n√©ration d'une matrice comp√©tence/niveau
   skill_matrix = consultant_service.generate_skill_matrix(
       consultants=active_consultants,
       skills=["Python", "SQL", "Machine Learning", "AWS"],
       group_by="seniority"
   )

**Gap analysis**

Identifiez les besoins en recrutement :

.. code-block:: python

   # Analyse des √©carts de comp√©tences
   gaps = analytics_service.identify_skill_gaps(
       required_skills=project_requirements,
       available_skills=current_team_skills,
       timeframe_months=6
   )

**Pr√©visions de comp√©tences**

.. code-block:: python

   # Pr√©vision des besoins futurs
   forecast = analytics_service.forecast_skill_demand(
       historical_data=mission_history,
       market_trends=market_data,
       prediction_months=12
   )

.. _tutorials-chatbot-setup:

Configuration du chatbot IA
---------------------------

Configurez et optimisez le chatbot IA pour vos besoins m√©tier.

Configuration de base
~~~~~~~~~~~~~~~~~~~~~~

1. **Acc√®s aux param√®tres**

   - Allez dans "‚öôÔ∏è Configuration"
   - Section "ü§ñ Chatbot IA"

2. **Configuration des sources de connaissances**

   - **Base de donn√©es consultants** : Activ√© par d√©faut
   - **Documents upload√©s** : CV, pr√©sentations, etc.
   - **Base de connaissances m√©tier** : Documents internes

3. **Param√®tres de r√©ponse**

   - **Style de r√©ponse** : Professionnel, Conversationnel, Technique
   - **Niveau de d√©tail** : Synth√©tique, D√©taill√©, Exhaustif
   - **Langue** : Fran√ßais, Anglais

Entra√Ænement du mod√®le
~~~~~~~~~~~~~~~~~~~~~~

**Ajout de connaissances sp√©cifiques**

.. code-block:: python

   # Entra√Ænement sur des documents m√©tier
   chatbot_service.train_on_documents([
       "docs/referentiel_competences.pdf",
       "docs/methodologie_projets.docx",
       "data/base_connaissances.json"
   ])

**Personnalisation des r√©ponses**

.. code-block:: python

   # Configuration des r√©ponses personnalis√©es
   custom_responses = {
       "tarifs": "Nos tarifs varient de 500‚Ç¨ √† 1200‚Ç¨ par jour selon l'expertise.",
       "delais": "Les d√©lais de mobilisation sont g√©n√©ralement de 2-4 semaines.",
       "methodologie": "Nous suivons une approche agile avec Scrum/Kanban."
   }

   chatbot_service.add_custom_responses(custom_responses)

Utilisation avanc√©e
~~~~~~~~~~~~~~~~~~~

**Requ√™tes complexes**

Le chatbot peut traiter des demandes sophistiqu√©es :

- *"Quels sont mes consultants Python seniors disponibles en r√©gion parisienne ?"*
- *"Peux-tu me proposer une √©quipe de 3 personnes pour un projet Data Science de 6 mois ?"*
- *"Quel est le co√ªt moyen d'un consultant AWS certifi√© ?"*

**Int√©gration avec les analyses**

.. code-block:: python

   # G√©n√©ration de rapports via le chatbot
   report_request = "G√©n√®re-moi un rapport des comp√©tences Data Science pour le trimestre dernier"
   report = chatbot_service.generate_report_from_query(report_request)

   # Analyse pr√©dictive
   prediction = chatbot_service.predict_from_query(
       "Quelles comp√©tences seront demand√©es dans 6 mois ?"
   )

Maintenance et optimisation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Mise √† jour des connaissances**

.. code-block:: bash

   # Mise √† jour p√©riodique des connaissances
   python scripts/update_chatbot_knowledge.py

**Monitoring des performances**

- Taux de r√©ponses satisfaisantes
- Temps de r√©ponse moyen
- Types de questions fr√©quentes
- Am√©liorations sugg√©r√©es

.. _tutorials-api-integration:

Int√©gration API externe
-----------------------

Connectez Consultator √† vos outils existants via l'API.

Authentification API
~~~~~~~~~~~~~~~~~~~~

**Obtention d'un token**

.. code-block:: bash

   curl -X POST https://api.consultator.com/v1/auth/login \
     -H "Content-Type: application/json" \
     -d '{"username": "votre-email", "password": "votre-mot-de-passe"}'

**Utilisation du token**

.. code-block:: bash

   curl -H "Authorization: Bearer VOTRE_TOKEN" \
        https://api.consultator.com/v1/consultants

Synchronisation avec un CRM
~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Export vers Salesforce**

.. code-block:: python

   import requests
   from simple_salesforce import Salesforce

   def sync_consultants_to_salesforce():
       # R√©cup√©ration des consultants
       response = requests.get(
           "https://api.consultator.com/v1/consultants",
           headers={"Authorization": f"Bearer {token}"}
       )
       consultants = response.json()["data"]

       # Connexion Salesforce
       sf = Salesforce(username=username, password=password, security_token=token)

       # Synchronisation
       for consultant in consultants:
           sf.Contact.create({
               "LastName": consultant["nom"],
               "FirstName": consultant["prenom"],
               "Email": consultant["email"],
               "Title": "Consultant"
           })

**Import depuis HubSpot**

.. code-block:: python

   from hubspot import HubSpot

   def import_contacts_from_hubspot():
       api_client = HubSpot(access_token=access_token)
       contacts = api_client.crm.contacts.get_all()

       for contact in contacts:
           consultant_data = {
               "nom": contact.properties["lastname"],
               "prenom": contact.properties["firstname"],
               "email": contact.properties["email"]
           }

           requests.post(
               "https://api.consultator.com/v1/consultants",
               json=consultant_data,
               headers={"Authorization": f"Bearer {token}"}
           )

Int√©gration avec Jira
~~~~~~~~~~~~~~~~~~~~~

**Synchronisation des projets**

.. code-block:: python

   from jira import JIRA

   def sync_projects_from_jira():
       jira = JIRA(server=jira_url, basic_auth=(username, password))

       # R√©cup√©ration des projets actifs
       projects = jira.projects()

       for project in projects:
           # Cr√©ation d'une mission dans Consultator
           mission_data = {
               "nom_projet": project.name,
               "client": project.lead.displayName,
               "statut": "en_cours"
           }

           requests.post(
               "https://api.consultator.com/v1/missions",
               json=mission_data,
               headers={"Authorization": f"Bearer {token}"}
           )

Webhook pour les √©v√©nements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Configuration d'un webhook**

.. code-block:: python

   webhook_config = {
       "url": "https://mon-app.com/webhooks/consultator",
       "events": ["consultant.created", "mission.completed"],
       "secret": "mon-secret-webhook"
   }

   requests.post(
       "https://api.consultator.com/v1/webhooks",
       json=webhook_config,
       headers={"Authorization": f"Bearer {token}"}
   )

**Traitement des √©v√©nements**

.. code-block:: python

   from flask import Flask, request
   import hmac
   import hashlib

   app = Flask(__name__)

   @app.route('/webhooks/consultator', methods=['POST'])
   def handle_webhook():
       payload = request.get_data()
       signature = request.headers.get('X-Consultator-Signature')

       # V√©rification de la signature
       expected_signature = hmac.new(
           webhook_secret.encode(),
           payload,
           hashlib.sha256
       ).hexdigest()

       if not hmac.compare_digest(signature, expected_signature):
           return 'Invalid signature', 400

       # Traitement de l'√©v√©nement
       event_data = request.get_json()
       event_type = event_data['event']

       if event_type == 'consultant.created':
           # Mise √† jour du CRM externe
           update_external_crm(event_data['data']['consultant'])

       return 'OK', 200

.. _tutorials-performance:

Optimisation des performances
-----------------------------

Techniques pour maintenir des performances optimales avec une base de donn√©es importante.

Indexation de la base de donn√©es
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Index strat√©giques**

.. code-block:: sql

   -- Index sur les recherches fr√©quentes
   CREATE INDEX idx_consultant_email ON consultants(email);
   CREATE INDEX idx_consultant_nom_prenom ON consultants(nom, prenom);

   -- Index sur les comp√©tences
   CREATE INDEX idx_competence_nom ON competences(nom);
   CREATE INDEX idx_consultant_competence_consultant_id ON consultant_competence(consultant_id);
   CREATE INDEX idx_consultant_competence_competence_id ON consultant_competence(competence_id);

   -- Index composites pour les analyses
   CREATE INDEX idx_mission_consultant_dates ON missions(consultant_id, date_debut, date_fin);

**Maintenance des index**

.. code-block:: bash

   # Analyse et reconstruction des index
   python scripts/optimize_database_indexes.py

Cache intelligent
~~~~~~~~~~~~~~~~~

**Cache des requ√™tes fr√©quentes**

.. code-block:: python

   from streamlit import cache_data
   import time

   @cache_data(ttl=3600)  # Cache pendant 1 heure
   def get_consultant_stats():
       """Cache les statistiques des consultants."""
       return consultant_service.get_statistics()

   @cache_data(ttl=1800)  # Cache pendant 30 minutes
   def get_skill_distribution():
       """Cache la distribution des comp√©tences."""
       return analytics_service.get_skill_distribution()

**Cache des donn√©es de r√©f√©rence**

.. code-block:: python

   @st.cache_data
   def load_referentiel_competences():
       """Cache le r√©f√©rentiel des comp√©tences."""
       return competence_service.get_all_competences()

Optimisation des requ√™tes
~~~~~~~~~~~~~~~~~~~~~~~~~

**Requ√™tes pagin√©es**

.. code-block:: python

   def get_consultants_optimized(page=1, per_page=50, filters=None):
       """R√©cup√©ration optimis√©e avec pagination."""
       query = session.query(Consultant)

       # Application des filtres
       if filters:
           if filters.get('skill'):
               query = query.join(Consultant.competences).filter(
                   Competence.nom.ilike(f"%{filters['skill']}%")
               )
           if filters.get('status'):
               query = query.filter(Consultant.statut == filters['status'])

       # Pagination
       offset = (page - 1) * per_page
       return query.offset(offset).limit(per_page).all()

**Chargement s√©lectif**

.. code-block:: python

   def get_consultant_summary(consultant_id):
       """Chargement s√©lectif des donn√©es essentielles."""
       return session.query(
           Consultant.id,
           Consultant.nom,
           Consultant.prenom,
           Consultant.email,
           func.count(Competence.id).label('nb_competences')
       ).join(Consultant.competences).filter(
           Consultant.id == consultant_id
       ).group_by(Consultant.id).first()

Monitoring des performances
~~~~~~~~~~~~~~~~~~~~~~~~~~~

**M√©triques cl√©s √† surveiller**

- **Temps de r√©ponse des pages** : < 2 secondes
- **Temps de chargement des donn√©es** : < 5 secondes pour 1000 consultants
- **Utilisation m√©moire** : < 80% de la RAM disponible
- **Temps de requ√™te base de donn√©es** : < 500ms en moyenne

**Outils de monitoring**

.. code-block:: python

   import time
   import logging

   def monitor_query_performance(func):
       """D√©corateur pour mesurer les performances des requ√™tes."""
       def wrapper(*args, **kwargs):
           start_time = time.time()
           result = func(*args, **kwargs)
           execution_time = time.time() - start_time

           if execution_time > 1.0:  # Log si > 1 seconde
               logging.warning(f"Requ√™te lente: {func.__name__} - {execution_time:.2f}s")

           return result
       return wrapper

   @monitor_query_performance
   def get_consultants_with_skills():
       return consultant_service.get_all_with_competences()

Maintenance pr√©ventive
~~~~~~~~~~~~~~~~~~~~~~

**T√¢ches automatis√©es**

.. code-block:: bash

   # Optimisation quotidienne de la base
   0 2 * * * python scripts/daily_database_maintenance.py

   # Reconstruction des index hebdomadaire
   0 3 * * 1 python scripts/weekly_index_rebuild.py

   # Archive des donn√©es anciennes mensuelle
   0 4 1 * * python scripts/monthly_data_archive.py

**Seuils d'alerte**

- Nombre de consultants > 5000 : optimisation obligatoire
- Taille base de donn√©es > 10GB : archivage recommand√©
- Temps de sauvegarde > 30min : optimisation n√©cessaire
