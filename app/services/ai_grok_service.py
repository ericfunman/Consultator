#!/usr/bin/env python3
"""
Service d'analyse IA avec Grok (xAI)
Utilise l'API Grok pour analyser les CV et extraire les informations pertinentes
"""

import json
import logging
import os
from datetime import datetime
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

import requests
import streamlit as st

logger = logging.getLogger(__name__)


class GrokAIService:
    """Service d'analyse IA utilisant Grok (xAI)"""

    def __init__(self, api_key: Optional[str] = None):
        """
        Initialise le service Grok

        Args:
            api_key: Cl√© API Grok. Si None, utilise la variable d'environnement
        """
        self.api_key = api_key or os.getenv("GROK_API_KEY")
        self.base_url = "https://api.x.ai/v1"
        self.model = "grok-beta"  # Mod√®le Grok actuel

        if not self.api_key:
            raise ValueError("‚ùå Cl√© API Grok manquante. Configurez GROK_API_KEY")

    def analyze_cv(self, document_text: str) -> Dict[str, Any]:
        """
        Analyse un CV avec Grok et retourne les informations structur√©es

        Args:
            document_text: Texte brut du CV
            consultant_name: Nom du consultant (optionnel)

        Returns:
            Dictionnaire avec les informations extraites
        """
        try:
            # Construire le prompt d'analyse
            prompt = self._build_analysis_prompt(document_text)

            # Appeler l'API Grok
            response = self._call_grok_api(prompt)

            # Parser et valider la r√©ponse
            return self._parse_and_validate_response(response, document_text)

        except Exception as e:
            logger.error(f"Erreur lors de l'analyse IA: {e}")
            raise RuntimeError(f"‚ùå √âchec de l'analyse IA: {str(e)}") from e

    def _build_analysis_prompt(self, document_text: str) -> str:
        """Construit le prompt d'analyse pour Grok"""

        # Limiter la longueur du texte pour √©viter les d√©passements de tokens
        max_length = 8000  # Environ 2000 tokens
        if len(document_text) > max_length:
            document_text = document_text[:max_length] + "...[texte tronqu√©]"

        prompt = f"""Tu es un expert en analyse de CV pour le recrutement dans l'informatique.
Ton objectif est d'extraire avec pr√©cision les informations cl√©s d'un CV de consultant IT.

CV √† analyser :
{document_text}

INSTRUCTIONS IMPORTANTES :
1. Analyse uniquement le contenu fourni - ne fais pas d'hypoth√®ses
2. Sois pr√©cis sur les dates (format YYYY-MM-DD quand possible)
3. Pour les missions en cours, utilise "en cours" comme date de fin
4. Liste toutes les technologies/comp√©tences techniques mentionn√©es
5. Structure ta r√©ponse EXACTEMENT comme demand√© ci-dessous

FORMAT DE R√âPONSE JSON OBLIGATOIRE :
{{
    "consultant_info": {{
        "nom": "Nom du consultant",
        "prenom": "Pr√©nom du consultant",
        "email": "email@exemple.com",
        "telephone": "+33123456789",
        "experience_annees": 5,
        "niveau_etudes": "Master Informatique"
    }},
    "missions": [
        {{
            "client": "Nom du client/entreprise",
            "role": "Poste occup√© (ex: D√©veloppeur, Chef de projet)",
            "date_debut": "YYYY-MM-DD",
            "date_fin": "YYYY-MM-DD ou 'en cours'",
            "description": "Description d√©taill√©e des responsabilit√©s",
            "technologies": ["tech1", "tech2", "tech3"],
            "competences_fonctionnelles": ["gestion", "analyse", "management"]
        }}
    ],
    "competences": {{
        "techniques": ["Python", "SQL", "React", "Docker"],
        "fonctionnelles": ["Management", "Analyse m√©tier", "Formation"],
        "langues": ["Fran√ßais C2", "Anglais B2", "Espagnol B1"],
        "certifications": ["AWS Certified", "Scrum Master"]
    }},
    "formation": {{
        "diplome_principal": "Master en Informatique",
        "annee_obtention": 2020,
        "etablissement": "Universit√© Paris-Saclay"
    }},
    "resume_general": "R√©sum√© g√©n√©ral du profil professionnel",
    "disponibilite": "imm√©diate ou date si mentionn√©e",
    "mobilite": "Paris, remote possible, etc.",
    "salaire_actuel": "montant si mentionn√©",
    "pretentions": "pr√©tentions salariales si mentionn√©es"
}}

R√àGLES DE QUALIT√â :
- Si une information n'est pas pr√©sente, utilise null ou liste vide []
- Pour les dates floues, utilise le format "YYYY-MM-DD" le plus pr√©cis possible
- Liste TOUTES les technologies mentionn√©es (m√™me si √©videntes)
- S√©pare clairement technologies vs comp√©tences fonctionnelles
- Sois exhaustif mais pr√©cis

R√©ponds UNIQUEMENT avec du JSON valide, rien d'autre."""

        return prompt

    def _call_grok_api(self, prompt: str) -> Dict[str, Any]:
        """Appelle l'API Grok"""

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }

        payload = {
            "model": self.model,
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 4000,
            "temperature": 0.1,  # Faible temp√©rature pour plus de pr√©cision
        }

        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=60,
            )

            response.raise_for_status()
            return response.json()

        except requests.exceptions.RequestException as e:
            raise ConnectionError(f"Erreur API Grok: {str(e)}") from e

    def _parse_and_validate_response(
        self, api_response: Dict[str, Any], original_text: str
    ) -> Dict[str, Any]:
        """Parse et valide la r√©ponse de Grok"""

        try:
            # Extraire le contenu de la r√©ponse
            content = api_response["choices"][0]["message"]["content"]

            # Nettoyer le contenu (enlever les ```json si pr√©sents)
            content = content.strip()
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            content = content.strip()

            # Parser le JSON
            parsed_data = json.loads(content)

            # Validation basique
            if not isinstance(parsed_data, dict):
                raise ValueError("La r√©ponse n'est pas un objet JSON valide")

            # Ajouter des m√©tadonn√©es
            parsed_data["_metadata"] = {
                "analyzed_by": "grok_ai",
                "analysis_date": datetime.now().isoformat(),
                "text_length": len(original_text),
                "model_used": self.model,
            }

            return parsed_data

        except json.JSONDecodeError as e:
            logger.error(f"Erreur de parsing JSON: {e}")
            logger.error(f"Contenu re√ßu: {content[:500]}...")
            raise ValueError("‚ùå La r√©ponse de Grok n'est pas un JSON valide") from e

        except KeyError as e:
            logger.error(f"Structure de r√©ponse inattendue: {e}")
            raise ValueError("‚ùå Structure de r√©ponse Grok inattendue") from e

    def get_cost_estimate(self, text_length: int) -> float:
        """
        Estime le co√ªt d'une analyse en fonction de la longueur du texte

        Args:
            text_length: Longueur du texte en caract√®res

        Returns:
            Co√ªt estim√© en dollars
        """
        # Estimation bas√©e sur les prix Grok (approximatif)
        # ~$0.001 par 1K tokens, 1 token ‚âà 4 caract√®res
        estimated_tokens = text_length / 4
        cost_per_1k_tokens = 0.001
        return (estimated_tokens / 1000) * cost_per_1k_tokens


def get_grok_service() -> Optional[GrokAIService]:
    """Factory pour obtenir une instance du service Grok"""
    try:
        return GrokAIService()
    except ValueError:
        return None


def is_grok_available() -> bool:
    """V√©rifie si le service Grok est disponible"""
    try:
        service = get_grok_service()
        return service is not None
    except Exception:
        return False


# Interface Streamlit pour la configuration
def show_grok_config_interface():
    """Interface Streamlit pour configurer Grok"""

    st.markdown("### ü§ñ Configuration Grok AI")

    # V√©rifier si la cl√© API est configur√©e
    api_key = os.getenv("GROK_API_KEY")

    if api_key:
        # Cl√© configur√©e
        masked_key = (
            api_key[:8] + "..." + api_key[-4:] if len(api_key) > 12 else api_key
        )
        st.success(f"‚úÖ Cl√© API configur√©e: `{masked_key}`")

        # Tester la connexion
        if st.button("üîç Tester la connexion", key="test_grok_connection"):
            with st.spinner("Test de connexion en cours..."):
                try:
                    service = GrokAIService(api_key)
                    # Faire un petit test
                    service._call_grok_api("Bonjour, r√©ponds simplement 'OK'")
                    st.success("‚úÖ Connexion Grok r√©ussie !")
                except Exception as e:
                    st.error(f"‚ùå Erreur de connexion: {e}")

    else:
        # Cl√© non configur√©e
        st.warning("‚ö†Ô∏è Cl√© API Grok non configur√©e")

        st.markdown(
            """
        **Pour utiliser Grok AI, vous devez :**

        1. **Obtenir une cl√© API** sur [x.ai](https://x.ai)
        2. **Ajouter la variable d'environnement** :
           ```bash
           export GROK_API_KEY="votre_cl√©_api_ici"
           ```
        3. **Red√©marrer l'application**
        """
        )

        # Saisie temporaire de la cl√© API
        temp_api_key = st.text_input(
            "Cl√© API Grok (temporaire)",
            type="password",
            help="Saisissez votre cl√© API pour tester imm√©diatement",
        )

        if temp_api_key and st.button("üîç Tester avec cette cl√©"):
            try:
                service = GrokAIService(temp_api_key)
                service._call_grok_api("Bonjour, r√©ponds simplement 'OK'")
                st.success(
                    "‚úÖ Cl√© API valide ! Configurez-la dans vos variables d'environnement."
                )
            except Exception as e:
                st.error(f"‚ùå Cl√© API invalide: {e}")


if __name__ == "__main__":
    # Test du service
    print("Test du service Grok AI...")

    if not is_grok_available():
        print("‚ùå Service Grok non disponible (cl√© API manquante)")
        exit(1)

    # Test avec un CV exemple
    test_cv = """
    Jean DUPONT
    D√©veloppeur Python Senior

    Exp√©rience professionnelle :
    - Soci√©t√© G√©n√©rale (2020-2023) : D√©veloppeur Python, gestion de bases de donn√©es SQL
    - BNP Paribas (2018-2020) : Analyste d√©veloppeur, React, Node.js

    Comp√©tences : Python, SQL, React, Docker, Kubernetes
    """

    try:
        service = get_grok_service()
        result = service.analyze_cv(test_cv, "Jean DUPONT")
        print("‚úÖ Analyse r√©ussie !")
        print(json.dumps(result, indent=2, ensure_ascii=False))
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
