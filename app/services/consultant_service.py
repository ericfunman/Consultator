"""
Service de gestion des consultants
CRUD operations pour les consultants avec la base de donn√É¬©es
Optimis√É¬© pour g√É¬©rer 1000+ consultants avec cache et pagination efficace
"""

from datetime import date
from datetime import datetime
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

import streamlit as st
from sqlalchemy import func
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.orm import Session
from sqlalchemy.orm import joinedload

from app.database.database import get_database_session
from app.database.models import Competence
from app.database.models import Consultant
from app.database.models import ConsultantCompetence
from app.database.models import Mission
from app.database.models import Practice


class ConsultantService:
    """Service pour la gestion des consultants optimis√É¬© pour de gros volumes"""

    # Constantes pour √©viter la duplication de cha√Ænes (SonarQube)
    STATUS_AVAILABLE = "‚úÖ Disponible"
    STATUS_BUSY = "üî¥ Occup√©"
    STATUS_IN_PROGRESS = "En cours"

    @staticmethod
    def get_all_consultants_objects(
        page: int = 1, per_page: int = 50
    ) -> List[Consultant]:
        """
        R√É¬©cup√É¬®re tous les consultants comme objets (ancienne interface)

        Args:
            page: Num√É¬©ro de la page (commence √É¬† 1)
            per_page: Nombre de consultants par page

        Returns:
            Liste d'objets Consultant d√É¬©tach√É¬©s de la session

        Raises:
            SQLAlchemyError: En cas d'erreur de base de donn√É¬©es
        """
        try:
            with get_database_session() as session:
                consultants = (
                    session.query(Consultant)
                    .options(joinedload(Consultant.practice))
                    .offset((page - 1) * per_page)
                    .limit(per_page)
                    .all()
                )

                # D√É¬©tacher les instances de la session pour √É¬©viter les erreurs
                # DetachedInstance
                for consultant in consultants:
                    session.expunge(consultant)

                return consultants
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la r√É¬©cup√É¬©ration des consultants: {e}")
            return []

    @staticmethod
    def get_all_consultants(page: int = 1, per_page: int = 50) -> List[Dict]:
        """R√É¬©cup√É¬®re tous les consultants avec pagination optimis√É¬©e"""
        try:
            with get_database_session() as session:
                consultants = (
                    session.query(Consultant)
                    .options(joinedload(Consultant.practice))
                    .offset((page - 1) * per_page)
                    .limit(per_page)
                    .all()
                )

                # Convertir en dictionnaires pour √É¬©viter les erreurs de session
                consultant_list = []
                for consultant in consultants:
                    consultant_dict = {
                        "id": consultant.id,
                        "prenom": consultant.prenom,
                        "nom": consultant.nom,
                        "email": consultant.email,
                        "telephone": consultant.telephone,
                        "salaire_actuel": consultant.salaire_actuel,
                        "disponibilite": consultant.disponibilite,
                        "practice_name": (
                            consultant.practice.nom if consultant.practice else "N/A"
                        ),
                        "date_creation": consultant.date_creation,
                        "derniere_maj": consultant.derniere_maj,
                        # Nouveaux champs V1.2.2
                        "date_disponibilite": consultant.date_disponibilite,
                        "experience_annees": consultant.experience_annees,
                        "grade": consultant.grade,
                        "type_contrat": consultant.type_contrat,
                        "societe": consultant.societe,
                    }
                    consultant_list.append(consultant_dict)

                return consultant_list
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la r√É¬©cup√É¬©ration des consultants: {e}")
            return []

    @staticmethod
    def _build_search_query(
        session, practice_filter, grade_filter, availability_filter, search_term
    ):
        """Helper: Construit la requ√™te de base avec les filtres"""
        # Requ√™te optimis√©e avec JOIN pour √©viter les requ√™tes N+1
        query = (
            session.query(
                Consultant.id,
                Consultant.prenom,
                Consultant.nom,
                Consultant.email,
                Consultant.telephone,
                Consultant.salaire_actuel,
                Consultant.disponibilite,
                Consultant.date_creation,
                Consultant.societe,
                Consultant.date_entree_societe,
                Consultant.date_sortie_societe,
                Consultant.date_premiere_mission,
                Consultant.grade,
                Consultant.type_contrat,
                Practice.nom.label("practice_name"),
                func.count(Mission.id).label("nb_missions"),
            )
            .outerjoin(Practice, Consultant.practice_id == Practice.id)
            .outerjoin(Mission, Consultant.id == Mission.consultant_id)
        )

        return ConsultantService._apply_search_filters(
            query, practice_filter, grade_filter, availability_filter, search_term
        )

    @staticmethod
    def _apply_search_filters(
        query, practice_filter, grade_filter, availability_filter, search_term
    ):
        """Helper: Applique tous les filtres de recherche"""
        # Appliquer les filtres
        if practice_filter:
            query = query.filter(Practice.nom == practice_filter)

        if grade_filter:
            query = query.filter(Consultant.grade == grade_filter)

        if availability_filter is not None:
            query = query.filter(Consultant.disponibilite == availability_filter)

        if search_term:
            search_filter = f"%{search_term}%"
            query = query.filter(
                (Consultant.nom.ilike(search_filter))
                | (Consultant.prenom.ilike(search_filter))
                | (Consultant.email.ilike(search_filter))
                | (Consultant.societe.ilike(search_filter))
            )

        return query

    @staticmethod
    def _finalize_search_query(query, page, per_page):
        """Helper: Finalise la requ√™te avec grouping et pagination"""
        return (
            query.group_by(
                Consultant.id,
                Consultant.prenom,
                Consultant.nom,
                Consultant.email,
                Consultant.telephone,
                Consultant.salaire_actuel,
                Consultant.disponibilite,
                Consultant.date_creation,
                Consultant.societe,
                Consultant.date_entree_societe,
                Consultant.date_sortie_societe,
                Consultant.date_premiere_mission,
                Consultant.grade,
                Consultant.type_contrat,
                Practice.nom,
            )
            .offset((page - 1) * per_page)
            .limit(per_page)
        )

    @staticmethod
    def _convert_consultant_row_to_dict(row):
        """Helper: Convertit une ligne de r√©sultat en dictionnaire"""
        salaire = row.salaire_actuel or 0
        cjm = (salaire * 1.8 / 216) if salaire else 0

        # Calcul de l'exp√©rience
        experience_annees = ConsultantService._calculate_experience_years(
            row.date_premiere_mission
        )

        return {
            "id": row.id,
            "prenom": row.prenom,
            "nom": row.nom,
            "email": row.email,
            "telephone": row.telephone,
            "salaire_actuel": salaire,
            "disponibilite": row.disponibilite,
            "grade": row.grade or "Junior",
            "type_contrat": row.type_contrat or "CDI",
            "practice_name": row.practice_name or "Non affect√©",
            "date_creation": row.date_creation,
            "nb_missions": row.nb_missions,
            "cjm": cjm,
            "salaire_formatted": f"{salaire:,}‚Ç¨",
            "cjm_formatted": f"{cjm:,.0f}‚Ç¨",
            "statut": (
                ConsultantService.STATUS_AVAILABLE
                if row.disponibilite
                else ConsultantService.STATUS_BUSY
            ),
            # Nouveaux champs V1.2
            "societe": row.societe or "Quanteam",
            "experience_annees": experience_annees,
            "experience_formatted": (
                f"{experience_annees} ans" if experience_annees > 0 else "N/A"
            ),
        }

    @staticmethod
    def _calculate_experience_years(date_premiere_mission):
        """Helper: Calcule l'exp√©rience en ann√©es"""
        if not date_premiere_mission:
            return 0

        from datetime import date

        today = date.today()
        delta = today - date_premiere_mission
        return round(delta.days / 365.25, 1)

    @staticmethod
    def search_consultants_optimized(
        search_term: str,
        page: int = 1,
        per_page: int = 50,
        practice_filter: Optional[str] = None,
        grade_filter: Optional[str] = None,
        availability_filter: Optional[bool] = None,
    ) -> List[Dict]:
        """Recherche optimis√©e avec cache pour de gros volumes - avec statistiques int√©gr√©es"""
        try:
            with get_database_session() as session:
                # Construire et ex√©cuter la requ√™te
                query = ConsultantService._build_search_query(
                    session,
                    practice_filter,
                    grade_filter,
                    availability_filter,
                    search_term,
                )
                query = ConsultantService._finalize_search_query(query, page, per_page)
                results = query.all()

                # Convertir en dictionnaires avec calculs optimis√©s
                consultant_list = []
                for row in results:
                    consultant_dict = ConsultantService._convert_consultant_row_to_dict(
                        row
                    )
                    consultant_list.append(consultant_dict)

                return consultant_list
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la recherche optimis√©e: {e}")
            return []

    @staticmethod
    def get_consultants_count() -> int:
        """Retourne le nombre total de consultants avec cache"""
        try:
            with get_database_session() as session:
                return session.query(Consultant).count()
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors du comptage des consultants: {e}")
            return 0

    @staticmethod
    def _build_stats_query(session, practice_filter, grade_filter, availability_filter):
        """Helper: Construit la requ√™te optimis√©e pour les stats des consultants"""
        # Une seule requ√™te avec LEFT JOIN pour r√©cup√©rer consultants + nombre de missions
        query = (
            session.query(
                Consultant.id,
                Consultant.prenom,
                Consultant.nom,
                Consultant.email,
                Consultant.telephone,
                Consultant.salaire_actuel,
                Consultant.disponibilite,
                Consultant.date_creation,
                Consultant.derniere_maj,
                Consultant.societe,
                Consultant.date_entree_societe,
                Consultant.date_sortie_societe,
                Consultant.date_premiere_mission,
                Consultant.grade,
                Consultant.type_contrat,
                Practice.nom.label("practice_name"),
                func.count(Mission.id).label("nb_missions"),
            )
            .outerjoin(Practice, Consultant.practice_id == Practice.id)
            .outerjoin(Mission, Consultant.id == Mission.consultant_id)
        )

        return ConsultantService._apply_stats_filters(
            query, practice_filter, grade_filter, availability_filter
        )

    @staticmethod
    def _apply_stats_filters(query, practice_filter, grade_filter, availability_filter):
        """Helper: Applique les filtres pour les statistiques"""
        # Appliquer les filtres
        if practice_filter:
            query = query.filter(Practice.nom == practice_filter)

        if grade_filter:
            query = query.filter(Consultant.grade == grade_filter)

        if availability_filter is not None:
            query = query.filter(Consultant.disponibilite == availability_filter)

        return query

    @staticmethod
    def _finalize_stats_query(query, page, per_page):
        """Helper: Finalise la requ√™te stats avec grouping et pagination"""
        return (
            query.group_by(
                Consultant.id,
                Consultant.prenom,
                Consultant.nom,
                Consultant.email,
                Consultant.telephone,
                Consultant.salaire_actuel,
                Consultant.disponibilite,
                Consultant.date_creation,
                Consultant.derniere_maj,
                Consultant.societe,
                Consultant.date_entree_societe,
                Consultant.date_sortie_societe,
                Consultant.date_premiere_mission,
                Consultant.grade,
                Consultant.type_contrat,
                Practice.nom,
            )
            .offset((page - 1) * per_page)
            .limit(per_page)
        )

    @staticmethod
    def _convert_stats_row_to_dict(row):
        """Helper: Convertit une ligne de r√©sultat stats en dictionnaire"""
        salaire = row.salaire_actuel or 0
        cjm = (salaire * 1.8 / 216) if salaire else 0

        # Calcul de l'exp√©rience
        experience_annees = ConsultantService._calculate_experience_years(
            row.date_premiere_mission
        )

        return {
            "id": row.id,
            "prenom": row.prenom,
            "nom": row.nom,
            "email": row.email,
            "telephone": row.telephone,
            "salaire_actuel": salaire,
            "disponibilite": row.disponibilite,
            "practice_name": row.practice_name or "Non affect√©",
            "date_creation": row.date_creation,
            "derniere_maj": row.derniere_maj,
            "nb_missions": row.nb_missions,
            "cjm": cjm,
            "salaire_formatted": f"{salaire:,}‚Ç¨",
            "cjm_formatted": f"{cjm:,.0f}‚Ç¨",
            "statut": (
                ConsultantService.STATUS_AVAILABLE
                if row.disponibilite
                else ConsultantService.STATUS_BUSY
            ),
            # Nouveaux champs V1.2
            "societe": row.societe or "Quanteam",
            "experience_annees": experience_annees,
            "experience_formatted": (
                f"{experience_annees} ans" if experience_annees > 0 else "N/A"
            ),
            # Nouveaux champs V1.2.1
            "grade": row.grade or "Junior",
            "type_contrat": row.type_contrat or "CDI",
        }

    @staticmethod
    def get_all_consultants_with_stats(
        page: int = 1,
        per_page: int = 50,
        practice_filter: Optional[str] = None,
        grade_filter: Optional[str] = None,
        availability_filter: Optional[bool] = None,
    ) -> List[Dict]:
        """
        R√©cup√®re tous les consultants avec leurs statistiques en une seule requ√™te optimis√©e
        R√©sout le probl√®me N+1 des requ√™tes pour compter les missions
        """
        try:
            with get_database_session() as session:
                # Construire et ex√©cuter la requ√™te
                query = ConsultantService._build_stats_query(
                    session, practice_filter, grade_filter, availability_filter
                )
                query = ConsultantService._finalize_stats_query(query, page, per_page)
                results = query.all()

                # Convertir en dictionnaires avec calculs optimis√©s
                consultant_list = []
                for row in results:
                    consultant_dict = ConsultantService._convert_stats_row_to_dict(row)
                    consultant_list.append(consultant_dict)

                return consultant_list
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la r√©cup√©ration optimis√©e des consultants: {e}")
            return []

    @staticmethod
    def get_consultant_summary_stats() -> Dict[str, int]:
        """R√É¬©cup√É¬®re les statistiques g√É¬©n√É¬©rales avec cache pour tableau de bord"""
        try:
            with get_database_session() as session:
                total_consultants = session.query(Consultant).count()
                available_consultants = (
                    session.query(Consultant).filter(Consultant.disponibilite).count()
                )
                total_missions = session.query(Mission).count()
                active_missions = (
                    session.query(Mission).filter(Mission.statut == "en_cours").count()
                )

                return {
                    "total_consultants": total_consultants,
                    "available_consultants": available_consultants,
                    "total_missions": total_missions,
                    "active_missions": active_missions,
                    "busy_consultants": total_consultants - available_consultants,
                }
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la r√É¬©cup√É¬©ration des stats: {e}")
            return {
                "total_consultants": 0,
                "available_consultants": 0,
                "total_missions": 0,
                "active_missions": 0,
                "busy_consultants": 0,
            }

    @staticmethod
    def get_consultants_by_availability(available: bool = True) -> List[Dict]:
        """
        R√É¬©cup√É¬®re les consultants selon leur disponibilit√É¬©

        Args:
            available: True pour les consultants disponibles, False pour les occup√É¬©s

        Returns:
            Liste de dictionnaires contenant les informations des consultants

        Example:
            >>> disponibles = ConsultantService.get_consultants_by_availability(True)
            >>> print(f"Nombre de consultants disponibles: {len(disponibles)}")
        """
        try:
            with get_database_session() as session:
                consultants = (
                    session.query(Consultant)
                    .filter(Consultant.disponibilite == available)
                    .all()
                )

                # Convertir en dictionnaires
                result = []
                for consultant in consultants:
                    result.append(
                        {
                            "id": consultant.id,
                            "prenom": consultant.prenom,
                            "nom": consultant.nom,
                            "email": consultant.email,
                            "telephone": consultant.telephone,
                            "salaire_actuel": consultant.salaire_actuel,
                            "disponibilite": consultant.disponibilite,
                            "grade": consultant.grade,
                            "type_contrat": consultant.type_contrat,
                            "statut": (
                                "√¢¬ú¬Ö Disponible"
                                if consultant.disponibilite
                                else "√∞¬ü¬î¬¥ Occup√É¬©"
                            ),
                        }
                    )

                return result
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(
                f"Erreur lors de la r√É¬©cup√É¬©ration des consultants par disponibilit√É¬©: {e}"
            )
            return []

    @staticmethod
    def get_consultant_by_id(consultant_id: int) -> Optional[Consultant]:
        """R√É¬©cup√É¬®re un consultant par son ID avec toutes ses relations"""
        try:
            with get_database_session() as session:
                consultant = (
                    session.query(Consultant)
                    .options(
                        joinedload(Consultant.competences),
                        joinedload(Consultant.missions),
                    )
                    .filter(Consultant.id == consultant_id)
                    .first()
                )

                # D√É¬©tacher l'objet de la session pour √É¬©viter les erreurs de session
                # ferm√É¬©e
                if consultant:
                    session.expunge(consultant)

                return consultant
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(
                f"Erreur lors de la r√É¬©cup√É¬©ration du consultant {consultant_id}: {e}"
            )
            return None

    @staticmethod
    def get_consultant_with_stats(consultant_id: int) -> Optional[Dict[str, Any]]:
        """R√É¬©cup√É¬®re un consultant avec ses statistiques pour √É¬©viter les probl√É¬®mes de session"""
        try:
            with get_database_session() as session:
                consultant = (
                    session.query(Consultant)
                    .options(
                        joinedload(Consultant.competences).joinedload(
                            ConsultantCompetence.competence
                        ),
                        joinedload(Consultant.missions),
                    )
                    .filter(Consultant.id == consultant_id)
                    .first()
                )

                if not consultant:
                    return None

                # Calculer les statistiques avant de fermer la session
                competences_count = (
                    len(consultant.competences) if consultant.competences else 0
                )
                missions_count = len(consultant.missions) if consultant.missions else 0

                # Convertir en dictionnaire avec toutes les donn√É¬©es n√É¬©cessaires
                consultant_data = {
                    "id": consultant.id,
                    "prenom": consultant.prenom,
                    "nom": consultant.nom,
                    "email": consultant.email,
                    "telephone": consultant.telephone,
                    "salaire_actuel": consultant.salaire_actuel,
                    "disponibilite": consultant.disponibilite,
                    "notes": consultant.notes,
                    "date_creation": consultant.date_creation,
                    "derniere_maj": consultant.derniere_maj,
                    "competences_count": competences_count,
                    "missions_count": missions_count,
                    "competences": [
                        {
                            "id": comp.competence.id if comp.competence else comp.id,
                            "nom": comp.competence.nom if comp.competence else "N/A",
                            "niveau": comp.niveau_maitrise,
                            "annees_experience": comp.annees_experience,
                        }
                        for comp in (consultant.competences or [])
                    ],
                    "missions": [
                        {
                            "id": mission.id,
                            "nom_mission": mission.nom_mission,
                            "client": mission.client,
                            "description": mission.description,
                            "date_debut": mission.date_debut,
                            "date_fin": mission.date_fin,
                            "statut": mission.statut,
                            "revenus_generes": mission.revenus_generes,
                        }
                        for mission in (consultant.missions or [])
                    ],
                }

                return consultant_data

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(
                f"Erreur lors de la r√É¬©cup√É¬©ration du consultant avec stats {consultant_id}: {e}"
            )
            return None

    @staticmethod
    def get_consultant_by_email(email: str) -> Optional[Consultant]:
        """
        R√É¬©cup√É¬®re un consultant par son email

        Args:
            email: Adresse email du consultant (insensible √É¬† la casse)

        Returns:
            Objet Consultant si trouv√É¬©, None sinon

        Example:
            >>> consultant = ConsultantService.get_consultant_by_email("jean.dupont@email.com")
            >>> if consultant:
            ...     print(f"Consultant trouv√É¬©: {consultant.prenom} {consultant.nom}")
        """
        try:
            with get_database_session() as session:
                return (
                    session.query(Consultant)
                    .filter(Consultant.email == email.lower())
                    .first()
                )
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(
                f"Erreur lors de la r√É¬©cup√É¬©ration du consultant par email {email}: {e}"
            )
            return None

    @staticmethod
    def create_consultant(data: dict) -> bool:
        """
        Cr√É¬©e un nouveau consultant dans la base de donn√É¬©es

        Args:
            data: Dictionnaire contenant les donn√É¬©es du consultant avec les cl√É¬©s:
                - prenom (str): Pr√É¬©nom du consultant (requis)
                - nom (str): Nom du consultant (requis)
                - email (str): Email du consultant (requis)
                - telephone (str, optional): Num√É¬©ro de t√É¬©l√É¬©phone
                - salaire (float, optional): Salaire actuel
                - practice_id (int, optional): ID de la practice
                - disponible (bool, optional): Disponibilit√É¬© (d√É¬©faut: True)
                - notes (str, optional): Notes compl√É¬©mentaires
                - societe (str, optional): Soci√É¬©t√É¬© (d√É¬©faut: "Quanteam")
                - grade (str, optional): Grade du consultant (d√É¬©faut: "Junior")
                - type_contrat (str, optional): Type de contrat (d√É¬©faut: "CDI")

        Returns:
            bool: True si la cr√É¬©ation a r√É¬©ussi, False sinon

        Example:
            >>> data = {
            ...     "prenom": "Jean",
            ...     "nom": "Dupont",
            ...     "email": "jean.dupont@email.com",
            ...     "salaire": 45000.0,
            ...     "grade": "Senior"
            ... }
            >>> success = ConsultantService.create_consultant(data)
            >>> print("Cr√É¬©ation r√É¬©ussie" if success else "√É¬âchec de cr√É¬©ation")
        """
        try:
            # Validation des champs requis
            required_fields = ["prenom", "nom", "email"]
            for field in required_fields:
                if not data.get(field) or str(data.get(field, "")).strip() == "":
                    print(f"√¢¬ù¬å Champ requis manquant ou vide: {field}")
                    return False

            # Validation de l'email
            email = data.get("email", "").strip()
            if "@" not in email or "." not in email:
                print(f"√¢¬ù¬å Format d'email invalide: {email}")
                return False

            # V√É¬©rifier l'unicit√É¬© de l'email
            with get_database_session() as session:
                existing_consultant = (
                    session.query(Consultant)
                    .filter(Consultant.email == email.lower())
                    .first()
                )
                if existing_consultant:
                    print(f"√¢¬ù¬å Email d√É¬©j√É¬† utilis√É¬©: {email}")
                    return False

            with get_database_session() as session:
                consultant = Consultant(
                    prenom=data.get("prenom").strip(),
                    nom=data.get("nom").strip(),
                    email=email.lower(),
                    telephone=(
                        data.get("telephone", "").strip()
                        if data.get("telephone")
                        else None
                    ),
                    salaire_actuel=data.get("salaire_actuel") or data.get("salaire"),
                    practice_id=data.get("practice_id"),
                    disponibilite=data.get("disponibilite", True),
                    notes=data.get("notes", "").strip() if data.get("notes") else None,
                    date_creation=datetime.now(),
                    derniere_maj=datetime.now(),
                    # Nouveaux champs V1.2
                    societe=data.get("societe", "Quanteam").strip(),
                    date_entree_societe=data.get("date_entree_societe"),
                    date_sortie_societe=data.get("date_sortie_societe"),
                    date_premiere_mission=data.get("date_premiere_mission"),
                    # Nouveaux champs V1.2.1
                    grade=data.get("grade", "Junior").strip(),
                    type_contrat=data.get("type_contrat", "CDI").strip(),
                )

                session.add(consultant)
                session.commit()
                print(
                    f"√¢¬ú¬Ö Consultant {data.get('prenom')} {data.get('nom')} cr√É¬©√É¬© avec succ√É¬®s"
                )
                return True

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"√¢¬ù¬å Erreur lors de la cr√É¬©ation du consultant: {e}")
            return False

    @staticmethod
    def update_consultant(consultant_id: int, data: dict) -> bool:
        """
        Met √É¬† jour un consultant existant dans la base de donn√É¬©es

        Args:
            consultant_id: ID du consultant √É¬† mettre √É¬† jour
            data: Dictionnaire contenant les champs √É¬† mettre √É¬† jour

        Returns:
            bool: True si la mise √É¬† jour a r√É¬©ussi, False sinon

        Example:
            >>> data = {"salaire": 50000.0, "disponible": False}
            >>> success = ConsultantService.update_consultant(123, data)
            >>> print("Mise √É¬† jour r√É¬©ussie" if success else "√É¬âchec de mise √É¬† jour")
        """
        try:
            with get_database_session() as session:
                consultant = (
                    session.query(Consultant)
                    .filter(Consultant.id == consultant_id)
                    .first()
                )

                if not consultant:
                    print(f"√¢¬ù¬å Consultant avec l'ID {consultant_id} non trouv√É¬©")
                    return False

                # Mapping des attributs pour √É¬©viter les erreurs
                attribute_mapping = {
                    "salaire": "salaire_actuel",
                    "disponibilite": "disponibilite",
                    "date_mise_a_jour": "derniere_maj",
                }

                # Mise √É¬† jour des champs
                for key, value in data.items():
                    # Utiliser le mapping si n√É¬©cessaire
                    attr_name = attribute_mapping.get(key, key)

                    if hasattr(consultant, attr_name):
                        setattr(consultant, attr_name, value)
                    else:
                        print(
                            f"√¢¬ö¬†√Ø¬∏¬è Attribut {attr_name} non trouv√É¬© sur le mod√É¬®le Consultant"
                        )

                consultant.derniere_maj = datetime.now()
                session.commit()
                print(f"√¢¬ú¬Ö Consultant {consultant_id} mis √É¬† jour avec succ√É¬®s")
                return True

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"√¢¬ù¬å Erreur lors de la mise √É¬† jour du consultant: {e}")
            return False

    @staticmethod
    def delete_consultant(consultant_id: int) -> bool:
        """
        Supprime un consultant de la base de donn√É¬©es

        Args:
            consultant_id: ID du consultant √É¬† supprimer

        Returns:
            bool: True si la suppression a r√É¬©ussi, False sinon

        Note:
            Cette op√É¬©ration est irr√É¬©versible et supprime √É¬©galement toutes les
            relations associ√É¬©es (missions, comp√É¬©tences, etc.)

        Example:
            >>> success = ConsultantService.delete_consultant(123)
            >>> print("Suppression r√É¬©ussie" if success else "√É¬âchec de suppression")
        """
        try:
            with get_database_session() as session:
                consultant = (
                    session.query(Consultant)
                    .filter(Consultant.id == consultant_id)
                    .first()
                )

                if not consultant:
                    print(f"√¢¬ù¬å Consultant avec l'ID {consultant_id} non trouv√É¬©")
                    return False

                print(
                    f"√∞¬ü¬î¬Ñ Suppression en cours du consultant {consultant.prenom} {consultant.nom} (ID: {consultant_id})"
                )
                session.delete(consultant)
                session.commit()
                print(f"√¢¬ú¬Ö Consultant {consultant_id} supprim√É¬© avec succ√É¬®s")
                return True

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"√¢¬ù¬å Erreur lors de la suppression du consultant {consultant_id}: {e}")
            print(f"Type d'erreur: {type(e).__name__}")
            import traceback

            traceback.print_exc()
            return False

    @staticmethod
    def search_consultants(search_term: str) -> List[Consultant]:
        """
        Recherche des consultants par nom, pr√É¬©nom ou email

        Args:
            search_term: Terme de recherche (insensible √É¬† la casse)

        Returns:
            Liste d'objets Consultant correspondant √É¬† la recherche

        Example:
            >>> consultants = ConsultantService.search_consultants("dupont")
            >>> print(f"Trouv√É¬© {len(consultants)} consultant(s)")
        """
        try:
            with get_database_session() as session:
                return (
                    session.query(Consultant)
                    .filter(
                        (Consultant.nom.ilike(f"%{search_term}%"))
                        | (Consultant.prenom.ilike(f"%{search_term}%"))
                        | (Consultant.email.ilike(f"%{search_term}%"))
                        | (Consultant.societe.ilike(f"%{search_term}%"))
                    )
                    .all()
                )
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la recherche: {e}")
            return []

    @staticmethod
    def get_available_consultants() -> List[Consultant]:
        """
        Retourne la liste des consultants actuellement disponibles

        Returns:
            Liste d'objets Consultant avec disponibilite=True

        Example:
            >>> disponibles = ConsultantService.get_available_consultants()
            >>> print(f"{len(disponibles)} consultants disponibles pour de nouvelles missions")
        """
        try:
            with get_database_session() as session:
                return session.query(Consultant).filter(Consultant.disponibilite).all()
        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur lors de la r√É¬©cup√É¬©ration des consultants disponibles: {e}")
            return []

    @staticmethod
    def _save_mission_from_analysis(
        session: Session, consultant_id: int, mission_data: Dict
    ) -> bool:
        """
        Sauvegarde une mission extraite de l'analyse CV (m√©thode priv√©e)

        Args:
            session: Session de base de donn√©es active
            consultant_id: ID du consultant propri√©taire de la mission
            mission_data: Dictionnaire contenant les donn√©es de la mission

        Returns:
            bool: True si la mission a √©t√© sauvegard√©e, False sinon
        """
        try:
            client = mission_data.get("client", "").strip()
            if not client:
                return False

            # V√©rifier les doublons avec date de d√©but
            date_debut = ConsultantService._parse_mission_start_date(mission_data)
            if ConsultantService._mission_already_exists(
                session, consultant_id, client, date_debut
            ):
                return False

            # Traiter la date de fin
            date_fin = ConsultantService._parse_mission_end_date(mission_data)

            # Cr√©er et sauvegarder la mission
            mission = ConsultantService._create_mission_object(
                consultant_id, mission_data, client, date_debut, date_fin
            )
            session.add(mission)
            return True

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur sauvegarde mission {mission_data.get('client', 'N/A')}: {e}")
            return False

    @staticmethod
    def _parse_mission_start_date(mission_data: Dict) -> Optional[date]:
        """Parse la date de d√©but d'une mission depuis les donn√©es"""
        date_debut_str = mission_data.get("date_debut", "")
        if not date_debut_str or date_debut_str == ConsultantService.STATUS_IN_PROGRESS:
            return None

        try:
            if len(date_debut_str) == 4:  # Ann√©e seulement
                return date(int(date_debut_str), 1, 1)
            else:
                return datetime.strptime(date_debut_str, "%Y-%m-%d").date()
        except (ValueError, TypeError):
            return None

    @staticmethod
    def _parse_mission_end_date(mission_data: Dict) -> Optional[date]:
        """Parse la date de fin d'une mission depuis les donn√©es"""
        date_fin_str = mission_data.get("date_fin", "")
        if not date_fin_str or date_fin_str == ConsultantService.STATUS_IN_PROGRESS:
            return None

        try:
            if len(date_fin_str) == 4:  # Ann√©e seulement
                return date(int(date_fin_str), 12, 31)
            else:
                return datetime.strptime(date_fin_str, "%Y-%m-%d").date()
        except (ValueError, TypeError):
            return None

    @staticmethod
    def _mission_already_exists(
        session: Session, consultant_id: int, client: str, date_debut: Optional[date]
    ) -> bool:
        """V√©rifie si une mission similaire existe d√©j√†"""
        if not date_debut:
            return False

        existing = (
            session.query(Mission)
            .filter(
                Mission.consultant_id == consultant_id,
                Mission.client == client,
                Mission.date_debut == date_debut,
            )
            .first()
        )

        if existing:
            print(f"Mission {client} {date_debut} d√©j√† existante, ignor√©e")
            return True
        return False

    @staticmethod
    def _create_mission_object(
        consultant_id: int,
        mission_data: Dict,
        client: str,
        date_debut: Optional[date],
        date_fin: Optional[date],
    ) -> Mission:
        """Cr√©e un objet Mission √† partir des donn√©es pars√©es"""
        return Mission(
            consultant_id=consultant_id,
            nom_mission=mission_data.get("resume", f"Mission chez {client}")[:200],
            client=client,
            date_debut=date_debut or date.today(),
            date_fin=date_fin,
            statut="terminee" if date_fin else "en_cours",
            technologies_utilisees=", ".join(
                mission_data.get("langages_techniques", [])
            ),
            description=mission_data.get("resume", ""),
        )

    @staticmethod
    def _save_competence_from_analysis(
        session: Session, consultant_id: int, competence_name: str, type_competence: str
    ) -> bool:
        """
        Sauvegarde une comp√É¬©tence extraite de l'analyse CV (m√É¬©thode priv√É¬©e)

        Args:
            session: Session de base de donn√É¬©es active
            consultant_id: ID du consultant
            competence_name: Nom de la comp√É¬©tence √É¬† sauvegarder
            type_competence: Type de comp√É¬©tence ("technique" ou "fonctionnelle")

        Returns:
            bool: True si la comp√É¬©tence a √É¬©t√É¬© sauvegard√É¬©e, False sinon

        Note:
            Cette m√É¬©thode cr√É¬©e automatiquement la comp√É¬©tence dans le r√É¬©f√É¬©rentiel
            si elle n'existe pas d√É¬©j√É
        """
        try:
            competence_name = competence_name.strip()
            if not competence_name:
                return False

            # Chercher ou cr√É¬©er la comp√É¬©tence
            competence = (
                session.query(Competence)
                .filter(Competence.nom == competence_name)
                .first()
            )

            if not competence:
                # D√É¬©terminer la cat√É¬©gorie automatiquement
                categorie = ConsultantService._determine_skill_category(
                    competence_name, type_competence
                )

                competence = Competence(
                    nom=competence_name,
                    categorie=categorie,
                    type_competence=type_competence,
                )
                session.add(competence)
                session.flush()  # Pour obtenir l'ID

            # V√É¬©rifier si le consultant a d√É¬©j√É¬† cette comp√É¬©tence
            existing_consultant_competence = (
                session.query(ConsultantCompetence)
                .filter(
                    ConsultantCompetence.consultant_id == consultant_id,
                    ConsultantCompetence.competence_id == competence.id,
                )
                .first()
            )

            if not existing_consultant_competence:
                # Ajouter la relation consultant-comp√É¬©tence
                consultant_competence = ConsultantCompetence(
                    consultant_id=consultant_id,
                    competence_id=competence.id,
                    annees_experience=1.0,  # Valeur par d√É¬©faut
                    niveau_maitrise="intermediaire",  # Valeur par d√É¬©faut
                )
                session.add(consultant_competence)
                return True
            else:
                # Comp√É¬©tence d√É¬©j√É¬† existante
                return False

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            print(f"Erreur sauvegarde comp√É¬©tence {competence_name}: {e}")
            return False

    @staticmethod
    def _determine_skill_category(skill_name: str, type_competence: str) -> str:
        """
        D√©termine automatiquement la cat√©gorie d'une comp√©tence (m√©thode priv√©e)

        Args:
            skill_name: Nom de la comp√©tence √† classifier
            type_competence: Type de comp√©tence ("technique" ou "fonctionnelle")

        Returns:
            str: Cat√©gorie de la comp√©tence (ex: "Frontend", "Backend", "Management", etc.)
        """
        skill_lower = skill_name.lower()

        if type_competence == "fonctionnelle":
            return ConsultantService._categorize_functional_skill(skill_lower)
        else:
            return ConsultantService._categorize_technical_skill(skill_lower)

    @staticmethod
    def _categorize_functional_skill(skill_lower: str) -> str:
        """Cat√©gorise une comp√©tence fonctionnelle"""
        if ConsultantService._is_management_skill(skill_lower):
            return "Management"
        elif ConsultantService._is_methodology_skill(skill_lower):
            return "Methodologie"
        elif ConsultantService._is_consulting_skill(skill_lower):
            return "Conseil"
        else:
            return "Fonctionnelle"

    @staticmethod
    def _is_management_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence de management"""
        management_keywords = ["management", "leadership", "gestion", "direction"]
        return any(word in skill_lower for word in management_keywords)

    @staticmethod
    def _is_methodology_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence m√©thodologique"""
        methodology_keywords = ["scrum", "agile", "kanban", "projet"]
        return any(word in skill_lower for word in methodology_keywords)

    @staticmethod
    def _is_consulting_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence de conseil"""
        consulting_keywords = ["formation", "conseil", "accompagnement"]
        return any(word in skill_lower for word in consulting_keywords)

    @staticmethod
    def _categorize_technical_skill(skill_lower: str) -> str:
        """Cat√©gorise une comp√©tence technique"""
        if ConsultantService._is_frontend_skill(skill_lower):
            return "Frontend"
        elif ConsultantService._is_backend_skill(skill_lower):
            return "Backend"
        elif ConsultantService._is_database_skill(skill_lower):
            return "Database"
        elif ConsultantService._is_cloud_skill(skill_lower):
            return "Cloud"
        elif ConsultantService._is_devops_skill(skill_lower):
            return "DevOps"
        else:
            return "Technique"

    @staticmethod
    def _is_frontend_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence frontend"""
        frontend_keywords = [
            "react",
            "angular",
            "vue",
            "javascript",
            "typescript",
            "html",
            "css",
        ]
        return any(keyword in skill_lower for keyword in frontend_keywords)

    @staticmethod
    def _is_backend_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence backend"""
        backend_keywords = [
            "java",
            "python",
            "spring",
            "django",
            "flask",
            "node.js",
            "express",
        ]
        return any(keyword in skill_lower for keyword in backend_keywords)

    @staticmethod
    def _is_database_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence base de donn√©es"""
        database_keywords = ["sql", "mysql", "postgresql", "mongodb", "oracle", "redis"]
        return any(keyword in skill_lower for keyword in database_keywords)

    @staticmethod
    def _is_cloud_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence cloud"""
        cloud_keywords = ["aws", "azure", "gcp", "docker", "kubernetes", "cloud"]
        return any(keyword in skill_lower for keyword in cloud_keywords)

    @staticmethod
    def _is_devops_skill(skill_lower: str) -> bool:
        """V√©rifie si c'est une comp√©tence DevOps"""
        devops_keywords = [
            "jenkins",
            "gitlab",
            "github",
            "ci/cd",
            "terraform",
            "ansible",
        ]
        return any(keyword in skill_lower for keyword in devops_keywords)

    @staticmethod
    def save_cv_analysis(consultant_id: int, analysis_data: Dict[str, Any]) -> bool:
        """
        Sauvegarde les r√©sultats d'analyse de CV dans le profil du consultant

        Args:
            consultant_id: ID du consultant
            analysis_data: Dictionnaire contenant les donn√©es d'analyse

        Returns:
            bool: True si succ√®s, False sinon
        """
        try:
            with get_database_session() as session:
                consultant = ConsultantService._get_consultant_for_cv_analysis(
                    session, consultant_id
                )
                if not consultant:
                    return False

                st.info(
                    f"üíæ Sauvegarde de l'analyse CV pour {consultant.prenom} {consultant.nom}"
                )

                # Sauvegarder les diff√©rentes parties de l'analyse
                missions_count = ConsultantService._save_cv_missions(
                    session, consultant_id, analysis_data
                )
                skills_count = ConsultantService._save_cv_skills(
                    session, consultant_id, analysis_data
                )

                # Finaliser la sauvegarde
                ConsultantService._finalize_cv_analysis_save(
                    session, consultant, missions_count, skills_count
                )

                return True

        except (SQLAlchemyError, ValueError, TypeError, AttributeError) as e:
            st.error("‚ùå Erreur lors de la sauvegarde de l'analyse CV: " + str(e))
            print(f"Erreur d√©taill√©e: {e}")
            import traceback

            traceback.print_exc()
            return False

    @staticmethod
    def _get_consultant_for_cv_analysis(session: Session, consultant_id: int):
        """R√©cup√®re le consultant pour l'analyse CV"""
        consultant = (
            session.query(Consultant).filter(Consultant.id == consultant_id).first()
        )
        if not consultant:
            st.error(f"‚ùå Consultant avec ID {consultant_id} introuvable")
        return consultant

    @staticmethod
    def _save_cv_missions(
        session: Session, consultant_id: int, analysis_data: Dict
    ) -> int:
        """Sauvegarde les missions extraites du CV"""
        missions = analysis_data.get("missions", [])
        missions_count = 0

        for mission_data in missions:
            if ConsultantService._should_save_mission(
                mission_data
            ) and ConsultantService._save_single_cv_mission(
                session, consultant_id, mission_data
            ):
                missions_count += 1

        return missions_count

    @staticmethod
    def _should_save_mission(mission_data: Dict) -> bool:
        """V√©rifie si une mission doit √™tre sauvegard√©e"""
        if not mission_data.get("client"):
            return False

        if not mission_data.get("date_debut") or mission_data.get("date_debut") == "":
            st.warning(f"‚ö†Ô∏è Mission {mission_data['client']} ignor√©e - dates manquantes")
            return False

        return True

    @staticmethod
    def _save_single_cv_mission(
        session: Session, consultant_id: int, mission_data: Dict
    ) -> bool:
        """Sauvegarde une mission individuelle du CV"""
        # V√©rifier les doublons
        if ConsultantService._mission_exists_for_cv(
            session, consultant_id, mission_data
        ):
            return False

        # Convertir et valider les dates
        date_debut, date_fin = ConsultantService._parse_cv_mission_dates(mission_data)
        if not date_debut:
            return False

        # Cr√©er et sauvegarder la mission
        new_mission = ConsultantService._create_cv_mission_object(
            consultant_id, mission_data, date_debut, date_fin
        )
        session.add(new_mission)
        st.success("‚úÖ Mission ajout√©e: " + mission_data["client"])
        return True

    @staticmethod
    def _mission_exists_for_cv(
        session: Session, consultant_id: int, mission_data: Dict
    ) -> bool:
        """V√©rifie si une mission CV existe d√©j√†"""
        existing_mission = (
            session.query(Mission)
            .filter(
                Mission.consultant_id == consultant_id,
                Mission.client == mission_data["client"],
                Mission.date_debut == mission_data.get("date_debut", ""),
            )
            .first()
        )
        return existing_mission is not None

    @staticmethod
    def _parse_cv_mission_dates(mission_data: Dict):
        """Parse les dates d'une mission CV"""
        date_debut = mission_data.get("date_debut")
        date_fin = mission_data.get("date_fin")

        try:
            if date_debut and date_debut != ConsultantService.STATUS_IN_PROGRESS:
                if len(date_debut) >= 10:  # Format YYYY-MM-DD
                    date_debut = datetime.strptime(date_debut[:10], "%Y-%m-%d").date()
                else:
                    return None, None  # Format invalide
            else:
                return None, None  # Pas de date de d√©but

            if date_fin and date_fin != ConsultantService.STATUS_IN_PROGRESS:
                if len(date_fin) >= 10:  # Format YYYY-MM-DD
                    date_fin = datetime.strptime(date_fin[:10], "%Y-%m-%d").date()
                else:
                    date_fin = None
            else:
                date_fin = None

        except ValueError:
            st.warning(
                f"‚ö†Ô∏è Mission {mission_data['client']} ignor√©e - format de date invalide"
            )
            return None, None

        return date_debut, date_fin

    @staticmethod
    def _create_cv_mission_object(
        consultant_id: int, mission_data: Dict, date_debut, date_fin
    ) -> Mission:
        """Cr√©e un objet Mission depuis les donn√©es CV"""
        return Mission(
            consultant_id=consultant_id,
            nom_mission=f"Mission chez {mission_data['client']}",
            client=mission_data["client"],
            role=mission_data.get("role", ""),
            description=mission_data.get("resume", ""),
            date_debut=date_debut,
            date_fin=date_fin,
            statut="en_cours" if date_fin is None else "terminee",
            technologies_utilisees=", ".join(
                mission_data.get("langages_techniques", [])
            ),
            revenus_generes=0,  # √Ä compl√©ter manuellement
        )

    @staticmethod
    def _save_cv_skills(
        session: Session, consultant_id: int, analysis_data: Dict
    ) -> int:
        """Sauvegarde les comp√©tences extraites du CV"""
        skills_count = 0

        # Comp√©tences techniques
        technical_skills = analysis_data.get("langages_techniques", [])
        skills_count += ConsultantService._save_skills_by_type(
            session, consultant_id, technical_skills, "technique"
        )

        # Comp√©tences fonctionnelles
        functional_skills = analysis_data.get("competences_fonctionnelles", [])
        skills_count += ConsultantService._save_skills_by_type(
            session, consultant_id, functional_skills, "fonctionnelle"
        )

        return skills_count

    @staticmethod
    def _save_skills_by_type(
        session: Session, consultant_id: int, skills: list, skill_type: str
    ) -> int:
        """Sauvegarde un ensemble de comp√©tences d'un type donn√©"""
        count = 0

        for skill_name in skills:
            if ConsultantService._should_save_skill(
                skill_name
            ) and ConsultantService._save_single_cv_skill(
                session, consultant_id, skill_name.strip(), skill_type
            ):
                count += 1

        return count

    @staticmethod
    def _should_save_skill(skill_name: str) -> bool:
        """V√©rifie si une comp√©tence doit √™tre sauvegard√©e"""
        return skill_name and len(skill_name.strip()) >= 2

    @staticmethod
    def _save_single_cv_skill(
        session: Session, consultant_id: int, skill_name: str, skill_type: str
    ) -> bool:
        """Sauvegarde une comp√©tence individuelle du CV"""
        # R√©cup√©rer ou cr√©er la comp√©tence dans le r√©f√©rentiel
        competence = ConsultantService._get_or_create_competence(
            session, skill_name, skill_type
        )

        # V√©rifier si le consultant a d√©j√† cette comp√©tence
        if ConsultantService._consultant_has_skill(
            session, consultant_id, competence.id
        ):
            return False

        # Ajouter la comp√©tence au consultant
        ConsultantService._add_skill_to_consultant(
            session, consultant_id, competence.id
        )
        st.success(f"‚úÖ Comp√©tence {skill_type} ajout√©e: {skill_name}")
        return True

    @staticmethod
    def _get_or_create_competence(session: Session, skill_name: str, skill_type: str):
        """R√©cup√®re ou cr√©e une comp√©tence dans le r√©f√©rentiel"""
        competence = (
            session.query(Competence)
            .filter(Competence.nom.ilike(f"%{skill_name}%"))
            .first()
        )

        if not competence:
            competence = Competence(
                nom=skill_name,
                type_competence=skill_type,
                categorie=ConsultantService._determine_skill_category(
                    skill_name, skill_type
                ),
                description=f"Comp√©tence {skill_type} extraite automatiquement du CV",
            )
            session.add(competence)
            session.flush()  # Pour obtenir l'ID

        return competence

    @staticmethod
    def _consultant_has_skill(
        session: Session, consultant_id: int, competence_id: int
    ) -> bool:
        """V√©rifie si le consultant a d√©j√† cette comp√©tence"""
        existing_skill = (
            session.query(ConsultantCompetence)
            .filter(
                ConsultantCompetence.consultant_id == consultant_id,
                ConsultantCompetence.competence_id == competence_id,
            )
            .first()
        )
        return existing_skill is not None

    @staticmethod
    def _add_skill_to_consultant(
        session: Session, consultant_id: int, competence_id: int
    ):
        """Ajoute une comp√©tence au consultant"""
        consultant_skill = ConsultantCompetence(
            consultant_id=consultant_id,
            competence_id=competence_id,
            niveau_maitrise="intermediaire",  # Par d√©faut
            annees_experience=2.0,  # Estimation par d√©faut
        )
        session.add(consultant_skill)

    @staticmethod
    def _finalize_cv_analysis_save(
        session: Session, consultant, missions_count: int, skills_count: int
    ):
        """Finalise la sauvegarde de l'analyse CV"""
        # Mettre √† jour la date de derni√®re modification
        consultant.derniere_maj = datetime.now()

        # Committer toutes les modifications
        session.commit()

        st.success("üéâ Analyse CV sauvegard√©e avec succ√®s !")
        st.info(
            f"üìä **R√©sum√©**: {missions_count} missions ajout√©es, {skills_count} comp√©tences ajout√©es"
        )
