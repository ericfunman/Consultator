"""
Page de gestion des consultants
CRUD complet pour les consultants avec formulaires, tableaux et gestion de documents
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import sys
import os

# Import des mod√®les et services
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from services.consultant_service import ConsultantService
from services.document_analyzer import DocumentAnalyzer
from services.technology_service import TechnologyService
from components.technology_widget import technology_multiselect
from database.database import get_database_session
from database.models import Mission, ConsultantCompetence, Competence

def show():
    """Affiche la page de gestion des consultants"""
    
    st.title("üë• Gestion des consultants")
    st.markdown("### G√©rez les profils de vos consultants")
    
    # V√©rifier si on doit afficher le profil d'un consultant sp√©cifique
    if 'view_consultant_profile' in st.session_state:
        show_consultant_profile()
        return
    
    # Onglets pour organiser les fonctionnalit√©s
    tab1, tab2 = st.tabs(["üìã Liste des consultants", "‚ûï Ajouter un consultant"])
    
    with tab1:
        show_consultants_list()
    
    with tab2:
        show_add_consultant_form()

def show_consultant_profile():
    """Affiche le profil d√©taill√© d'un consultant"""
    
    consultant_id = st.session_state.view_consultant_profile
    consultant = ConsultantService.get_consultant_by_id(consultant_id)
    
    if not consultant:
        st.error("‚ùå Consultant introuvable")
        del st.session_state.view_consultant_profile
        st.rerun()
        return
    
    # En-t√™te avec bouton retour
    col1, col2 = st.columns([6, 1])
    
    with col1:
        st.title(f"üë§ Profil de {consultant.prenom} {consultant.nom}")
    
    with col2:
        if st.button("‚Üê Retour", key="back_to_list"):
            del st.session_state.view_consultant_profile
            st.rerun()
    
    st.markdown("---")
    
    # Informations principales
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üí∞ Salaire annuel", f"{consultant.salaire_actuel or 0:,}‚Ç¨", delta=None)
        
    with col2:
        status = "Disponible" if consultant.disponibilite else "En mission"
        st.metric("üìä Statut", status)
        
    with col3:
        creation_date = consultant.date_creation.strftime("%d/%m/%Y") if consultant.date_creation else "N/A"
        st.metric("üìÖ Membre depuis", creation_date)
    
    st.markdown("---")
    
    # D√©tails du profil
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìã Informations", "üíº Comp√©tences", "üöÄ Missions", "üìÑ Documents", "‚öôÔ∏è Actions"])
    
    with tab1:
        show_consultant_info(consultant)
    
    with tab2:
        show_consultant_skills(consultant)
    
    with tab3:
        show_consultant_missions(consultant)
    
    with tab4:
        show_consultant_documents(consultant)
    
    with tab5:
        show_consultant_actions(consultant)

def show_consultant_skills(consultant):
    """Affiche les comp√©tences technologiques du consultant"""
    
    st.subheader("üíº Comp√©tences technologiques")
    
    # R√©cup√©rer les technologies des missions du consultant
    technologies_missions = get_consultant_technologies_from_missions(consultant.id)
    
    # R√©cup√©rer les comp√©tences manuelles (si elles existent)
    competences_manuelles = get_consultant_manual_skills(consultant.id)
    
    # Combiner toutes les technologies
    all_technologies = set()
    
    # Technologies des missions
    for tech in technologies_missions:
        all_technologies.add(tech)
    
    # Comp√©tences ajout√©es manuellement
    for comp in competences_manuelles:
        all_technologies.add(comp)
    
    # Onglets pour organiser les fonctionnalit√©s
    tab1, tab2 = st.tabs(["üìã Comp√©tences actuelles", "‚ûï Ajouter des comp√©tences"])
    
    with tab1:
        if all_technologies:
            # R√©cup√©rer le r√©f√©rentiel de technologies pour v√©rifier si elles sont connues
            try:
                referentiel_technologies = TechnologyService.get_all_technologies()
                known_tech_names = {tech.nom.lower() for tech in referentiel_technologies}
            except:
                known_tech_names = set()
            
            # Affichage des comp√©tences sous forme de badges
            st.write("**üè∑Ô∏è Technologies ma√Ætris√©es**")
            
            # L√©gende des couleurs
            col_leg1, col_leg2 = st.columns(2)
            with col_leg1:
                st.markdown("‚úÖ **Vert** : Technologie du r√©f√©rentiel")
            with col_leg2:
                st.markdown("‚ùì **Jaune** : Technologie non r√©f√©renc√©e")
            
            st.markdown("---")
            
            # Organiser en colonnes
            cols = st.columns(4)
            technologies_list = sorted(list(all_technologies))
            
            for i, tech in enumerate(technologies_list):
                with cols[i % 4]:
                    # V√©rifier si la technologie vient des missions
                    source = "üöÄ Mission" if tech in technologies_missions else "‚úã Manuel"
                    
                    # V√©rifier si la technologie est dans le r√©f√©rentiel
                    is_known = tech.lower() in known_tech_names
                    
                    # Couleur selon si la technologie est connue ou non
                    if is_known:
                        bg_color = "#e8f5e8"  # Vert clair pour les technologies connues
                        border_color = "#28a745"
                        text_color = "#155724"
                    else:
                        bg_color = "#fff3cd"  # Jaune clair pour les technologies inconnues
                        border_color = "#ffc107"
                        text_color = "#856404"
                    
                    status_icon = "‚úÖ" if is_known else "‚ùì"
                    
                    st.markdown(f"""
                    <div style="padding: 8px; margin: 3px; border: 2px solid {border_color}; border-radius: 5px; text-align: center; background-color: {bg_color}; color: {text_color};">
                        {status_icon} <strong>{tech}</strong><br>
                        <small style="color: {text_color};">{source}</small>
                    </div>
                    """, unsafe_allow_html=True)
            
            st.markdown("---")
            
            # M√©triques des comp√©tences
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üõ†Ô∏è Total technologies", len(all_technologies))
            
            with col2:
                st.metric("üöÄ Depuis missions", len(technologies_missions))
            
            with col3:
                st.metric("‚úã Ajout√©es manuellement", len(competences_manuelles))
        
        else:
            st.info("üîç Aucune comp√©tence technologique trouv√©e")
            st.markdown("üí° Les comp√©tences peuvent provenir de:")
            st.markdown("- üöÄ **Missions** : Technologies utilis√©es dans les missions")
            st.markdown("- ‚úã **Ajout manuel** : Utilisez l'onglet 'Ajouter des comp√©tences'")
    
    with tab2:
        st.markdown("### ‚ûï Ajouter des comp√©tences manuellement")
        
        # Widget de s√©lection des technologies avec le r√©f√©rentiel
        try:
            nouvelles_technologies = technology_multiselect(
                label="üõ†Ô∏è S√©lectionnez des technologies",
                key=f"add_skills_{consultant.id}",
                current_technologies="",
                help_text="Choisissez les technologies que ma√Ætrise ce consultant"
            )
            
            if st.button("‚ûï Ajouter les comp√©tences s√©lectionn√©es", type="primary"):
                if nouvelles_technologies:
                    # Convertir la cha√Æne en liste
                    techs_to_add = [tech.strip() for tech in nouvelles_technologies.split(',') if tech.strip()]
                    
                    # Ajouter chaque technologie
                    added_count = 0
                    for tech in techs_to_add:
                        if tech not in all_technologies:  # √âviter les doublons
                            add_manual_skill(consultant.id, tech)
                            added_count += 1
                    
                    if added_count > 0:
                        st.success(f"‚úÖ {added_count} comp√©tence(s) ajout√©e(s) avec succ√®s !")
                        st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è Toutes les technologies s√©lectionn√©es sont d√©j√† pr√©sentes")
                else:
                    st.error("‚ùå Veuillez s√©lectionner au moins une technologie")
        except Exception as e:
            st.error(f"Erreur avec le widget de technologies: {e}")
            st.info("Fonctionnalit√© d'ajout de comp√©tences temporairement indisponible")

def get_consultant_technologies_from_missions(consultant_id):
    """R√©cup√®re toutes les technologies utilis√©es dans les missions du consultant"""
    technologies = set()
    
    try:
        with get_database_session() as session:
            missions = session.query(Mission).filter(Mission.consultant_id == consultant_id).all()
            
            for mission in missions:
                if mission.technologies_utilisees and mission.technologies_utilisees.strip():
                    # Diviser les technologies et les nettoyer
                    mission_techs = [tech.strip() for tech in mission.technologies_utilisees.split(',') if tech.strip()]
                    technologies.update(mission_techs)
                    
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©cup√©ration des technologies: {e}")
    
    return list(technologies)

def get_consultant_manual_skills(consultant_id):
    """R√©cup√®re les comp√©tences ajout√©es manuellement pour le consultant"""
    key = f"manual_skills_{consultant_id}"
    return st.session_state.get(key, [])

def add_manual_skill(consultant_id, technology):
    """Ajoute une comp√©tence manuelle pour le consultant"""
    key = f"manual_skills_{consultant_id}"
    current_skills = st.session_state.get(key, [])
    
    if technology not in current_skills:
        current_skills.append(technology)
        st.session_state[key] = current_skills

def remove_manual_skill(consultant_id, technology):
    """Supprime une comp√©tence manuelle pour le consultant"""
    key = f"manual_skills_{consultant_id}"
    current_skills = st.session_state.get(key, [])
    
    if technology in current_skills:
        current_skills.remove(technology)
        st.session_state[key] = current_skills

def show_consultant_info(consultant):
    """Affiche les informations de base du consultant"""
    st.subheader("üìã Informations personnelles")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**üë§ Pr√©nom**: {consultant.prenom}")
        st.write(f"**üìß Email**: {consultant.email}")
        st.write(f"**üí∞ Salaire**: {consultant.salaire_actuel or 0:,}‚Ç¨")
    
    with col2:
        st.write(f"**üë§ Nom**: {consultant.nom}")
        st.write(f"**üìû T√©l√©phone**: {consultant.telephone or 'N/A'}")
        st.write(f"**‚úÖ Disponible**: {'Oui' if consultant.disponibilite else 'Non'}")

def show_consultant_missions(consultant):
    """Affiche les missions du consultant"""
    st.subheader("üöÄ Missions")
    
    try:
        with get_database_session() as session:
            missions = session.query(Mission).filter(Mission.consultant_id == consultant.id).all()
            
        if missions:
            for mission in missions:
                with st.expander(f"üöÄ {mission.client} - {mission.role or 'R√¥le non d√©fini'}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**üè¢ Client**: {mission.client}")
                        st.write(f"**üë§ R√¥le**: {mission.role or 'Non sp√©cifi√©'}")
                        st.write(f"**üí∞ Revenus**: {mission.revenus_generes or 0:,}‚Ç¨")
                    
                    with col2:
                        st.write(f"**üìÖ D√©but**: {mission.date_debut.strftime('%Y-%m-%d') if mission.date_debut else 'N/A'}")
                        st.write(f"**üìÖ Fin**: {mission.date_fin.strftime('%Y-%m-%d') if mission.date_fin else 'En cours'}")
                        st.write(f"**üìä Statut**: {mission.statut}")
                    
                    st.write(f"**üõ†Ô∏è Technologies**: {mission.technologies_utilisees or 'Non sp√©cifi√©es'}")
        else:
            st.info("üìù Aucune mission enregistr√©e")
            
    except Exception as e:
        st.error(f"‚ùå Erreur: {e}")

def show_consultant_documents(consultant):
    """Affiche les documents du consultant"""
    st.subheader("üìÑ Documents")
    st.info("Fonctionnalit√© de gestion des documents √† venir")

def show_consultant_actions(consultant):
    """Affiche les actions possibles"""
    st.subheader("‚öôÔ∏è Actions")
    st.info("Actions suppl√©mentaires √† venir")

def show_consultants_list():
    """Affiche la liste des consultants"""
    
    st.subheader("üìã Liste des consultants")
    
    try:
        consultants = ConsultantService.get_all_consultants()
        
        if consultants:
            # Pr√©parer les donn√©es pour le tableau
            consultants_data = []
            for consultant in consultants:
                # Compter les missions
                try:
                    with get_database_session() as session:
                        nb_missions = session.query(Mission).filter(Mission.consultant_id == consultant.id).count()
                except:
                    nb_missions = 0
                
                consultants_data.append({
                    "ID": consultant.id,
                    "Pr√©nom": consultant.prenom,
                    "Nom": consultant.nom,
                    "Email": consultant.email,
                    "Salaire": f"{consultant.salaire_actuel or 0:,}‚Ç¨",
                    "Statut": "‚úÖ Disponible" if consultant.disponibilite else "üî¥ Occup√©",
                    "Missions": nb_missions
                })
            
            # Afficher le tableau
            df = pd.DataFrame(consultants_data)
            
            # Configuration du tableau avec s√©lection
            event = st.dataframe(
                df,
                use_container_width=True,
                hide_index=True,
                on_select="rerun",
                selection_mode="single-row"
            )
            
            # Gestion de la s√©lection
            if event.selection.rows:
                selected_row = event.selection.rows[0]
                selected_consultant_id = consultants_data[selected_row]["ID"]
                
                # Boutons d'action pour le consultant s√©lectionn√©
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üëÅÔ∏è Voir le profil", type="primary", use_container_width=True):
                        st.session_state.view_consultant_profile = selected_consultant_id
                        st.rerun()
                
                with col2:
                    if st.button("‚úèÔ∏è Modifier", use_container_width=True):
                        st.session_state.view_consultant_profile = selected_consultant_id
                        st.rerun()
            
            # M√©triques g√©n√©rales
            st.markdown("---")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üë• Total consultants", len(consultants))
            
            with col2:
                disponibles = len([c for c in consultants if c.disponibilite])
                st.metric("‚úÖ Disponibles", disponibles)
            
            with col3:
                salaire_moyen = sum(c.salaire_actuel or 0 for c in consultants) / len(consultants) if consultants else 0
                st.metric("üí∞ Salaire moyen", f"{salaire_moyen:,.0f}‚Ç¨")
        else:
            st.info("üìù Aucun consultant enregistr√©")
    
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement: {e}")

def show_add_consultant_form():
    """Affiche le formulaire d'ajout d'un nouveau consultant"""
    
    st.subheader("‚ûï Ajouter un nouveau consultant")
    
    with st.form("add_consultant_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            prenom = st.text_input("üë§ Pr√©nom *", placeholder="Ex: Jean")
            email = st.text_input("üìß Email *", placeholder="jean.dupont@example.com")
            salaire = st.number_input("üí∞ Salaire annuel (‚Ç¨)", min_value=0, value=45000, step=1000)
        
        with col2:
            nom = st.text_input("üë§ Nom *", placeholder="Ex: Dupont")
            telephone = st.text_input("üìû T√©l√©phone", placeholder="01.23.45.67.89")
            disponibilite = st.checkbox("‚úÖ Disponible", value=True)
        
        submitted = st.form_submit_button("‚ûï Cr√©er le consultant", type="primary")
        
        if submitted:
            if not prenom or not nom or not email:
                st.error("‚ùå Veuillez remplir tous les champs obligatoires (*)")
            else:
                try:
                    consultant_data = {
                        'prenom': prenom.strip(),
                        'nom': nom.strip(),
                        'email': email.strip().lower(),
                        'telephone': telephone.strip() if telephone else None,
                        'salaire_actuel': salaire,
                        'disponibilite': disponibilite
                    }
                    
                    nouveau_consultant = ConsultantService.create_consultant(consultant_data)
                    st.success(f"‚úÖ {prenom} {nom} a √©t√© cr√©√© avec succ√®s !")
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la cr√©ation: {e}")
