"""
Module de gestion des documents du consultant
Fonctions pour afficher, uploader et analyser les documents
"""

import json
import os
import sys
from datetime import datetime
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

import pandas as pd
import streamlit as st

# Constantes pour √©viter la duplication
ERROR_DOCUMENT_NOT_FOUND = "‚ùå Document introuvable"

# Ajouter les chemins n√©cessaires
current_dir = os.path.dirname(__file__)
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

# Variables pour les imports
ConsultantService = None
get_database_session = None
Consultant = None
imports_ok = False

try:
    from database.database import get_database_session
    from database.models import Consultant
    from database.models import Document
    from services.ai_openai_service import OpenAIChatGPTService
    from services.ai_openai_service import get_grok_service
    from services.ai_openai_service import is_grok_available
    from services.consultant_service import ConsultantService
    from services.document_analyzer import DocumentAnalyzer

    imports_ok = True
except ImportError:
    # Imports √©chou√©s, on continue quand m√™me
    pass


def show_consultant_documents(consultant):
    """Affiche les documents du consultant"""

    if not imports_ok:
        st.error("‚ùå Les services de base ne sont pas disponibles")
        return

    if not consultant:
        st.error("‚ùå Consultant non fourni")
        return

    st.markdown("### üìÅ Documents")

    try:
        # R√©cup√©rer les documents du consultant
        with get_database_session() as session:
            documents = (
                session.query(Document)
                .filter(Document.consultant_id == consultant.id)
                .order_by(Document.date_upload.desc())
                .all()
            )

        # Statistiques des documents
        show_documents_statistics(documents)

        # Liste des documents
        if documents:
            st.markdown("#### üìã Documents disponibles")

            for doc in documents:
                with st.expander(f"üìÑ {doc.nom_fichier} - {doc.type_document}"):
                    show_document_details(doc, consultant)
        else:
            st.info("‚ÑπÔ∏è Aucun document trouv√© pour ce consultant")

        # Actions g√©n√©rales
        st.markdown("#### üéØ Actions g√©n√©rales")

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üì§ Uploader un document", key=f"upload_doc_{consultant.id}"):
                st.session_state.upload_document = consultant.id
                st.rerun()

        with col2:
            if st.button("üîç Analyser CV", key=f"analyze_cv_{consultant.id}"):
                analyze_consultant_cv(consultant)

        with col3:
            if st.button("üìä Rapport documents", key=f"doc_report_{consultant.id}"):
                show_documents_report(documents)

        # Formulaire d'upload (si activ√©)
        if (
            "upload_document" in st.session_state
            and st.session_state.upload_document == consultant.id
        ):
            show_upload_document_form(consultant.id)

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'affichage des documents: {e}")
        st.code(str(e))


def show_document_details(document, consultant):
    """Affiche les d√©tails d'un document"""

    col1, col2 = st.columns(2)

    with col1:
        _display_document_basic_info(document)

    with col2:
        _display_document_metadata(document)

    # Contenu de l'analyse CV si disponible
    _display_cv_analysis_summary(document, consultant)

    # Actions sur le document
    _display_document_actions(document, consultant)

    # Formulaire de renommage (si activ√©)
    _handle_rename_form(document)


def show_documents_statistics(documents):
    """Affiche les statistiques des documents"""

    if not documents:
        return

    st.markdown("#### üìä Statistiques")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_docs = len(documents)
        st.metric("Total documents", total_docs)

    with col2:
        # Types de documents
        types = {}
        for doc in documents:
            doc_type = doc.type_document or "Autre"
            types[doc_type] = types.get(doc_type, 0) + 1

        most_common_type = (
            max(types.items(), key=lambda x: x[1]) if types else ("N/A", 0)
        )
        st.metric("Type principal", most_common_type[0])

    with col3:
        # Documents avec analyse CV
        analyzed_docs = sum(1 for doc in documents if doc.analyse_cv)
        st.metric("Analys√©s CV", analyzed_docs)

    with col4:
        # Taille totale
        total_size = sum(doc.taille_fichier or 0 for doc in documents)
        total_size_mb = total_size / (1024 * 1024)
        st.metric("Taille totale", f"{total_size_mb:.1f} MB")


def show_upload_document_form(consultant_id: int):
    """Affiche le formulaire d'upload de document"""

    st.markdown("### üì§ Uploader un document")

    with st.form(f"upload_document_form_{consultant_id}", clear_on_submit=True):
        st.markdown("#### üìÑ Informations du document")

        # Types de documents disponibles
        document_types = [
            "CV",
            "Lettre de motivation",
            "Dipl√¥me",
            "Certification",
            "Contrat",
            "√âvaluation",
            "Autre",
        ]

        type_document = st.selectbox(
            "Type de document *",
            options=document_types,
            help="S√©lectionnez le type de document",
        )

        description = st.text_area(
            "Description", height=80, help="Description optionnelle du document"
        )

        st.markdown("#### üìé Fichier √† uploader")

        uploaded_file = st.file_uploader(
            "S√©lectionnez un fichier",
            type=["pdf", "doc", "docx", "txt", "rtf"],
            help="Formats accept√©s: PDF, DOC, DOCX, TXT, RTF",
        )

        # Boutons
        col1, col2, _ = st.columns([1, 1, 2])

        with col1:
            submitted = st.form_submit_button("üì§ Uploader", type="primary")

        with col2:
            cancel = st.form_submit_button("‚ùå Annuler")

        if submitted:
            if not uploaded_file:
                st.error("‚ùå Veuillez s√©lectionner un fichier")
            else:
                success = upload_document(
                    consultant_id,
                    {
                        "file": uploaded_file,
                        "type_document": type_document,
                        "description": description,
                    },
                )

                if success:
                    st.success("‚úÖ Document upload√© avec succ√®s !")
                    if "upload_document" in st.session_state:
                        del st.session_state.upload_document
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de l'upload du document")

        if cancel:
            if "upload_document" in st.session_state:
                del st.session_state.upload_document
            st.rerun()


def perform_cv_analysis(cv_document, consultant, method: str) -> bool:
    """Effectue l'analyse du CV selon la m√©thode choisie"""

    try:
        # Extraire le texte du document
        if not os.path.exists(cv_document.chemin_fichier):
            st.error("‚ùå Fichier CV introuvable")
            return False

        extracted_text = DocumentAnalyzer.extract_text_from_file(
            cv_document.chemin_fichier
        )
        if not extracted_text:
            st.error("‚ùå Impossible d'extraire le texte du CV")
            return False

        # Choisir la m√©thode d'analyse
        if "Grok" in method:
            # Analyse avec OpenAI GPT-4
            grok_service = get_grok_service()
            if not grok_service:
                st.error("‚ùå Service OpenAI non disponible")
                return False

            analysis_result = grok_service.analyze_cv(extracted_text)

            # Ajouter des m√©tadonn√©es
            analysis_result["_analysis_method"] = "openai_gpt4"
            analysis_result["_cost_estimate"] = grok_service.get_cost_estimate(
                len(extracted_text)
            )

        else:
            # Analyse classique
            analysis_result = DocumentAnalyzer.analyze_cv_content(
                extracted_text, f"{consultant.prenom} {consultant.nom}"
            )
            analysis_result["_analysis_method"] = "classic"

        # Sauvegarder l'analyse en base
        with get_database_session() as session:
            cv_document.analyse_cv = json.dumps(analysis_result, ensure_ascii=False)
            session.commit()

        return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse: {e}")
        return False


def analyze_consultant_cv(consultant):
    """Analyse le CV du consultant avec choix de m√©thode"""
    st.markdown("### üîç Analyse du CV")

    try:
        with get_database_session() as session:
            cv_document = _find_latest_cv(session, consultant.id)
            if not cv_document:
                st.warning("‚ö†Ô∏è Aucun CV trouv√© pour ce consultant")
                return

            grok_available = is_grok_available()
            selected_method = _display_analysis_method_selection(grok_available)

            _display_current_analysis_status(cv_document, consultant)
            _handle_analysis_button(cv_document, consultant, selected_method)
            _display_ai_configuration(grok_available)

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse du CV: {e}")


def _find_latest_cv(session, consultant_id):
    """Trouve le CV le plus r√©cent du consultant"""
    return (
        session.query(Document)
        .filter(
            Document.consultant_id == consultant_id,
            Document.type_document == "CV",
        )
        .order_by(Document.date_upload.desc())
        .first()
    )


def _display_analysis_method_selection(grok_available):
    """Affiche le s√©lecteur de m√©thode d'analyse"""
    st.markdown("#### üéØ M√©thode d'analyse")

    if grok_available:
        analysis_methods = ["ü§ñ IA avec GPT-4 (recommand√©)"]
        default_index = 0
    else:
        analysis_methods = ["üîç Analyse classique"]
        default_index = 0

    return st.selectbox(
        "Choisissez la m√©thode d'analyse :",
        options=analysis_methods,
        index=default_index,
        help="OpenAI GPT-4 offre une analyse plus pr√©cise et d√©taill√©e",
    )


def _display_current_analysis_status(cv_document, consultant):
    """Affiche le statut de l'analyse actuelle"""
    if cv_document.analyse_cv:
        st.info("‚ÑπÔ∏è Une analyse existe d√©j√†. Vous pouvez la r√©g√©n√©rer.")

        if st.button("üëÅÔ∏è Voir analyse actuelle", key="view_current_analysis"):
            try:
                import json

                analysis = json.loads(cv_document.analyse_cv)
                show_full_cv_analysis(analysis, cv_document.nom_fichier, consultant)
            except Exception as e:
                st.error(f"‚ùå Erreur lors de l'affichage: {e}")
    else:
        st.info("‚ÑπÔ∏è Aucune analyse disponible. Lancez une nouvelle analyse.")


def _handle_analysis_button(cv_document, consultant, selected_method):
    """G√®re le bouton d'analyse et l'ex√©cution"""
    button_text = (
        "üöÄ Analyser avec GPT-4"
        if "Grok" in selected_method
        else "üîç Analyser classiquement"
    )

    if st.button(button_text, type="primary", key="start_analysis"):
        with st.spinner("Analyse en cours..."):
            success = perform_cv_analysis(cv_document, consultant, selected_method)

        if success:
            st.success("‚úÖ Analyse termin√©e avec succ√®s !")
            st.rerun()
        else:
            st.error("‚ùå √âchec de l'analyse")


def _display_ai_configuration(grok_available):
    """Affiche la configuration IA"""
    if grok_available:
        with st.expander("‚öôÔ∏è Configuration IA"):
            from services.ai_grok_service import show_grok_config_interface

            show_grok_config_interface()
    else:
        with st.expander("‚öôÔ∏è Configuration IA"):
            st.warning("‚ö†Ô∏è OpenAI GPT-4 non configur√©")
            st.markdown(
                """
            Pour activer l'analyse IA :

            1. **Obtenez une cl√© API** sur [platform.openai.com](https://platform.openai.com)
            2. **Ajoutez la variable d'environnement** :
               ```bash
               export OPENAI_API_KEY="votre_cl√©_api_ici"
               ```
            3. **Red√©marrez l'application**
            """
            )


def upload_document(consultant_id: int, data: Dict[str, Any]) -> bool:
    """Upload un document pour le consultant"""

    try:
        uploaded_file = data["file"]

        # Cr√©er le r√©pertoire d'upload s'il n'existe pas
        upload_dir = os.path.join("data", "uploads")
        os.makedirs(upload_dir, exist_ok=True)

        # G√©n√©rer un nom de fichier unique
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        original_name = uploaded_file.name
        file_extension = os.path.splitext(original_name)[1]
        unique_filename = (
            f"{consultant_id}_{data['type_document']}_{timestamp}{file_extension}"
        )
        file_path = os.path.join(upload_dir, unique_filename)

        # Sauvegarder le fichier
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Analyser le document si c'est un CV
        analysis_result = None
        if data["type_document"] == "CV":
            try:
                # Extraire le texte du fichier
                extracted_text = DocumentAnalyzer.extract_text_from_file(file_path)

                # Analyser le contenu du CV
                if extracted_text:
                    analysis_result = DocumentAnalyzer.analyze_cv_content(
                        extracted_text, f"{consultant_id}"
                    )
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Analyse CV non disponible: {e}")

        # Enregistrer en base de donn√©es
        with get_database_session() as session:
            document = Document(
                consultant_id=consultant_id,
                nom_fichier=original_name,
                chemin_fichier=file_path,
                type_document=data["type_document"],
                taille_fichier=len(uploaded_file.getbuffer()),
                mimetype=uploaded_file.type,
                description=(
                    data["description"].strip() if data["description"] else None
                ),
                date_upload=datetime.now(),
                analyse_cv=str(analysis_result) if analysis_result else None,
            )

            session.add(document)
            session.commit()

            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'upload: {e}")
        return False


def download_document(document):
    """T√©l√©charge un document"""

    try:
        if not os.path.exists(document.chemin_fichier):
            st.error("‚ùå Fichier introuvable sur le serveur")
            return

        with open(document.chemin_fichier, "rb") as f:
            file_data = f.read()

        st.download_button(
            label="üì• T√©l√©charger maintenant",
            data=file_data,
            file_name=document.nom_fichier,
            mime=document.mimetype,
            key=f"download_btn_{document.id}",
        )

    except Exception as e:
        st.error(f"‚ùå Erreur lors du t√©l√©chargement: {e}")


def reanalyze_document(document_id: int, consultant) -> bool:
    """R√©analyse un document"""

    try:
        with get_database_session() as session:
            document = (
                session.query(Document).filter(Document.id == document_id).first()
            )

            if not document:
                st.error(ERROR_DOCUMENT_NOT_FOUND)
                return False

            if not os.path.exists(document.chemin_fichier):
                st.error("‚ùå Fichier introuvable sur le serveur")
                return False

            # R√©analyser le document
            extracted_text = DocumentAnalyzer.extract_text_from_file(
                document.chemin_fichier
            )
            if extracted_text:
                analysis_result = DocumentAnalyzer.analyze_cv_content(
                    extracted_text, f"{consultant.prenom} {consultant.nom}"
                )
            else:
                analysis_result = None

            # Mettre √† jour la base de donn√©es
            document.analyse_cv = str(analysis_result) if analysis_result else None
            session.commit()

            st.success("‚úÖ Document r√©analys√© avec succ√®s !")
            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©analyse: {e}")
        return False


def _load_document_for_rename(document_id: int):
    """Charge un document pour renommage"""
    with get_database_session() as session:
        document = session.query(Document).filter(Document.id == document_id).first()
        if not document:
            st.error(ERROR_DOCUMENT_NOT_FOUND)
            return None
        return document


def _handle_rename_form_submission(
    document_id: int, new_name: str, new_description: str
):
    """G√®re la soumission du formulaire de renommage"""
    if not new_name or not new_name.strip():
        st.error("‚ùå Le nom du fichier est obligatoire")
        return False

    success = rename_document(
        document_id,
        {
            "new_name": new_name.strip(),
            "new_description": (new_description.strip() if new_description else None),
        },
    )

    if success:
        st.success("‚úÖ Document renomm√© avec succ√®s !")
        if "rename_document" in st.session_state:
            del st.session_state.rename_document
        st.rerun()
        return True
    else:
        st.error("‚ùå Erreur lors du renommage")
        return False


def _handle_rename_form_cancellation():
    """G√®re l'annulation du formulaire de renommage"""
    if "rename_document" in st.session_state:
        del st.session_state.rename_document
    st.rerun()


def show_rename_document_form(document_id: int):
    """Affiche le formulaire de renommage de document"""

    st.markdown("### ‚úèÔ∏è Renommer un document")

    try:
        document = _load_document_for_rename(document_id)
        if not document:
            return

        with st.form(f"rename_document_form_{document_id}", clear_on_submit=False):
            new_name = st.text_input(
                "Nouveau nom du fichier",
                value=document.nom_fichier,
                help="Entrez le nouveau nom du fichier (sans extension)",
            )

            new_description = st.text_area(
                "Nouvelle description",
                value=document.description or "",
                height=80,
                help="Description optionnelle du document",
            )

            # Boutons
            col1, col2, _ = st.columns([1, 1, 2])

            with col1:
                submitted = st.form_submit_button("üíæ Renommer", type="primary")

            with col2:
                cancel = st.form_submit_button("‚ùå Annuler")

            if submitted:
                _handle_rename_form_submission(document_id, new_name, new_description)

            if cancel:
                _handle_rename_form_cancellation()

    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du formulaire: {e}")


def rename_document(document_id: int, data: Dict[str, Any]) -> bool:
    """Renomme un document"""

    try:
        with get_database_session() as session:
            document = (
                session.query(Document).filter(Document.id == document_id).first()
            )

            if not document:
                st.error(ERROR_DOCUMENT_NOT_FOUND)
                return False

            # Mettre √† jour les informations
            document.nom_fichier = data["new_name"]
            document.description = data["new_description"]

            session.commit()

            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors du renommage: {e}")
        return False


def delete_document(document_id: int) -> bool:
    """Supprime un document"""

    try:
        with get_database_session() as session:
            document = (
                session.query(Document).filter(Document.id == document_id).first()
            )

            if not document:
                st.error(ERROR_DOCUMENT_NOT_FOUND)
                return False

            # Supprimer le fichier physique
            if document.chemin_fichier and os.path.exists(document.chemin_fichier):
                try:
                    os.remove(document.chemin_fichier)
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Impossible de supprimer le fichier physique: {e}")

            # Supprimer de la base de donn√©es
            session.delete(document)
            session.commit()

            st.info("‚úÖ Document supprim√©")
            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de la suppression: {e}")
        return False


def perform_cv_analysis(cv_document, consultant, method: str) -> bool:
    """Effectue l'analyse du CV selon la m√©thode choisie"""

    try:
        # Extraire le texte du document
        if not os.path.exists(cv_document.chemin_fichier):
            st.error("‚ùå Fichier CV introuvable")
            return False

        extracted_text = DocumentAnalyzer.extract_text_from_file(
            cv_document.chemin_fichier
        )
        if not extracted_text:
            st.error("‚ùå Impossible d'extraire le texte du CV")
            return False

        # Choisir la m√©thode d'analyse
        if "Grok" in method:
            # Analyse avec OpenAI GPT-4
            grok_service = get_grok_service()
            if not grok_service:
                st.error("‚ùå Service OpenAI non disponible")
                return False

            analysis_result = grok_service.analyze_cv(extracted_text)

            # Ajouter des m√©tadonn√©es
            analysis_result["_analysis_method"] = "openai_gpt4"
            analysis_result["_cost_estimate"] = grok_service.get_cost_estimate(
                len(extracted_text)
            )

        else:
            # Analyse classique
            analysis_result = DocumentAnalyzer.analyze_cv_content(
                extracted_text, f"{consultant.prenom} {consultant.nom}"
            )
            analysis_result["_analysis_method"] = "classic"

        # Sauvegarder l'analyse en base
        with get_database_session() as session:
            cv_document.analyse_cv = json.dumps(analysis_result, ensure_ascii=False)
            session.commit()

        return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse: {e}")
        return False


def _display_cv_resume(analysis):
    """Affiche le r√©sum√© du CV"""
    if "resume" in analysis:
        st.markdown("#### üìã R√©sum√©")
        st.write(analysis["resume"])


def _display_cv_missions(analysis):
    """Affiche les missions d√©tect√©es dans le CV"""
    if "missions" in analysis and analysis["missions"]:
        st.markdown("#### üöÄ Missions d√©tect√©es")
        for i, mission in enumerate(analysis["missions"], 1):
            with st.expander(f"Mission {i}: {mission.get('titre', 'Sans titre')}"):
                st.write(f"**Client :** {mission.get('client', 'N/A')}")
                st.write(f"**P√©riode :** {mission.get('periode', 'N/A')}")
                if mission.get("description"):
                    st.write(f"**Description :** {mission['description']}")


def _display_cv_competences(analysis):
    """Affiche les comp√©tences d√©tect√©es dans le CV"""
    if "competences" in analysis and analysis["competences"]:
        st.markdown("#### üõ†Ô∏è Comp√©tences d√©tect√©es")
        for competence in analysis["competences"]:
            st.write(f"‚Ä¢ {competence}")


def _display_cv_contact(analysis):
    """Affiche les informations de contact d√©tect√©es"""
    if "contact" in analysis and analysis["contact"]:
        st.markdown("#### üìû Informations de contact")
        contact = analysis["contact"]
        if contact.get("email"):
            st.write(f"**Email :** {contact['email']}")
        if contact.get("telephone"):
            st.write(f"**T√©l√©phone :** {contact['telephone']}")


def _display_cv_actions(analysis, consultant):
    """Affiche les actions disponibles sur l'analyse CV"""
    col1, col2 = st.columns(2)

    with col1:
        if st.button("üíæ Sauvegarder l'analyse", key="save_analysis"):
            st.success("‚úÖ Analyse sauvegard√©e dans le profil du consultant")

    with col2:
        if st.button("üìä G√©n√©rer rapport", key="generate_cv_report"):
            generate_cv_report(analysis, consultant)


def show_full_cv_analysis(analysis, file_name, consultant):
    """Affiche l'analyse compl√®te du CV"""

    st.markdown(f"### üîç Analyse compl√®te du CV : {file_name}")
    st.markdown(f"**Consultant :** {consultant.prenom} {consultant.nom}")

    try:
        _display_cv_resume(analysis)
        _display_cv_missions(analysis)
        _display_cv_competences(analysis)
        _display_cv_contact(analysis)
        _display_cv_actions(analysis, consultant)

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'affichage de l'analyse compl√®te: {e}")


def generate_cv_report(analysis, consultant):
    """G√©n√®re un rapport bas√© sur l'analyse du CV"""

    st.markdown("### üìä Rapport d'analyse CV")

    try:
        report = f"""
# Rapport d'analyse CV
**Consultant :** {consultant.prenom} {consultant.nom}
**Date d'analyse :** {datetime.now().strftime('%d/%m/%Y %H:%M')}

## R√©sum√©
{analysis.get('resume', 'Non disponible')}

## Missions ({len(analysis.get('missions', []))} d√©tect√©es)
"""

        for i, mission in enumerate(analysis.get("missions", []), 1):
            report += f"""
### Mission {i}
- **Titre :** {mission.get('titre', 'N/A')}
- **Client :** {mission.get('client', 'N/A')}
- **P√©riode :** {mission.get('periode', 'N/A')}
- **Description :** {mission.get('description', 'N/A')}
"""

        report += f"""
## Comp√©tences ({len(analysis.get('competences', []))} d√©tect√©es)
"""
        for competence in analysis.get("competences", []):
            report += f"- {competence}\n"

        # T√©l√©charger le rapport
        st.download_button(
            label="üì• T√©l√©charger le rapport",
            data=report,
            file_name=f"rapport_cv_{consultant.prenom}_{consultant.nom}_{datetime.now().strftime('%Y%m%d')}.md",
            mime="text/markdown",
            key="download_cv_report",
        )

        st.success("‚úÖ Rapport g√©n√©r√© avec succ√®s !")

    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")


def show_documents_report(documents):
    """Affiche un rapport d√©taill√© des documents"""

    st.markdown("### üìä Rapport des documents")

    if not documents:
        st.info("‚ÑπÔ∏è Aucun document √† analyser")
        return

    # Statistiques d√©taill√©es
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üìà Statistiques g√©n√©rales")
        st.write(f"**Total documents :** {len(documents)}")

        # R√©partition par type
        types = {}
        for doc in documents:
            doc_type = doc.type_document or "Autre"
            types[doc_type] = types.get(doc_type, 0) + 1

        st.write("**R√©partition par type :**")
        for doc_type, count in types.items():
            st.write(f"  - {doc_type} : {count}")

    with col2:
        st.markdown("#### üìä M√©triques")
        total_size = sum(doc.taille_fichier or 0 for doc in documents)
        st.write(f"**Taille totale :** {total_size / (1024 * 1024):.2f} MB")

        analyzed_count = sum(1 for doc in documents if doc.analyse_cv)
        st.write(f"**Documents analys√©s :** {analyzed_count}/{len(documents)}")

        # Documents par mois
        current_month = datetime.now().month
        current_year = datetime.now().year
        recent_docs = sum(
            1
            for doc in documents
            if doc.date_upload
            and doc.date_upload.month == current_month
            and doc.date_upload.year == current_year
        )
        st.write(f"**Documents ce mois :** {recent_docs}")

    # Liste d√©taill√©e
    st.markdown("#### üìã Liste d√©taill√©e")

    doc_data = []
    for doc in documents:
        doc_data.append(
            {
                "Nom": doc.nom_fichier,
                "Type": doc.type_document or "N/A",
                "Taille (KB)": round((doc.taille_fichier or 0) / 1024, 1),
                "Date upload": (
                    doc.date_upload.strftime("%d/%m/%Y") if doc.date_upload else "N/A"
                ),
                "Analys√©": "‚úÖ" if doc.analyse_cv else "‚ùå",
            }
        )

    df = pd.DataFrame(doc_data)
    st.dataframe(df, width="stretch", hide_index=True)


# Helper methods pour show_document_details()


def _display_document_basic_info(document):
    """Affiche les informations de base du document."""
    st.markdown("**üìÑ Informations**")
    st.write(f"**Nom :** {document.nom_fichier}")
    st.write(f"**Type :** {document.type_document}")
    st.write(f"**Taille :** {document.taille_fichier or 'N/A'} octets")

    if document.date_upload:
        st.write(f"**Upload :** {document.date_upload.strftime('%d/%m/%Y %H:%M')}")


def _display_document_metadata(document):
    """Affiche les m√©tadonn√©es du document."""
    st.markdown("**üìä M√©tadonn√©es**")
    if document.mimetype:
        st.write(f"**Type MIME :** {document.mimetype}")

    if document.chemin_fichier:
        st.write(f"**Chemin :** {document.chemin_fichier}")

    if document.analyse_cv:
        st.write("**Analyse CV :** ‚úÖ Disponible")
    else:
        st.write("**Analyse CV :** ‚ùå Non disponible")


def _display_cv_analysis_summary(document, consultant):
    """Affiche le r√©sum√© de l'analyse CV si disponible."""
    if not document.analyse_cv:
        return

    st.markdown("**üîç Analyse CV**")
    try:
        analysis = json.loads(document.analyse_cv)

        # Afficher un r√©sum√© de l'analyse
        if "missions" in analysis and analysis["missions"]:
            st.write(f"**Missions d√©tect√©es :** {len(analysis['missions'])}")

        if "competences" in analysis and analysis["competences"]:
            st.write(f"**Comp√©tences d√©tect√©es :** {len(analysis['competences'])}")

        # Bouton pour voir l'analyse compl√®te
        if st.button(
            "üëÅÔ∏è Voir analyse compl√®te",
            key=f"view_analysis_{document.id}",
        ):
            show_full_cv_analysis(analysis, document.nom_fichier, consultant)

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'affichage de l'analyse: {e}")


def _display_document_actions(document, consultant):
    """Affiche les actions disponibles pour le document."""
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        if st.button("üì• T√©l√©charger", key=f"download_doc_{document.id}"):
            download_document(document)

    with col2:
        if st.button("üîÑ R√©analyser", key=f"reanalyze_doc_{document.id}"):
            if reanalyze_document(document.id, consultant):
                st.rerun()

    with col3:
        if st.button("‚úèÔ∏è Renommer", key=f"rename_doc_{document.id}"):
            st.session_state.rename_document = document.id
            st.rerun()

    with col4:
        if st.button("üóëÔ∏è Supprimer", key=f"delete_doc_{document.id}"):
            if delete_document(document.id):
                st.rerun()


def _handle_rename_form(document):
    """G√®re l'affichage du formulaire de renommage si activ√©."""
    if (
        "rename_document" in st.session_state
        and st.session_state.rename_document == document.id
    ):
        show_rename_document_form(document.id)
