"""
Page de gestion des practices - VERSION OPTIMIS√âE
Performance am√©lior√©e avec cache, pagination et requ√™tes SQL optimis√©es
"""

import time
from datetime import datetime

import pandas as pd
import plotly.express as px
import streamlit as st

from services.consultant_service import ConsultantService
from services.practice_service_optimized import PracticeServiceOptimized


def show():
    """Affiche la page de gestion des practices optimis√©e"""

    st.title("üè¢ Gestion des Practices")

    # Mesurer le temps de chargement
    start_time = time.time()

    # Onglets pour organiser les fonctionnalit√©s
    tab1, tab2, tab3 = st.tabs(
        ["üìä Vue d'ensemble", "üë• Consultants par Practice", "‚öôÔ∏è Gestion des Practices"])

    with tab1:
        show_practice_overview_optimized()

    with tab2:
        show_consultants_by_practice_optimized()

    with tab3:
        show_practice_management_optimized()

    # Afficher le temps de chargement en bas de page
    end_time = time.time()
    loading_time = end_time - start_time
    st.caption(f"‚ö° Temps de chargement: {loading_time:.2f}s")


def show_practice_overview_optimized():
    """Affiche une vue d'ensemble des practices - VERSION OPTIMIS√âE"""

    # R√©cup√©rer les statistiques avec cache
    with st.spinner("üîÑ Chargement des statistiques..."):
        stats = PracticeServiceOptimized.get_practice_statistics_optimized()

    # M√©triques principales
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            label="üè¢ Total Practices",
            value=stats["total_practices"]
        )

    with col2:
        st.metric(
            label="üë• Total Consultants",
            value=stats["total_consultants"]
        )

    with col3:
        consultants_actifs = sum([p["consultants_actifs"]
                                 for p in stats["practices_detail"]])
        taux_activite = (
            consultants_actifs /
            stats["total_consultants"] *
            100) if stats["total_consultants"] > 0 else 0
        st.metric(
            label="‚úÖ Consultants Actifs",
            value=consultants_actifs,
            delta=f"{taux_activite:.1f}% du total"
        )

    st.markdown("---")

    # Tableau d√©taill√© par practice
    if stats["practices_detail"]:
        st.subheader("üìã D√©tail par Practice")

        df_practices = pd.DataFrame(stats["practices_detail"])
        df_practices = df_practices.rename(columns={
            "nom": "Practice",
            "total_consultants": "Total Consultants",
            "consultants_actifs": "Consultants Actifs",
            "responsable": "Responsable"
        })

        # Calculer le taux d'activit√©
        df_practices["Taux Activit√©"] = (
            df_practices["Consultants Actifs"] / df_practices["Total Consultants"] * 100
        ).round(1).astype(str) + "%"

        # Afficher le tableau avec formatting
        st.dataframe(
            df_practices, use_container_width=True, hide_index=True, column_config={
                "Practice": st.column_config.TextColumn(
                    "Practice", width="medium"), "Total Consultants": st.column_config.NumberColumn(
                    "Total", width="small"), "Consultants Actifs": st.column_config.NumberColumn(
                    "Actifs", width="small"), "Taux Activit√©": st.column_config.TextColumn(
                        "Taux", width="small"), "Responsable": st.column_config.TextColumn(
                            "Responsable", width="medium")})

        # Graphiques optimis√©s
        if len(df_practices) > 0:
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("üìà R√©partition des Consultants")
                chart_data = df_practices.set_index(
                    "Practice")[["Total Consultants", "Consultants Actifs"]]
                st.bar_chart(chart_data, height=300)

            with col2:
                st.subheader("üéØ Taux d'activit√© par Practice")
                # Graphique en secteurs avec Plotly
                if len(df_practices) > 0:
                    # Pr√©parer les donn√©es pour le graphique en secteurs
                    fig = px.pie(
                        df_practices,
                        values='Consultants Actifs',
                        names='Practice',
                        title="R√©partition des consultants actifs",
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    fig.update_traces(textposition='inside', textinfo='percent+label')
                    fig.update_layout(height=300, showlegend=True)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("Pas assez de donn√©es pour le graphique")

    else:
        st.info(
            "‚ÑπÔ∏è Aucune practice trouv√©e. Cr√©ez votre premi√®re practice dans l'onglet 'Gestion des Practices'.")


def show_consultants_by_practice_optimized():
    """Affiche les consultants regroup√©s par practice - VERSION OPTIMIS√âE avec pagination"""

    # Configuration pagination
    if 'practice_page' not in st.session_state:
        st.session_state.practice_page = 1

    per_page = 25  # Nombre de consultants par page

    # R√©cup√©rer les practices pour le filtre
    practices_cached = PracticeServiceOptimized.get_all_practices_cached()
    practices_names = [p['nom'] for p in practices_cached]

    # Filtre par practice
    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        selected_practice = st.selectbox(
            "üîç Filtrer par Practice",
            options=["Toutes"] + practices_names + ["Sans Practice"],
            index=0,
            key="practice_filter"
        )

    with col2:
        if st.button("üîÑ Actualiser", key="refresh_consultants"):
            PracticeServiceOptimized.clear_practices_cache()
            st.rerun()

    with col3:
        per_page = st.selectbox("Consultants par page", [10, 25, 50, 100], index=1)

    st.markdown("---")

    # R√©cup√©ration pagin√©e des consultants
    with st.spinner("üîÑ Chargement des consultants..."):
        consultants, total = PracticeServiceOptimized.get_consultants_by_practice_paginated(
            practice_name=selected_practice if selected_practice != "Toutes" else None,
            page=st.session_state.practice_page,
            per_page=per_page
        )

    if consultants:
        # Affichage des informations de pagination
        total_pages = (total + per_page - 1) // per_page
        st.info(
            f"üìä {total} consultant(s) trouv√©(s) - Page {st.session_state.practice_page}/{total_pages}")

        # Afficher les consultants par practice
        current_practice = None
        practice_consultants = []

        for consultant in consultants:
            if consultant["practice_nom"] != current_practice:
                # Afficher la practice pr√©c√©dente si elle existe
                if practice_consultants:
                    show_practice_consultants_optimized(
                        current_practice, practice_consultants)

                # Nouvelle practice
                current_practice = consultant["practice_nom"]
                practice_consultants = []

            practice_consultants.append(consultant)

        # Afficher la derni√®re practice
        if practice_consultants:
            show_practice_consultants_optimized(current_practice, practice_consultants)

        # Navigation pagination
        if total_pages > 1:
            st.markdown("---")
            col1, col2, col3, col4, col5 = st.columns(5)

            with col1:
                if st.button(
                    "‚èÆÔ∏è Premi√®re", disabled=(
                        st.session_state.practice_page == 1)):
                    st.session_state.practice_page = 1
                    st.rerun()

            with col2:
                if st.button(
                    "‚¨ÖÔ∏è Pr√©c√©dente", disabled=(
                        st.session_state.practice_page == 1)):
                    st.session_state.practice_page -= 1
                    st.rerun()

            with col3:
                # S√©lecteur de page direct
                new_page = st.selectbox(
                    "Page",
                    range(1, total_pages + 1),
                    index=st.session_state.practice_page - 1,
                    key="page_selector"
                )
                if new_page != st.session_state.practice_page:
                    st.session_state.practice_page = new_page
                    st.rerun()

            with col4:
                if st.button(
                    "‚û°Ô∏è Suivante", disabled=(
                        st.session_state.practice_page == total_pages)):
                    st.session_state.practice_page += 1
                    st.rerun()

            with col5:
                if st.button(
                    "‚è≠Ô∏è Derni√®re", disabled=(
                        st.session_state.practice_page == total_pages)):
                    st.session_state.practice_page = total_pages
                    st.rerun()

    else:
        st.info("‚ÑπÔ∏è Aucun consultant trouv√© pour cette practice.")


def show_practice_consultants_optimized(practice_name: str, consultants: list):
    """Affiche les consultants d'une practice - VERSION OPTIMIS√âE"""

    if not consultants:
        st.markdown(f"### üè¢ {practice_name}")
        st.info("Aucun consultant dans cette practice")
        return

    st.markdown(
        f"### üè¢ {practice_name} ({
            len(consultants)} consultant{
            's' if len(consultants) > 1 else ''})")

    # Cr√©er un DataFrame optimis√© (donn√©es d√©j√† pr√©par√©es)
    consultants_data = []
    for consultant in consultants:
        # G√©rer les deux formats possibles
        nom_complet = consultant.get("nom_complet") or f"{
            consultant.get(
                'prenom', '')} {
            consultant.get(
                'nom', '')}".strip()

        consultants_data.append(
            {
                "Nom": nom_complet,
                "Email": consultant.get("email") or "Non renseign√©",
                "T√©l√©phone": consultant.get("telephone") or "Non renseign√©",
                "Salaire": f"{
                    consultant.get(
                        'salaire_actuel',
                        0):,.0f} ‚Ç¨" if consultant.get("salaire_actuel") else "Non renseign√©",
                "Disponible": "‚úÖ" if consultant.get("disponibilite") else "‚ùå",
                "Missions": consultant.get(
                    "nb_missions",
                    0),
                "Comp√©tences": consultant.get(
                    "nb_competences",
                    0)})

    if consultants_data:
        df = pd.DataFrame(consultants_data)

        # Afficher le tableau optimis√©
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Nom": st.column_config.TextColumn("Nom", width="medium"),
                "Email": st.column_config.TextColumn("Email", width="medium"),
                "T√©l√©phone": st.column_config.TextColumn("T√©l√©phone", width="small"),
                "Salaire": st.column_config.TextColumn("Salaire", width="small"),
                "Disponible": st.column_config.TextColumn("Dispo", width="small"),
                "Missions": st.column_config.NumberColumn("Missions", width="small"),
                "Comp√©tences": st.column_config.NumberColumn("Comp√©tences", width="small")
            }
        )

        # Actions rapides
        with st.expander(f"‚ö° Actions rapides - {practice_name}"):
            col1, col2, col3 = st.columns(3)

            with col1:
                if st.button(
                        f"üìä Statistiques d√©taill√©es",
                        key=f"stats_{practice_name}"):
                    show_practice_detailed_stats_cached(practice_name)

            with col2:
                if st.button(f"üìß Exporter emails", key=f"export_{practice_name}"):
                    emails = [c["email"] for c in consultants if c["email"]
                              and c["email"] != "Non renseign√©"]
                    if emails:
                        st.code("; ".join(emails))
                        st.success(f"‚úÖ {len(emails)} emails copi√©s")
                    else:
                        st.warning("Aucun email valide trouv√©")

            with col3:
                # Statistiques rapides
                disponibles = len([c for c in consultants if c["disponibilite"]])
                st.metric("Disponibles", disponibles, f"sur {len(consultants)}")

    st.markdown("---")


def show_practice_detailed_stats_cached(practice_name: str):
    """Affiche des statistiques d√©taill√©es pour une practice avec cache"""

    st.subheader(f"üìä Statistiques d√©taill√©es - {practice_name}")

    # Utiliser le cache pour les stats d√©taill√©es
    with st.spinner("Calcul des statistiques..."):
        stats = PracticeServiceOptimized.get_practice_detailed_stats_cached(
            practice_name)

    if stats:
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("üë• Total Consultants", stats["total_consultants"])

        with col2:
            st.metric("‚úÖ Disponibles", stats["disponibles"])

        with col3:
            if stats["salaire_moyen"] > 0:
                st.metric("üí∞ Salaire Moyen", f"{stats['salaire_moyen']:,.0f} ‚Ç¨")
            else:
                st.metric("üí∞ Salaire Moyen", "N/A")

        with col4:
            st.metric("üéØ Total Missions", stats["total_missions"])

        # M√©triques suppl√©mentaires
        col5, col6 = st.columns(2)

        with col5:
            st.metric("üîß Total Comp√©tences", stats["total_competences"])

        with col6:
            if stats["total_consultants"] > 0:
                taux_dispo = (stats["disponibles"] / stats["total_consultants"]) * 100
                st.metric("üìà Taux Disponibilit√©", f"{taux_dispo:.1f}%")
    else:
        st.info("Aucune donn√©e disponible")


def show_practice_management_optimized():
    """Interface de gestion des practices optimis√©e"""

    st.subheader("‚öôÔ∏è Gestion des Practices")

    # R√©cup√©rer les practices avec cache
    practices_cached = PracticeServiceOptimized.get_all_practices_cached()

    # Onglets pour les diff√©rentes actions
    mgmt_tab1, mgmt_tab2, mgmt_tab3 = st.tabs(
        ["‚ûï Cr√©er Practice", "‚úèÔ∏è Modifier Practice", "üë§ Assigner Consultants"])

    with mgmt_tab1:
        show_create_practice_form_optimized()

    with mgmt_tab2:
        show_edit_practice_form_optimized(practices_cached)

    with mgmt_tab3:
        show_assign_consultant_form_optimized(practices_cached)


def show_create_practice_form_optimized():
    """Formulaire de cr√©ation de practice optimis√©"""

    st.markdown("#### ‚ûï Cr√©er une nouvelle Practice")

    with st.form("create_practice_form"):
        col1, col2 = st.columns(2)

        with col1:
            nom = st.text_input(
                "Nom de la Practice *",
                placeholder="Ex: DevOps, Cloud, etc."
            )

        with col2:
            responsable = st.text_input(
                "Responsable",
                placeholder="Nom du responsable (optionnel)"
            )

        description = st.text_area(
            "Description",
            placeholder="Description de la practice (optionnel)"
        )

        submitted = st.form_submit_button("üöÄ Cr√©er la Practice", type="primary")

        if submitted:
            if not nom.strip():
                st.error("‚ùå Le nom de la practice est obligatoire")
            else:
                # Utiliser le service original pour la cr√©ation
                from services.practice_service import PracticeService
                practice = PracticeService.create_practice(
                    nom=nom.strip(),
                    description=description.strip(),
                    responsable=responsable.strip()
                )

                if practice:
                    # Effacer le cache apr√®s cr√©ation
                    PracticeServiceOptimized.clear_practices_cache()
                    st.rerun()


def show_edit_practice_form_optimized(practices_cached: list):
    """Formulaire de modification de practice optimis√©"""

    st.markdown("#### ‚úèÔ∏è Modifier une Practice")

    if not practices_cached:
        st.info("Aucune practice √† modifier")
        return

    # S√©lection de la practice √† modifier
    practice_options = {f"{p['nom']}": p for p in practices_cached}
    selected_name = st.selectbox(
        "S√©lectionner la practice √† modifier",
        options=list(practice_options.keys())
    )

    if selected_name:
        practice = practice_options[selected_name]

        with st.form(f"edit_practice_form_{practice['id']}"):
            col1, col2 = st.columns(2)

            with col1:
                new_nom = st.text_input(
                    "Nom de la Practice *",
                    value=practice['nom']
                )

            with col2:
                new_responsable = st.text_input(
                    "Responsable",
                    value=practice['responsable'] or ""
                )

            new_description = st.text_area(
                "Description",
                value=practice['description'] or ""
            )

            new_actif = st.checkbox(
                "Practice active",
                value=practice['actif']
            )

            submitted = st.form_submit_button(
                "üíæ Sauvegarder les modifications", type="primary")

            if submitted:
                if not new_nom.strip():
                    st.error("‚ùå Le nom de la practice est obligatoire")
                else:
                    # Utiliser le service original pour la modification
                    from services.practice_service import PracticeService
                    success = PracticeService.update_practice(
                        practice['id'],
                        nom=new_nom.strip(),
                        description=new_description.strip(),
                        responsable=new_responsable.strip(),
                        actif=new_actif
                    )

                    if success:
                        # Effacer le cache apr√®s modification
                        PracticeServiceOptimized.clear_practices_cache()
                        st.rerun()


def show_assign_consultant_form_optimized(practices_cached: list):
    """Formulaire d'assignation de consultants aux practices optimis√©"""

    st.markdown("#### üë§ Assigner des Consultants aux Practices")

    # R√©cup√©rer tous les consultants (utiliser cache si possible)
    consultants = ConsultantService.get_all_consultants()

    if not consultants:
        st.info("Aucun consultant trouv√©")
        return

    # S√©lection du consultant
    consultant_options = {}
    for c in consultants:
        if hasattr(c, 'nom_complet') and hasattr(c, 'email'):
            # Objet Consultant avec propri√©t√©s
            consultant_options[f"{c.nom_complet} ({c.email})"] = c
        elif isinstance(c, dict):
            # Dict avec nom et prenom s√©par√©s
            nom_complet = f"{c.get('prenom', '')} {c.get('nom', '')}".strip()
            email = c.get('email', 'Pas d\'email')
            consultant_options[f"{nom_complet} ({email})"] = c
        else:
            # Gestion d√©fensive pour autres formats
            nom_complet = getattr(
                c, 'nom_complet', f"{
                    getattr(
                        c, 'prenom', '')} {
                    getattr(
                        c, 'nom', '')}".strip())
            email = getattr(c, 'email', 'Pas d\'email')
            consultant_options[f"{nom_complet} ({email})"] = c
    selected_consultant_name = st.selectbox(
        "S√©lectionner le consultant",
        options=list(consultant_options.keys())
    )

    if selected_consultant_name:
        consultant = consultant_options[selected_consultant_name]

        # Afficher la practice actuelle
        try:
            if hasattr(consultant, 'practice') and consultant.practice:
                current_practice = consultant.practice.nom
            elif isinstance(consultant, dict) and consultant.get('practice'):
                current_practice = consultant.get('practice', {}).get('nom', 'Aucune')
            else:
                current_practice = "Aucune"
        except BaseException:
            current_practice = "Aucune"
        st.info(f"Practice actuelle : **{current_practice}**")

        # S√©lection de la nouvelle practice
        practice_options = {"Aucune practice": None}
        practice_options.update({p['nom']: p['id'] for p in practices_cached})

        selected_practice = st.selectbox(
            "Nouvelle practice",
            options=list(practice_options.keys()),
            index=0
        )

        if st.button("üîÑ Assigner √† la practice", type="primary"):
            practice_id = practice_options[selected_practice]

            # Utiliser le service original pour l'assignation
            from services.practice_service import PracticeService

            # R√©cup√©rer l'ID du consultant de mani√®re d√©fensive
            consultant_id = None
            if hasattr(consultant, 'id'):
                consultant_id = consultant.id
            elif isinstance(consultant, dict):
                consultant_id = consultant.get('id')

            if consultant_id:
                success = PracticeService.assign_consultant_to_practice(
                    consultant_id,
                    practice_id
                )

                if success:
                    # Effacer le cache apr√®s assignation
                    PracticeServiceOptimized.clear_practices_cache()
                    st.success("‚úÖ Consultant assign√© avec succ√®s !")
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de l'assignation")
            else:
                st.error("‚ùå Impossible de r√©cup√©rer l'ID du consultant")
