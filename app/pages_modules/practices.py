"""
Page de gestion des practices
Affiche les consultants par practice et permet la gestion des practices
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from services.practice_service import PracticeService
from services.consultant_service import ConsultantService


def show():
    """Affiche la page de gestion des practices"""
    
    st.title("üè¢ Gestion des Practices")
    st.markdown("### Vue d'ensemble des practices et de leurs consultants")
    
    # Initialiser les practices par d√©faut si n√©cessaire
    PracticeService.init_default_practices()
    
    # Onglets pour organiser les fonctionnalit√©s
    tab1, tab2, tab3 = st.tabs(["üìä Vue d'ensemble", "üë• Consultants par Practice", "‚öôÔ∏è Gestion des Practices"])
    
    with tab1:
        show_practice_overview()
    
    with tab2:
        show_consultants_by_practice()
    
    with tab3:
        show_practice_management()


def show_practice_overview():
    """Affiche une vue d'ensemble des practices"""
    
    # R√©cup√©rer les statistiques
    stats = PracticeService.get_practice_statistics()
    
    # M√©triques principales
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="üè¢ Total Practices",
            value=stats["total_practices"]
        )
    
    with col2:
        st.metric(
            label="üë• Total Consultants",
            value=stats["total_consultants"]
        )
    
    with col3:
        consultants_actifs = sum([p["consultants_actifs"] for p in stats["practices_detail"]])
        st.metric(
            label="‚úÖ Consultants Actifs",
            value=consultants_actifs
        )
    
    st.markdown("---")
    
    # Tableau d√©taill√© par practice
    if stats["practices_detail"]:
        st.subheader("üìã D√©tail par Practice")
        
        df_practices = pd.DataFrame(stats["practices_detail"])
        df_practices = df_practices.rename(columns={
            "nom": "Practice",
            "total_consultants": "Total Consultants",
            "consultants_actifs": "Consultants Actifs",
            "responsable": "Responsable"
        })
        
        # Afficher le tableau avec formatting
        st.dataframe(
            df_practices,
            use_container_width=True,
            hide_index=True
        )
        
        # Graphique en barres
        if len(df_practices) > 0:
            st.subheader("üìà R√©partition des Consultants")
            chart_data = df_practices.set_index("Practice")[["Total Consultants", "Consultants Actifs"]]
            st.bar_chart(chart_data)
    
    else:
        st.info("‚ÑπÔ∏è Aucune practice trouv√©e. Cr√©ez votre premi√®re practice dans l'onglet 'Gestion des Practices'.")


def show_consultants_by_practice():
    """Affiche les consultants regroup√©s par practice"""
    
    # R√©cup√©rer les consultants par practice
    consultants_by_practice = PracticeService.get_consultants_by_practice()
    
    if not consultants_by_practice:
        st.info("‚ÑπÔ∏è Aucun consultant trouv√©.")
        return
    
    # Filtre par practice
    practices_names = list(consultants_by_practice.keys())
    selected_practice = st.selectbox(
        "üîç Filtrer par Practice",
        options=["Toutes"] + practices_names,
        index=0
    )
    
    st.markdown("---")
    
    # Afficher les consultants
    if selected_practice == "Toutes":
        # Afficher toutes les practices
        for practice_name, consultants in consultants_by_practice.items():
            show_practice_consultants(practice_name, consultants)
    else:
        # Afficher une practice sp√©cifique
        consultants = consultants_by_practice.get(selected_practice, [])
        show_practice_consultants(selected_practice, consultants)


def show_practice_consultants(practice_name: str, consultants: list):
    """Affiche les consultants d'une practice"""
    
    if not consultants:
        st.markdown(f"### üè¢ {practice_name}")
        st.info("Aucun consultant dans cette practice")
        return
    
    st.markdown(f"### üè¢ {practice_name} ({len(consultants)} consultant{'s' if len(consultants) > 1 else ''})")
    
    # Cr√©er un DataFrame pour affichage
    consultants_data = []
    for consultant in consultants:
        # Calculer le nombre de missions de mani√®re s√ªre
        try:
            missions = consultant.missions
            nb_missions = len(missions) if missions else 0
        except:
            nb_missions = 0
        
        # Calculer le nombre de comp√©tences de mani√®re s√ªre
        try:
            competences = consultant.competences
            nb_competences = len(competences) if competences else 0
        except:
            nb_competences = 0
        
        consultants_data.append({
            "Nom": consultant.nom_complet,
            "Email": consultant.email,
            "T√©l√©phone": consultant.telephone or "Non renseign√©",
            "Salaire": f"{consultant.salaire_actuel:,.0f} ‚Ç¨" if consultant.salaire_actuel else "Non renseign√©",
            "Disponible": "‚úÖ" if consultant.disponibilite else "‚ùå",
            "Missions": nb_missions,
            "Comp√©tences": nb_competences
        })
    
    if consultants_data:
        df = pd.DataFrame(consultants_data)
        
        # Afficher le tableau
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True
        )
        
        # Actions rapides
        with st.expander(f"‚ö° Actions rapides - {practice_name}"):
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button(f"üìä Statistiques d√©taill√©es", key=f"stats_{practice_name}"):
                    show_practice_detailed_stats(practice_name, consultants)
            
            with col2:
                if st.button(f"üìß Exporter emails", key=f"export_{practice_name}"):
                    emails = [c.email for c in consultants if c.email]
                    st.code("; ".join(emails))
                    st.success(f"‚úÖ {len(emails)} emails copi√©s")
    
    st.markdown("---")


def show_practice_detailed_stats(practice_name: str, consultants: list):
    """Affiche des statistiques d√©taill√©es pour une practice"""
    
    st.subheader(f"üìä Statistiques d√©taill√©es - {practice_name}")
    
    if not consultants:
        st.info("Aucune donn√©e disponible")
        return
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        disponibles = len([c for c in consultants if c.disponibilite])
        st.metric("Disponibles", disponibles)
    
    with col2:
        try:
            total_missions = sum([len(c.missions) if hasattr(c, 'missions') and c.missions else 0 for c in consultants])
        except:
            total_missions = 0
        st.metric("Total Missions", total_missions)
    
    with col3:
        salaires_valides = [c.salaire_actuel for c in consultants if c.salaire_actuel]
        if salaires_valides:
            avg_salary = sum(salaires_valides) / len(salaires_valides)
            st.metric("Salaire Moyen", f"{avg_salary:,.0f} ‚Ç¨")
        else:
            st.metric("Salaire Moyen", "N/A")
    
    with col4:
        try:
            total_competences = sum([len(c.competences) if hasattr(c, 'competences') and c.competences else 0 for c in consultants])
        except:
            total_competences = 0
        st.metric("Total Comp√©tences", total_competences)


def show_practice_management():
    """Interface de gestion des practices"""
    
    st.subheader("‚öôÔ∏è Gestion des Practices")
    
    # R√©cup√©rer les practices existantes
    practices = PracticeService.get_all_practices()
    
    # Onglets pour les diff√©rentes actions
    mgmt_tab1, mgmt_tab2, mgmt_tab3 = st.tabs(["‚ûï Cr√©er Practice", "‚úèÔ∏è Modifier Practice", "üë§ Assigner Consultants"])
    
    with mgmt_tab1:
        show_create_practice_form()
    
    with mgmt_tab2:
        show_edit_practice_form(practices)
    
    with mgmt_tab3:
        show_assign_consultant_form(practices)


def show_create_practice_form():
    """Formulaire de cr√©ation de practice"""
    
    st.markdown("#### ‚ûï Cr√©er une nouvelle Practice")
    
    with st.form("create_practice_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            nom = st.text_input(
                "Nom de la Practice *",
                placeholder="Ex: DevOps, Cloud, etc."
            )
        
        with col2:
            responsable = st.text_input(
                "Responsable",
                placeholder="Nom du responsable (optionnel)"
            )
        
        description = st.text_area(
            "Description",
            placeholder="Description de la practice (optionnel)"
        )
        
        submitted = st.form_submit_button("üöÄ Cr√©er la Practice", type="primary")
        
        if submitted:
            if not nom.strip():
                st.error("‚ùå Le nom de la practice est obligatoire")
            else:
                practice = PracticeService.create_practice(
                    nom=nom.strip(),
                    description=description.strip(),
                    responsable=responsable.strip()
                )
                
                if practice:
                    st.rerun()


def show_edit_practice_form(practices: list):
    """Formulaire de modification de practice"""
    
    st.markdown("#### ‚úèÔ∏è Modifier une Practice")
    
    if not practices:
        st.info("Aucune practice √† modifier")
        return
    
    # S√©lection de la practice √† modifier
    practice_options = {f"{p.nom}": p for p in practices}
    selected_name = st.selectbox(
        "S√©lectionner la practice √† modifier",
        options=list(practice_options.keys())
    )
    
    if selected_name:
        practice = practice_options[selected_name]
        
        with st.form(f"edit_practice_form_{practice.id}"):
            col1, col2 = st.columns(2)
            
            with col1:
                new_nom = st.text_input(
                    "Nom de la Practice *",
                    value=practice.nom
                )
            
            with col2:
                new_responsable = st.text_input(
                    "Responsable",
                    value=practice.responsable or ""
                )
            
            new_description = st.text_area(
                "Description",
                value=practice.description or ""
            )
            
            new_actif = st.checkbox(
                "Practice active",
                value=practice.actif
            )
            
            submitted = st.form_submit_button("üíæ Sauvegarder les modifications", type="primary")
            
            if submitted:
                if not new_nom.strip():
                    st.error("‚ùå Le nom de la practice est obligatoire")
                else:
                    success = PracticeService.update_practice(
                        practice.id,
                        nom=new_nom.strip(),
                        description=new_description.strip(),
                        responsable=new_responsable.strip(),
                        actif=new_actif
                    )
                    
                    if success:
                        st.rerun()


def show_assign_consultant_form(practices: list):
    """Formulaire d'assignation de consultants aux practices"""
    
    st.markdown("#### üë§ Assigner des Consultants aux Practices")
    
    # R√©cup√©rer tous les consultants
    consultants = ConsultantService.get_all_consultants()
    
    if not consultants:
        st.info("Aucun consultant trouv√©")
        return
    
    # S√©lection du consultant
    consultant_options = {f"{c.nom_complet} ({c.email})": c for c in consultants}
    selected_consultant_name = st.selectbox(
        "S√©lectionner le consultant",
        options=list(consultant_options.keys())
    )
    
    if selected_consultant_name:
        consultant = consultant_options[selected_consultant_name]
        
        # Afficher la practice actuelle
        try:
            current_practice = consultant.practice.nom if consultant.practice else "Aucune"
        except:
            current_practice = "Aucune"
        st.info(f"Practice actuelle : **{current_practice}**")
        
        # S√©lection de la nouvelle practice
        practice_options = {"Aucune practice": None}
        practice_options.update({p.nom: p.id for p in practices})
        
        selected_practice = st.selectbox(
            "Nouvelle practice",
            options=list(practice_options.keys()),
            index=0
        )
        
        if st.button("üîÑ Assigner √† la practice", type="primary"):
            practice_id = practice_options[selected_practice]
            
            success = PracticeService.assign_consultant_to_practice(
                consultant.id,
                practice_id
            )
            
            if success:
                st.rerun()
