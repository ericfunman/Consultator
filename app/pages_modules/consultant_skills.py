"""
Module de gestion des comp√©tences du consultant
Fonctions pour afficher, ajouter et modifier les comp√©tences
"""

import os
import sys
from typing import Any
from typing import Dict
from typing import List

import streamlit as st

# Ajouter les chemins n√©cessaires
current_dir = os.path.dirname(__file__)
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

# Variables pour les imports
ConsultantService = None
get_database_session = None
Consultant = None
imports_ok = False

try:
    from database.database import get_database_session
    from database.models import Competence
    from database.models import Consultant
    from database.models import ConsultantCompetence
    from services.consultant_service import ConsultantService
    from utils.skill_categories import SKILL_CATEGORIES

    imports_ok = True
except ImportError:
    pass

# Messages d'erreur constants (nettoyage des doublons)
MSG_SERVICES_INDISPONIBLES = "‚ùå Les services de base ne sont pas disponibles"
MSG_CONSULTANT_NON_FOURNI = "‚ùå Consultant non fourni"
MSG_ERREUR_AFFICHAGE_COMPETENCES = "‚ùå Erreur lors de l'affichage des comp√©tences:"
MSG_COMPETENCE_AJOUTEE = "‚úÖ Comp√©tence ajout√©e avec succ√®s !"
MSG_ERREUR_AJOUT_COMPETENCE = "‚ùå Erreur lors de l'ajout de la comp√©tence"
MSG_ERREUR_CHARGEMENT_FORMULAIRE = "‚ùå Erreur lors du chargement du formulaire:"
MSG_COMPETENCE_DEJA_ASSOCIEE = "‚ùå Cette comp√©tence est d√©j√† associ√©e au consultant"
MSG_COMPETENCE_INTROUVABLE = "‚ùå Comp√©tence introuvable"
MSG_COMPETENCE_MISE_A_JOUR = "‚úÖ Comp√©tence mise √† jour avec succ√®s !"
MSG_ERREUR_MISE_A_JOUR = "‚ùå Erreur lors de la mise √† jour"
MSG_ERREUR_CHARGEMENT_MODIFICATION = "‚ùå Erreur lors du chargement du formulaire de modification:"

# Emojis pour la certification
EMOJI_CERTIFIE = "‚úÖ"
EMOJI_NON_CERTIFIE = "‚ùå"


def _load_consultant_competences(consultant_id):
    """Charge les comp√©tences d'un consultant."""
    with get_database_session() as session:
        consultant_competences = (
            session.query(ConsultantCompetence)
            .join(Competence)
            .filter(ConsultantCompetence.consultant_id == consultant_id)
            .all()
        )
    return consultant_competences


def _organize_skills_by_category(consultant_competences):
    """Organise les comp√©tences par cat√©gorie."""
    skills_by_category = {}
    for cc in consultant_competences:
        category = cc.competence.categorie or "Autre"
        if category not in skills_by_category:
            skills_by_category[category] = []
        skills_by_category[category].append(
            {
                "id": cc.id,
                "nom": cc.competence.nom,
                "niveau": cc.niveau,
                "annees_experience": cc.annees_experience,
                "certification": cc.certification,
                "date_acquisition": cc.date_acquisition,
            }
        )
    return skills_by_category


def _create_skill_data_row(skill):
    """Cr√©e une ligne de donn√©es pour une comp√©tence."""
    return {
        "Comp√©tence": skill["nom"],
        "Niveau": get_niveau_label(skill["niveau"]),
        "Exp√©rience": (f"{skill['annees_experience']} an(s)" if skill["annees_experience"] else "N/A"),
        "Certification": (EMOJI_CERTIFIE if skill["certification"] else EMOJI_NON_CERTIFIE),
        "Actions": f"edit_{skill['id']}",
    }


def _display_skill_row(row):
    """Affiche une ligne de comp√©tence avec les boutons d'action."""
    col1, col2, col3, col4, col5 = st.columns([3, 2, 2, 2, 2])

    with col1:
        st.write(f"**{row['Comp√©tence']}**")

    with col2:
        st.write(row["Niveau"])

    with col3:
        st.write(row["Exp√©rience"])

    with col4:
        st.write(row["Certification"])

    with col5:
        skill_id = row["Actions"].replace("edit_", "")
        if st.button("‚úèÔ∏è", key=f"edit_skill_{skill_id}", help="Modifier"):
            st.session_state.edit_skill = int(skill_id)
            st.rerun()
        if st.button("üóëÔ∏è", key=f"delete_skill_{skill_id}", help="Supprimer"):
            if delete_skill(int(skill_id)):
                st.rerun()


def _display_skills_by_category(skills_by_category):
    """Affiche les comp√©tences organis√©es par cat√©gorie."""
    import pandas as pd

    for category, skills in skills_by_category.items():
        st.markdown(f"#### üè∑Ô∏è {category}")

        # Cr√©er un tableau pour cette cat√©gorie
        skill_data = []
        for skill in skills:
            skill_data.append(_create_skill_data_row(skill))

        df = pd.DataFrame(skill_data)

        # Afficher le tableau avec actions
        for index, row in df.iterrows():
            _display_skill_row(row)


def _display_action_buttons(consultant_id, consultant_competences):
    """Affiche les boutons d'action g√©n√©raux."""
    st.markdown("#### üéØ Actions")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("‚ûï Ajouter comp√©tence", key=f"add_skill_{consultant_id}"):
            st.session_state.add_skill = consultant_id
            st.rerun()

    with col2:
        if st.button("üìä Analyse comp√©tences", key=f"analyze_skills_{consultant_id}"):
            show_skills_analysis(consultant_competences)

    with col3:
        if st.button("üìà √âvolution", key=f"skills_evolution_{consultant_id}"):
            show_skills_evolution(consultant_id)


def _handle_skill_forms(consultant_id):
    """G√®re l'affichage des formulaires d'ajout et de modification."""
    # Formulaire d'ajout (si activ√©)
    if "add_skill" in st.session_state and st.session_state.add_skill == consultant_id:
        show_add_skill_form(consultant_id)

    # Formulaire de modification (si activ√©)
    if "edit_skill" in st.session_state:
        show_edit_skill_form(st.session_state.edit_skill)


def show_consultant_skills(consultant):
    """Affiche les comp√©tences du consultant"""

    if not imports_ok:
        st.error(MSG_SERVICES_INDISPONIBLES)
        return

    if not consultant:
        st.error(MSG_CONSULTANT_NON_FOURNI)
        return

    st.markdown("### üíº Comp√©tences")

    try:
        consultant_competences = _load_consultant_competences(consultant.id)

        if not consultant_competences:
            st.info("‚ÑπÔ∏è Aucune comp√©tence enregistr√©e pour ce consultant")
            show_add_skill_form(consultant.id)
            return

        skills_by_category = _organize_skills_by_category(consultant_competences)
        _display_skills_by_category(skills_by_category)

        # Statistiques des comp√©tences
        show_skills_statistics(consultant_competences)

        _display_action_buttons(consultant.id, consultant_competences)
        _handle_skill_forms(consultant.id)

    except Exception as e:
        st.error(f"{MSG_ERREUR_AFFICHAGE_COMPETENCES} {e}")
        st.code(str(e))


def get_niveau_label(niveau: int) -> str:
    """Retourne le label du niveau de comp√©tence"""

    niveaux = {1: "D√©butant", 2: "Interm√©diaire", 3: "Avanc√©", 4: "Expert", 5: "Ma√Ætre"}
    return niveaux.get(niveau, f"Niveau {niveau}")


def show_skills_statistics(consultant_competences):
    """Affiche les statistiques des comp√©tences"""

    if not consultant_competences:
        return

    st.markdown("#### üìä Statistiques")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_skills = len(consultant_competences)
        st.metric("Total comp√©tences", total_skills)

    with col2:
        avg_level = sum(cc.niveau for cc in consultant_competences) / len(consultant_competences)
        st.metric("Niveau moyen", f"{avg_level:.1f}/5")

    with col3:
        certified_count = sum(1 for cc in consultant_competences if cc.certification)
        st.metric("Certifi√©es", certified_count)

    with col4:
        avg_experience = sum(cc.annees_experience or 0 for cc in consultant_competences) / len(consultant_competences)
        st.metric("Exp√©rience moyenne", f"{avg_experience:.1f} ans")


def show_add_skill_form(consultant_id: int):
    """Affiche le formulaire d'ajout de comp√©tence"""

    st.markdown("### ‚ûï Ajouter une comp√©tence")

    try:
        # R√©cup√©rer les comp√©tences disponibles
        with get_database_session() as session:
            existing_competences = (
                session.query(ConsultantCompetence).filter(ConsultantCompetence.consultant_id == consultant_id).all()
            )

            existing_skill_ids = [cc.competence_id for cc in existing_competences]

            available_competences = session.query(Competence).filter(~Competence.id.in_(existing_skill_ids)).all()

        if not available_competences:
            st.warning("‚ö†Ô∏è Toutes les comp√©tences existantes sont d√©j√† associ√©es √† ce consultant")
            return

        with st.form(f"add_skill_form_{consultant_id}", clear_on_submit=True):
            # S√©lection de la comp√©tence
            skill_options = {c.id: f"{c.nom} ({c.categorie})" for c in available_competences}
            selected_skill = st.selectbox(
                "Comp√©tence *",
                options=list(skill_options.keys()),
                format_func=lambda x: skill_options[x],
                help="S√©lectionnez une comp√©tence √† ajouter",
            )

            col1, col2 = st.columns(2)

            with col1:
                niveau = st.slider(
                    "Niveau *",
                    min_value=1,
                    max_value=5,
                    value=3,
                    help="Niveau de ma√Ætrise (1=D√©butant, 5=Expert)",
                )

                certification = st.checkbox(
                    "Certification",
                    help="Le consultant poss√®de-t-il une certification ?",
                )

            with col2:
                annees_experience = st.number_input(
                    "Ann√©es d'exp√©rience",
                    min_value=0,
                    max_value=50,
                    value=0,
                    help="Nombre d'ann√©es d'exp√©rience dans cette comp√©tence",
                )

            # Boutons
            col1, col2, _ = st.columns([1, 1, 2])

            with col1:
                submitted = st.form_submit_button("üíæ Ajouter", type="primary")

            with col2:
                cancel = st.form_submit_button("‚ùå Annuler")

            if submitted:
                success = add_skill_to_consultant(
                    consultant_id,
                    {
                        "competence_id": selected_skill,
                        "niveau": niveau,
                        "annees_experience": annees_experience,
                        "certification": certification,
                    },
                )

                if success:
                    st.success("‚úÖ Comp√©tence ajout√©e avec succ√®s !")
                    if "add_skill" in st.session_state:
                        del st.session_state.add_skill
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de l'ajout de la comp√©tence")

            if cancel:
                if "add_skill" in st.session_state:
                    del st.session_state.add_skill
                st.rerun()

    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du formulaire: {e}")


def add_skill_to_consultant(consultant_id: int, data: Dict[str, Any]) -> bool:
    """Ajoute une comp√©tence au consultant"""

    try:
        with get_database_session() as session:
            # V√©rifier que la comp√©tence n'existe pas d√©j√†
            existing = (
                session.query(ConsultantCompetence)
                .filter(
                    ConsultantCompetence.consultant_id == consultant_id,
                    ConsultantCompetence.competence_id == data["competence_id"],
                )
                .first()
            )

            if existing:
                st.error("‚ùå Cette comp√©tence est d√©j√† associ√©e au consultant")
                return False

            # Cr√©er la nouvelle association
            from datetime import datetime

            consultant_competence = ConsultantCompetence(
                consultant_id=consultant_id,
                competence_id=data["competence_id"],
                niveau=data["niveau"],
                annees_experience=data["annees_experience"],
                certification=data["certification"],
                date_acquisition=datetime.now(),
            )

            session.add(consultant_competence)
            session.commit()

            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'ajout de la comp√©tence: {e}")
        return False


def show_edit_skill_form(consultant_competence_id: int):
    """Affiche le formulaire de modification de comp√©tence"""

    st.markdown("### ‚úèÔ∏è Modifier une comp√©tence")

    try:
        with get_database_session() as session:
            cc = (
                session.query(ConsultantCompetence)
                .join(Competence)
                .filter(ConsultantCompetence.id == consultant_competence_id)
                .first()
            )

            if not cc:
                st.error(MSG_COMPETENCE_INTROUVABLE)
                return

        with st.form(f"edit_skill_form_{consultant_competence_id}", clear_on_submit=False):
            st.write(f"**Comp√©tence :** {cc.competence.nom}")

            col1, col2 = st.columns(2)

            with col1:
                niveau = st.slider(
                    "Niveau *",
                    min_value=1,
                    max_value=5,
                    value=cc.niveau,
                    help="Niveau de ma√Ætrise (1=D√©butant, 5=Expert)",
                )

                certification = st.checkbox(
                    "Certification",
                    value=cc.certification,
                    help="Le consultant poss√®de-t-il une certification ?",
                )

            with col2:
                annees_experience = st.number_input(
                    "Ann√©es d'exp√©rience",
                    min_value=0,
                    max_value=50,
                    value=cc.annees_experience or 0,
                    help="Nombre d'ann√©es d'exp√©rience dans cette comp√©tence",
                )

            # Boutons
            col1, col2, _ = st.columns([1, 1, 2])

            with col1:
                submitted = st.form_submit_button("üíæ Enregistrer", type="primary")

            with col2:
                cancel = st.form_submit_button("‚ùå Annuler")

            if submitted:
                success = update_consultant_skill(
                    consultant_competence_id,
                    {
                        "niveau": niveau,
                        "annees_experience": annees_experience,
                        "certification": certification,
                    },
                )

                if success:
                    st.success("‚úÖ Comp√©tence mise √† jour avec succ√®s !")
                    if "edit_skill" in st.session_state:
                        del st.session_state.edit_skill
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la mise √† jour")

            if cancel:
                if "edit_skill" in st.session_state:
                    del st.session_state.edit_skill
                st.rerun()

    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du formulaire de modification: {e}")


def update_consultant_skill(consultant_competence_id: int, data: Dict[str, Any]) -> bool:
    """Met √† jour une comp√©tence du consultant"""

    try:
        with get_database_session() as session:
            cc = session.query(ConsultantCompetence).filter(ConsultantCompetence.id == consultant_competence_id).first()

            if not cc:
                st.error(MSG_COMPETENCE_INTROUVABLE)
                return False

            # Mettre √† jour les donn√©es
            cc.niveau = data["niveau"]
            cc.annees_experience = data["annees_experience"]
            cc.certification = data["certification"]

            session.commit()

            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de la mise √† jour de la comp√©tence: {e}")
        return False


def delete_skill(consultant_competence_id: int) -> bool:
    """Supprime une comp√©tence du consultant"""

    try:
        with get_database_session() as session:
            cc = session.query(ConsultantCompetence).filter(ConsultantCompetence.id == consultant_competence_id).first()

            if not cc:
                st.error(MSG_COMPETENCE_INTROUVABLE)
                return False

            session.delete(cc)
            session.commit()

            st.info("‚úÖ Comp√©tence supprim√©e")
            return True

    except Exception as e:
        st.error(f"‚ùå Erreur lors de la suppression de la comp√©tence: {e}")
        return False


def show_skills_analysis(consultant_competences):
    """Affiche une analyse des comp√©tences"""

    st.markdown("### üìä Analyse des comp√©tences")

    if not consultant_competences:
        st.info("‚ÑπÔ∏è Aucune comp√©tence √† analyser")
        return

    # Analyse par niveau
    level_counts = {}
    for cc in consultant_competences:
        level = cc.niveau
        level_counts[level] = level_counts.get(level, 0) + 1

    # Analyse par cat√©gorie
    category_counts = {}
    for cc in consultant_competences:
        category = cc.competence.categorie or "Autre"
        category_counts[category] = category_counts.get(category, 0) + 1

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üìà R√©partition par niveau")
        for level in range(1, 6):
            count = level_counts.get(level, 0)
            if count > 0:
                st.write(f"**{get_niveau_label(level)} :** {count}")

    with col2:
        st.markdown("#### üè∑Ô∏è R√©partition par cat√©gorie")
        for category, count in category_counts.items():
            st.write(f"**{category} :** {count}")

    # Recommandations
    st.markdown("#### üí° Recommandations")

    # Identifier les points forts et faibles
    strong_skills = [cc for cc in consultant_competences if cc.niveau >= 4]
    weak_skills = [cc for cc in consultant_competences if cc.niveau <= 2]

    if strong_skills:
        st.success(f"‚úÖ **Points forts :** {len(strong_skills)} comp√©tence(s) de haut niveau")

    if weak_skills:
        st.warning(f"‚ö†Ô∏è **√Ä d√©velopper :** {len(weak_skills)} comp√©tence(s) √† renforcer")

    # Certifications
    certified_count = sum(1 for cc in consultant_competences if cc.certification)
    if certified_count > 0:
        st.info(f"üìú **Certifications :** {certified_count} comp√©tence(s) certifi√©e(s)")


def show_skills_evolution(consultant_id: int):
    """Affiche l'√©volution des comp√©tences dans le temps"""

    st.markdown("### üìà √âvolution des comp√©tences")

    try:
        with get_database_session() as session:
            # R√©cup√©rer l'historique des comp√©tences (bas√© sur les dates d'acquisition)
            consultant_competences = (
                session.query(ConsultantCompetence)
                .join(Competence)
                .filter(ConsultantCompetence.consultant_id == consultant_id)
                .order_by(ConsultantCompetence.date_ajout)
                .all()
            )

        if not consultant_competences:
            st.info("‚ÑπÔ∏è Aucune donn√©e d'√©volution disponible")
            return

        # Grouper par ann√©e
        evolution_data = {}
        for cc in consultant_competences:
            if cc.date_acquisition:
                year = cc.date_acquisition.year
                if year not in evolution_data:
                    evolution_data[year] = []
                evolution_data[year].append(cc)

        # Afficher l'√©volution
        for year in sorted(evolution_data.keys()):
            st.markdown(f"#### üìÖ {year}")
            skills = evolution_data[year]

            for skill in skills:
                col1, col2, col3 = st.columns([3, 2, 2])

                with col1:
                    st.write(f"**{skill.competence.nom}**")

                with col2:
                    st.write(f"Niveau {skill.niveau}")

                with col3:
                    if skill.date_acquisition:
                        st.write(skill.date_acquisition.strftime("%d/%m"))

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse de l'√©volution: {e}")
