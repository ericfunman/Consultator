
"""
Widget de s√©lection de technologies avec r√©f√©rentiel
"""
import streamlit as st
import sys
import os
from typing import List
from services.technology_service import TechnologyService
sys.path.append(os.path.dirname(os.path.dirname(__file__)))


def technology_multiselect(label: str, current_technologies: str = "", key: str = None, help_text: str = None) -> str:
    """
    Widget de s√©lection multiple de technologies avec possibilit√© d'ajout

    Args:
        label: Label du widget
        current_technologies: Technologies actuelles (cha√Æne s√©par√©e par des virgules)
        key: Cl√© unique pour le widget
        help_text: Texte d'aide

    Returns:
        String des technologies s√©lectionn√©es s√©par√©es par des virgules
    """

    # R√©cup√©rer toutes les technologies disponibles
    all_techs = TechnologyService.get_all_available_technologies()

    # Parser les technologies actuelles
    current_techs = []
    if current_technologies:
        current_techs_raw = [tech.strip() for tech in current_technologies.split(',') if tech.strip()]

        # Matcher les technologies actuelles avec celles disponibles (insensible √† la casse)
        all_techs_lower = {tech.lower(): tech for tech in all_techs}

        for tech in current_techs_raw:
            # Chercher une correspondance exacte d'abord
            if tech in all_techs:
                current_techs.append(tech)
            # Sinon chercher une correspondance insensible √† la casse
            elif tech.lower() in all_techs_lower:
                current_techs.append(all_techs_lower[tech.lower()])
            # Si pas de correspondance, ajouter la technologie personnalis√©e
            else:
                # Ajouter automatiquement comme technologie personnalis√©e
                if TechnologyService.add_custom_technology(tech, "Personnalis√©es"):
                    current_techs.append(tech)
                    # Recharger la liste des technologies
                    all_techs = TechnologyService.get_all_available_technologies()
    
    # Colonnes pour le layout
    col_main, col_add = st.columns([4, 1])
    with col_main:
        # Multiselect principal - s'assurer que les valeurs par d√©faut sont dans les options
        valid_current_techs = [tech for tech in current_techs if tech in all_techs]

        selected_techs = st.multiselect(
            label,
            options=all_techs,
            default=valid_current_techs,
            key=key,
            help=help_text or "S√©lectionnez les technologies utilis√©es"
        )
        def show_technologies_referentiel():
            """Page de gestion du r√©f√©rentiel de technologies"""
        st.markdown("<br>", unsafe_allow_html=True)  # Espacement
        if st.button("‚ûï Ajouter", key=f"{key}_add_btn" if key else "add_tech_btn"):
            st.session_state[f'show_add_tech_{key}'] = True

    # Formulaire d'ajout de technologie personnalis√©e
    if st.session_state.get(f'show_add_tech_{key}', False):
        with st.expander("‚ûï Ajouter une technologie personnalis√©e", expanded=True):
            new_tech_name = st.text_input("Nom de la technologie", key=f"{key}_new_tech_name")
            new_tech_category = st.selectbox(
                "Cat√©gorie",
                [
                    "Personnalis√©es",
                    "Langages de programmation",
                    "Frameworks Web",
                    "Bases de donn√©es",
                    "Cloud & DevOps",
                    "Intelligence Artificielle & Data Science",
                    "Mobile",
                    "Outils de d√©veloppement",
                    "Architecture & Design",
                    "S√©curit√©",
                    "Syst√®mes d'exploitation",
                    "M√©thodologies"
                ],
                key=f"{key}_new_tech_cat"
            )
            col_add_btn, col_cancel_btn = st.columns(2)
            with col_add_btn:
                if st.button("Ajouter", key=f"{key}_confirm_add", type="primary"):
                    if new_tech_name:
                        if TechnologyService.add_custom_technology(new_tech_name, new_tech_category):
                            st.success(f"‚úÖ Technologie '{new_tech_name}' ajout√©e !")
                            st.session_state[f'show_add_tech_{key}'] = False
                            st.rerun()
                        else:
                            st.error("‚ùå Cette technologie existe d√©j√†")
                    else:
                        st.error("‚ùå Veuillez saisir le nom de la technologie")
            with col_cancel_btn:
                if st.button("Annuler", key=f"{key}_cancel_add"):
                    st.session_state[f'show_add_tech_{key}'] = False
                    st.rerun()

    # Retourner la cha√Æne des technologies s√©lectionn√©es
    return ', '.join(selected_techs)


  
def show_technologies_referentiel():
    """Page de gestion du r√©f√©rentiel de technologies"""
    st.subheader("üõ†Ô∏è R√©f√©rentiel des Technologies")
    tab1, tab2 = st.tabs(["üìã Technologies disponibles", "‚ûï G√©rer les technologies personnalis√©es"])
    with tab1:
        # Affichage du r√©f√©rentiel par cat√©gorie
        technologies_by_cat = TechnologyService.get_technologies_by_category()
        search_query = st.text_input("üîç Rechercher une technologie", placeholder="Ex: Python, React, Docker...")
        if search_query:
            # Recherche
            found_techs = TechnologyService.search_technologies(search_query)
            st.write(f"**{len(found_techs)} technologie(s) trouv√©e(s):**")
            # Afficher en colonnes
            cols = st.columns(3)
            for i, tech in enumerate(found_techs):
                with cols[i % 3]:
                    st.write(f"‚Ä¢ {tech}")
        else:
            # Affichage par cat√©gorie
            for category, techs in technologies_by_cat.items():
                with st.expander(f"üìÇ {category} ({len(techs)} technologies)"):
                    # Afficher en colonnes
                    cols = st.columns(3)
                    for i, tech in enumerate(techs):
                        with cols[i % 3]:
                            st.write(f"‚Ä¢ {tech}")
    with tab2:
        # Gestion des technologies personnalis√©es
        st.markdown("### ‚ûï Ajouter une technologie personnalis√©e")
        with st.form("add_custom_tech_form"):
            tech_name = st.text_input("Nom de la technologie")
            tech_category = st.selectbox(
                "Cat√©gorie",
                [
                    "Personnalis√©es",
                    "Langages de programmation",
                    "Frameworks Web",
                    "Bases de donn√©es",
                    "Cloud & DevOps",
                    "Intelligence Artificielle & Data Science",
                    "Mobile",
                    "Outils de d√©veloppement",
                    "Architecture & Design",
                    "S√©curit√©",
                    "Syst√®mes d'exploitation",
                    "M√©thodologies"
                ]
            )
            st.text_area("Description (optionnel)")
            if st.form_submit_button("‚ûï Ajouter la technologie", type="primary"):
                if tech_name:
                    if TechnologyService.add_custom_technology(tech_name, tech_category):
                        st.success(f"‚úÖ Technologie '{tech_name}' ajout√©e avec succ√®s !")
                        st.rerun()
                    else:
                        st.error("‚ùå Cette technologie existe d√©j√†")
                else:
                    st.error("‚ùå Veuillez saisir le nom de la technologie")
        # Liste des technologies personnalis√©es
        st.markdown("---")
        st.markdown("### üìã Technologies personnalis√©es existantes")
        custom_techs = TechnologyService.get_custom_technologies()
        if custom_techs:
            for tech in custom_techs:
                col1, col2, col3 = st.columns([3, 2, 1])
                with col1:
                    st.write(f"**{tech['nom']}**")
                with col2:
                    st.write(f"*{tech['categorie']}*")
                with col3:
                    if st.button("üóëÔ∏è", key=f"del_{tech['id']}", help="Supprimer"):
                        if TechnologyService.delete_custom_technology(tech['id']):
                            st.success("‚úÖ Technologie supprim√©e !")
                            st.rerun()
        else:
            st.info("üìù Aucune technologie personnalis√©e ajout√©e")
