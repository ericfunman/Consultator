"""
Hooks pour l'ex√©cution automatique des tests de non-r√©gression

Ce module contient des hooks Git pour ex√©cuter automatiquement
les tests de non-r√©gression lors des commits/push.
"""

import subprocess
import sys
import os
from pathlib import Path


def get_venv_python():
    """Retourne le chemin vers le Python du venv .venv_clean"""
    venv_python = Path(__file__).parent.parent / ".venv_clean" / "Scripts" / "python.exe"
    if venv_python.exists():
        return str(venv_python)
    # Fallback sur sys.executable si venv non trouv√©
    return sys.executable


def run_regression_tests_on_changed_files():
    """
    Ex√©cute les tests de non-r√©gression sur les fichiers modifi√©s
    """
    try:
        # R√©cup√®re les fichiers modifi√©s
        result = subprocess.run(
            ['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'],
            capture_output=True, text=True, check=True
        )
        
        changed_files = result.stdout.strip().split('\n')
        python_files = [f for f in changed_files if f.endswith('.py') and 'test' not in f]
        
        if not python_files:
            print("‚úÖ Aucun fichier Python modifi√©, pas de tests de r√©gression n√©cessaires")
            return True
        
        print(f"üìä Fichiers Python modifi√©s : {len(python_files)}")
        for file in python_files:
            print(f"  - {file}")
        
        # G√©n√®re les tests de r√©gression
        print("\nüîß G√©n√©ration des tests de r√©gression...")
        python_exe = get_venv_python()
        subprocess.run([
            python_exe, 'scripts/generate_regression_tests.py',
            '--files'] + python_files,
            check=True
        )
        
        # Ex√©cute les tests de r√©gression
        print("\nüß™ Ex√©cution des tests de r√©gression...")
        test_result = subprocess.run([
            python_exe, '-m', 'pytest',
            'tests/regression/',
            '-v', '--tb=short',
            '--cov=app',
            '--cov-report=term-missing'
        ], check=False)
        
        if test_result.returncode != 0:
            print("‚ùå Tests de r√©gression √©chou√©s")
            return False
        
        print("‚úÖ Tests de r√©gression r√©ussis")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")
        return False


def pre_commit_hook():
    """Hook de pr√©-commit pour les tests de r√©gression"""
    print("üîç Ex√©cution du hook de pr√©-commit...")
    
    # V√©rifie si les tests passent
    if not run_regression_tests_on_changed_files():
        print("\n‚ùå COMMIT BLOQU√â : Les tests de r√©gression ont √©chou√©")
        print("Corrigez les erreurs avant de commiter")
        sys.exit(1)
    
    print("\n‚úÖ Hook de pr√©-commit r√©ussi")


def post_merge_hook():
    """Hook post-merge pour v√©rifier l'int√©grit√© apr√®s un merge"""
    print("üîÑ Ex√©cution du hook post-merge...")
    
    # Ex√©cute tous les tests de r√©gression
    python_exe = get_venv_python()
    test_result = subprocess.run([
        python_exe, '-m', 'pytest',
        'tests/regression/',
        '-v',
        '--cov=app',
        '--cov-report=html:reports/htmlcov',
        '--html=reports/regression_report.html'
    ], check=False)
    
    if test_result.returncode != 0:
        print("‚ö†Ô∏è  Attention : Certains tests de r√©gression ont √©chou√© apr√®s le merge")
        print("V√©rifiez les rapports dans le dossier 'reports/'")
    else:
        print("‚úÖ Tous les tests de r√©gression passent apr√®s le merge")


def setup_git_hooks():
    """Configure les hooks Git pour le projet"""
    hooks_dir = Path('.git/hooks')
    
    # Hook pr√©-commit
    pre_commit_path = hooks_dir / 'pre-commit'
    pre_commit_content = '''#!/usr/bin/env python3
import sys
sys.path.insert(0, '.')
from scripts.test_hooks import pre_commit_hook
pre_commit_hook()
'''
    
    with open(pre_commit_path, 'w') as f:
        f.write(pre_commit_content)
    pre_commit_path.chmod(0o755)
    
    # Hook post-merge  
    post_merge_path = hooks_dir / 'post-merge'
    post_merge_content = '''#!/usr/bin/env python3
import sys
sys.path.insert(0, '.')
from scripts.test_hooks import post_merge_hook
post_merge_hook()
'''
    
    with open(post_merge_path, 'w') as f:
        f.write(post_merge_content)
    post_merge_path.chmod(0o755)
    
    print("‚úÖ Hooks Git configur√©s:")
    print(f"  - {pre_commit_path}")
    print(f"  - {post_merge_path}")


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Hooks de tests de r√©gression')
    parser.add_argument('--setup', action='store_true', help='Configure les hooks Git')
    parser.add_argument('--pre-commit', action='store_true', help='Ex√©cute le hook pr√©-commit')
    parser.add_argument('--post-merge', action='store_true', help='Ex√©cute le hook post-merge')
    parser.add_argument('--check', action='store_true', help='V√©rifie les fichiers modifi√©s')
    
    args = parser.parse_args()
    
    if args.setup:
        setup_git_hooks()
    elif args.pre_commit:
        pre_commit_hook()
    elif args.post_merge:
        post_merge_hook()
    elif args.check:
        run_regression_tests_on_changed_files()
    else:
        parser.print_help()