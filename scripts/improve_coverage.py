"""
Strategy d'am√©lioration syst√©matique de la couverture de tests

Ce script analyse la couverture de tests actuelle et propose un plan
d'am√©lioration cibl√© avec priorit√©s.
"""

import subprocess
import json
import re
import sys
from pathlib import Path
from typing import Dict, List, Tuple


class CoverageAnalyzer:
    def __init__(self):
        self.coverage_data = {}
        self.uncovered_files = []
        self.critical_files = [
            'app/services/consultant_service.py',
            'app/services/mission_service.py',
            'app/services/competence_service.py',
            'app/database/models.py',
            'app/pages/gestion_consultants.py',
            'app/pages/gestion_missions.py',
            'import_vsa_missions_complet.py'
        ]

    def run_coverage_analysis(self) -> Dict:
        """Ex√©cute une analyse compl√®te de couverture"""
        print("üîç Analyse de couverture en cours...")
        
        try:
            # G√©n√®re le rapport de couverture JSON
            result = subprocess.run([
                sys.executable, '-m', 'pytest',
                '--cov=app',
                '--cov-report=json:coverage.json',
                '--cov-report=term-missing',
                '--cov-fail-under=0',  # Ne pas √©chouer sur la couverture faible
                'tests/'
            ], capture_output=True, text=True, check=False)
            
            # Lit les donn√©es de couverture
            if Path('coverage.json').exists():
                with open('coverage.json', 'r') as f:
                    self.coverage_data = json.load(f)
            
            return self.analyze_coverage_gaps()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse : {e}")
            return {}

    def analyze_coverage_gaps(self) -> Dict:
        """Analyse les lacunes de couverture par priorit√©"""
        analysis = {
            'summary': {
                'total_coverage': 0,
                'files_analyzed': 0,
                'critical_files_coverage': 0
            },
            'priorities': {
                'critical': [],
                'high': [],
                'medium': [],
                'low': []
            },
            'recommendations': []
        }
        
        if not self.coverage_data:
            return analysis
        
        files = self.coverage_data.get('files', {})
        analysis['summary']['total_coverage'] = self.coverage_data.get('totals', {}).get('percent_covered', 0)
        analysis['summary']['files_analyzed'] = len(files)
        
        # Analyse par fichier
        for file_path, file_data in files.items():
            coverage = file_data.get('summary', {}).get('percent_covered', 0)
            missing_lines = file_data.get('missing_lines', [])
            
            file_info = {
                'file': file_path,
                'coverage': coverage,
                'missing_lines': len(missing_lines),
                'missing_line_numbers': missing_lines[:10]  # Limite √† 10 lignes
            }
            
            # Cat√©gorisation par priorit√©
            if file_path in self.critical_files:
                if coverage < 70:
                    analysis['priorities']['critical'].append(file_info)
                elif coverage < 90:
                    analysis['priorities']['high'].append(file_info)
            elif 'service' in file_path.lower():
                if coverage < 80:
                    analysis['priorities']['high'].append(file_info)
                else:
                    analysis['priorities']['medium'].append(file_info)
            elif 'pages' in file_path.lower():
                if coverage < 60:
                    analysis['priorities']['medium'].append(file_info)
                else:
                    analysis['priorities']['low'].append(file_info)
            else:
                if coverage < 50:
                    analysis['priorities']['medium'].append(file_info)
                else:
                    analysis['priorities']['low'].append(file_info)
        
        # Calcul de la couverture des fichiers critiques
        critical_coverages = [
            files.get(f, {}).get('summary', {}).get('percent_covered', 0)
            for f in self.critical_files if f in files
        ]
        if critical_coverages:
            analysis['summary']['critical_files_coverage'] = sum(critical_coverages) / len(critical_coverages)
        
        # G√©n√©ration de recommandations
        analysis['recommendations'] = self.generate_recommendations(analysis)
        
        return analysis

    def generate_recommendations(self, analysis: Dict) -> List[Dict]:
        """G√©n√®re des recommandations d'am√©lioration"""
        recommendations = []
        
        # Recommandations critiques
        if analysis['priorities']['critical']:
            recommendations.append({
                'priority': 'CRITIQUE',
                'title': 'Fichiers critiques sous-test√©s',
                'description': f"{len(analysis['priorities']['critical'])} fichiers critiques ont moins de 70% de couverture",
                'action': 'Cr√©er des tests complets pour ces fichiers imm√©diatement',
                'files': [f['file'] for f in analysis['priorities']['critical'][:5]]
            })
        
        # Recommandations services
        high_priority_services = [
            f for f in analysis['priorities']['high'] 
            if 'service' in f['file'].lower()
        ]
        if high_priority_services:
            recommendations.append({
                'priority': 'HAUTE',
                'title': 'Services m√©tier insuffisamment test√©s',
                'description': f"{len(high_priority_services)} services ont moins de 80% de couverture",
                'action': 'Impl√©menter des tests unitaires et d\'int√©gration',
                'files': [f['file'] for f in high_priority_services[:3]]
            })
        
        # Recommandations pages
        medium_priority_pages = [
            f for f in analysis['priorities']['medium'] 
            if 'pages' in f['file'].lower()
        ]
        if medium_priority_pages:
            recommendations.append({
                'priority': 'MOYENNE',
                'title': 'Interfaces utilisateur partiellement test√©es',
                'description': f"{len(medium_priority_pages)} pages ont moins de 60% de couverture",
                'action': 'D√©velopper des tests UI et de workflow',
                'files': [f['file'] for f in medium_priority_pages[:3]]
            })
        
        # Recommandation g√©n√©rale
        if analysis['summary']['total_coverage'] < 50:
            recommendations.append({
                'priority': 'G√âN√âRALE',
                'title': 'Couverture globale insuffisante',
                'description': f"Couverture globale de {analysis['summary']['total_coverage']:.1f}% (objectif: 80%)",
                'action': 'Plan d\'am√©lioration progressive sur 4 sprints',
                'files': []
            })
        
        return recommendations

    def generate_test_plan(self, analysis: Dict) -> str:
        """G√©n√®re un plan de tests structur√©"""
        plan = """
# üìã Plan d'am√©lioration de la couverture de tests

## üìä √âtat actuel
- **Couverture globale**: {total_coverage:.1f}%
- **Fichiers analys√©s**: {files_analyzed}
- **Couverture fichiers critiques**: {critical_coverage:.1f}%

## üéØ Objectifs
- **Sprint 1**: Atteindre 50% de couverture globale
- **Sprint 2**: Atteindre 65% de couverture globale  
- **Sprint 3**: Atteindre 80% de couverture globale
- **Sprint 4**: Optimisation et stabilisation

## ‚ö° Actions prioritaires

### üî¥ Critique (√Ä faire imm√©diatement)
""".format(
            total_coverage=analysis['summary']['total_coverage'],
            files_analyzed=analysis['summary']['files_analyzed'],
            critical_coverage=analysis['summary']['critical_files_coverage']
        )
        
        for item in analysis['priorities']['critical'][:3]:
            plan += f"- **{item['file']}** ({item['coverage']:.1f}% couverture)\n"
            plan += f"  - {item['missing_lines']} lignes non test√©es\n"
            plan += f"  - Lignes: {item['missing_line_numbers']}\n\n"
        
        plan += """
### üü° Haute priorit√© (Sprint 1-2)
"""
        for item in analysis['priorities']['high'][:3]:
            plan += f"- **{item['file']}** ({item['coverage']:.1f}% couverture)\n"
        
        plan += """
### üü¢ Priorit√© moyenne (Sprint 2-3)
"""
        for item in analysis['priorities']['medium'][:3]:
            plan += f"- **{item['file']}** ({item['coverage']:.1f}% couverture)\n"
        
        plan += """
## üõ†Ô∏è Strat√©gies de tests recommand√©es

### Pour les services (app/services/)
```python
# Tests unitaires avec mocking
def test_service_method_success():
    # Given
    mock_data = create_mock_data()
    
    # When  
    result = service.method(mock_data)
    
    # Then
    assert result.is_success
    assert len(result.data) > 0

# Tests d'int√©gration avec base de donn√©es
def test_service_integration():
    # Given
    db_session = create_test_session()
    
    # When
    result = service.create_entity(valid_data)
    
    # Then
    assert result.id is not None
    db_session.rollback()
```

### Pour les pages (app/pages/)
```python
# Tests de workflow utilisateur
def test_page_workflow():
    # Simulate user input
    with patch('streamlit.form_submit_button', return_value=True):
        result = page.process_form(test_data)
        assert result.success

# Tests des composants UI
def test_ui_components():
    with patch('streamlit.columns') as mock_columns:
        page.show_data_table(test_data)
        mock_columns.assert_called()
```

## üìà M√©triques de suivi
- Couverture par cat√©gorie de fichiers
- Nombre de tests par module  
- Temps d'ex√©cution des tests
- Ratio tests/code de production

## üîÑ Processus d'am√©lioration continue
1. **Analyse hebdomadaire** de la couverture
2. **Tests de r√©gression** automatiques √† chaque commit
3. **Revue de code** incluant la validation des tests
4. **Refactoring** des tests obsol√®tes ou redondants
"""
        
        return plan

    def create_test_templates(self, analysis: Dict):
        """Cr√©e des templates de tests pour les fichiers prioritaires"""
        templates_dir = Path('tests/templates')
        templates_dir.mkdir(exist_ok=True)
        
        # Template pour services
        service_template = '''"""
Tests pour {filename}
G√©n√©r√© automatiquement - √Ä adapter selon les besoins
"""

import pytest
from unittest.mock import Mock, patch
from {import_path} import {class_name}


class Test{class_name}:
    """Tests unitaires pour {class_name}"""
    
    def setup_method(self):
        """Setup avant chaque test"""
        self.service = {class_name}()
        
    def test_init(self):
        """Test d'initialisation"""
        assert self.service is not None
        
    # TODO: Ajouter les tests sp√©cifiques aux m√©thodes
    
    @pytest.mark.parametrize("input_data,expected", [
        ({"valid": True}, True),
        ({"valid": False}, False),
    ])
    def test_validation(self, input_data, expected):
        """Tests param√©tr√©s de validation"""
        # TODO: Impl√©menter selon la logique m√©tier
        pass
        
    def test_error_handling(self):
        """Test de gestion d'erreurs"""  
        # TODO: Tester les cas d'erreur
        pass

    @patch('app.database.get_session')
    def test_database_interaction(self, mock_session):
        """Test d'interaction avec la base de donn√©es"""
        # TODO: Tester les op√©rations DB
        pass
'''

        # G√©n√®re des templates pour les fichiers critiques
        for item in analysis['priorities']['critical'][:3]:
            file_path = item['file']
            if 'service' in file_path.lower():
                # Extrait le nom de classe du fichier
                filename = Path(file_path).stem
                class_name = ''.join(word.capitalize() for word in filename.split('_'))
                import_path = file_path.replace('/', '.').replace('.py', '')
                
                template_content = service_template.format(
                    filename=filename,
                    class_name=class_name,
                    import_path=import_path
                )
                
                template_file = templates_dir / f'test_{filename}_template.py'
                with open(template_file, 'w', encoding='utf-8') as f:
                    f.write(template_content)
                
                print(f"üìù Template cr√©√© : {template_file}")

    def print_analysis_report(self, analysis: Dict):
        """Affiche un rapport d'analyse d√©taill√©"""
        print("\n" + "="*60)
        print("üìä RAPPORT D'ANALYSE DE COUVERTURE")
        print("="*60)
        
        # R√©sum√©
        summary = analysis['summary']
        print(f"\nüìà R√âSUM√â:")
        print(f"  Couverture globale: {summary['total_coverage']:.1f}%")
        print(f"  Fichiers analys√©s: {summary['files_analyzed']}")
        print(f"  Couverture fichiers critiques: {summary['critical_files_coverage']:.1f}%")
        
        # Priorit√©s
        priorities = analysis['priorities']
        print(f"\n‚ö° PRIORIT√âS:")
        print(f"  üî¥ Critique: {len(priorities['critical'])} fichiers")
        print(f"  üü° Haute: {len(priorities['high'])} fichiers") 
        print(f"  üü¢ Moyenne: {len(priorities['medium'])} fichiers")
        print(f"  üîµ Faible: {len(priorities['low'])} fichiers")
        
        # Top 5 des fichiers critiques
        if priorities['critical']:
            print(f"\nüö® TOP 5 FICHIERS CRITIQUES:")
            for i, item in enumerate(priorities['critical'][:5], 1):
                print(f"  {i}. {item['file']} - {item['coverage']:.1f}% ({item['missing_lines']} lignes)")
        
        # Recommandations
        if analysis['recommendations']:
            print(f"\nüí° RECOMMANDATIONS:")
            for i, rec in enumerate(analysis['recommendations'], 1):
                print(f"  {i}. [{rec['priority']}] {rec['title']}")
                print(f"     {rec['description']}")
                if rec['files']:
                    print(f"     Fichiers: {', '.join(rec['files'][:2])}...")
                print()


def main():
    """Fonction principale d'am√©lioration de couverture"""
    print("üöÄ SYST√àME D'AM√âLIORATION DE COUVERTURE DE TESTS")
    print("="*50)
    
    analyzer = CoverageAnalyzer()
    
    # Analyse la couverture
    analysis = analyzer.run_coverage_analysis()
    
    if not analysis:
        print("‚ùå Impossible d'analyser la couverture")
        return
    
    # Affiche le rapport
    analyzer.print_analysis_report(analysis)
    
    # G√©n√®re le plan d'am√©lioration
    test_plan = analyzer.generate_test_plan(analysis)
    
    # Sauvegarde le plan
    plan_file = Path('TEST_IMPROVEMENT_PLAN.md')
    with open(plan_file, 'w', encoding='utf-8') as f:
        f.write(test_plan)
    
    print(f"üìã Plan d'am√©lioration sauvegard√© : {plan_file}")
    
    # Cr√©e les templates de tests
    analyzer.create_test_templates(analysis)
    
    print("\n‚úÖ Analyse termin√©e. Consultez TEST_IMPROVEMENT_PLAN.md pour les prochaines √©tapes.")


if __name__ == '__main__':
    main()