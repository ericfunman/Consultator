"""
Script d'import Excel vers base de donn√©es Consultants
Mapping des colonnes Excel vers le mod√®le Consultant
"""

from datetime import date
from datetime import datetime

import pandas as pd

from database.database import get_database_session
from database.models import Consultant
from database.models import Practice


def analyze_excel_file():
    """Analyse le fichier Excel et affiche la structure"""
    print("üìã ANALYSE DU FICHIER EXCEL")
    print("=" * 50)

    try:
        # Lire le fichier Excel
        excel_file = pd.ExcelFile("Data Quanteam 1 ligne.xlsx")  # noqa: F841
        df = pd.read_excel("Data Quanteam 1 ligne.xlsx", sheet_name="Consultant")

        print(f"üìä Nombre de lignes: {len(df)}")
        print(f"üìä Nombre de colonnes: {len(df.columns)}")
        print()

        print("üîç Colonnes Excel d√©tect√©es:")
        for i, col in enumerate(df.columns, 1):
            sample_value = df[col].iloc[0] if len(df) > 0 else "N/A"
            print(f"  {i:2d}. {col:<20} | Exemple: {sample_value}")

        print()
        print("üëÅÔ∏è Aper√ßu des donn√©es:")
        print(df.head(3).to_string(max_cols=6))

        return df

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None


def get_mapping_proposal():
    """Propose un mapping entre colonnes Excel et champs DB"""

    mapping = {
        # MAPPING EXCEL -> BASE DE DONN√âES
        # Format: "Colonne Excel": "champ_db"
        # ‚úÖ CORRESPONDANCES DIRECTES
        "Prenom": "prenom",
        "Nom": "nom",
        "email": "email",
        "Num Telephonne": "telephone",  # Note: typo dans Excel
        "Soci√©t√©": "societe",
        "Date Entree Soci√©t√©": "date_entree_societe",
        "Date Sortie soci√©t√©": "date_sortie_societe",
        "Date de naissance": None,  # Pas de champ correspondant en DB
        # üîÑ CORRESPONDANCES AVEC TRANSFORMATION
        "CJM": "salaire_actuel",  # CJM = Co√ªt Journalier Moyen
        "Salaire": None,  # Doublon avec CJM, on garde CJM
        "contract_type_code": "type_contrat",  # CDI/CDD/etc.
        "UseActive": "disponibilite",  # Active/Inactive -> Boolean
        # ‚ö†Ô∏è CHAMPS DB NON FOURNIS DANS EXCEL
        # Ces champs devront √™tre d√©finis par d√©faut:
        # - grade (d√©faut: 'Junior')
        # - practice_id (d√©faut: None ou Practice par d√©faut)
        # - date_premiere_mission (d√©faut: None)
        # - notes (d√©faut: None)
    }

    return mapping


def show_mapping_proposal():
    """Affiche le mapping propos√© de mani√®re claire"""

    print("\nüéØ PROPOSITION DE MAPPING")
    print("=" * 50)

    mapping = get_mapping_proposal()

    print("‚úÖ CORRESPONDANCES DIRECTES:")
    for excel_col, db_field in mapping.items():
        if db_field and not excel_col.startswith("~"):
            print(f"  üìã {excel_col:<25} ‚Üí {db_field}")

    print("\nüîÑ CORRESPONDANCES AVEC TRANSFORMATION:")
    transformations = {
        "CJM": "salaire_actuel (CJM = Co√ªt Journalier Moyen)",
        "contract_type_code": "type_contrat (CDI/CDD/Stagiaire/etc.)",
        "UseActive": "disponibilite (Active ‚Üí True, Inactive ‚Üí False)",
    }

    for excel_col, description in transformations.items():
        print(f"  üîÑ {excel_col:<25} ‚Üí {description}")

    print("\n‚ö†Ô∏è COLONNES EXCEL NON UTILIS√âES:")
    unused = ["Salaire", "Date de naissance"]
    for col in unused:
        print(f"  ‚ùå {col:<25} ‚Üí (ignor√©e)")

    print("\nüÜï CHAMPS DB AVEC VALEURS PAR D√âFAUT:")
    defaults = {
        "grade": "'Junior'",
        "practice_id": "None (√† assigner ult√©rieurement)",
        "date_premiere_mission": "None",
        "notes": "None",
        "date_creation": "datetime.now()",
        "derniere_maj": "datetime.now()",
    }

    for field, default_value in defaults.items():
        print(f"  üÜï {field:<25} ‚Üí {default_value}")


def create_import_function():
    """G√©n√®re la fonction d'import bas√©e sur le mapping"""

    print("\nüìù FONCTION D'IMPORT G√âN√âR√âE:")
    print("=" * 50)

    import_code = '''
def import_consultants_from_excel(excel_file_path='Data Quanteam 1 ligne.xlsx'):
    """
    Importe les consultants depuis le fichier Excel vers la base de donn√©es

    Args:
        excel_file_path: Chemin vers le fichier Excel

    Returns:
        dict: R√©sultats de l'import (succ√®s, erreurs, statistiques)
    """

    results = {
        "total_lignes": 0,
        "importes": 0,
        "erreurs": [],
        "doublons": 0
    }

    try:
        # Lire le fichier Excel
        df = pd.read_excel(excel_file_path, sheet_name='Consultant')
        results["total_lignes"] = len(df)

        session = get_database_session()

        for index, row in df.iterrows():
            try:
                # V√©rifier si le consultant existe d√©j√† (par email)
                existing = session.query(Consultant).filter_by(email=row['email']).first()
                if existing:
                    results["doublons"] += 1
                    print(f"‚ö†Ô∏è  Consultant {row['Prenom']} {row['Nom']} d√©j√† existant (email: {row['email']})")
                    continue

                # Cr√©er nouveau consultant
                consultant = Consultant(
                    # Correspondances directes
                    prenom=str(row['Prenom']).strip(),
                    nom=str(row['Nom']).strip(),
                    email=str(row['email']).strip(),
                    telephone=str(row['Num Telephonne']) if pd.notna(row['Num Telephonne']) else None,
                    societe=str(row['Soci√©t√©']).strip() if pd.notna(row['Soci√©t√©']) else 'Quanteam',

                    # Transformations
                    salaire_actuel=float(row['CJM']) if pd.notna(row['CJM']) else None,
                    type_contrat=str(row['contract_type_code']).strip() if pd.notna(row['contract_type_code']) else 'CDI',
                    disponibilite=str(row['UseActive']).strip().lower() == 'active' if pd.notna(row['UseActive']) else True,

                    # Dates avec gestion des erreurs
                    date_entree_societe=pd.to_datetime(row['Date Entree Soci√©t√©']).date() if pd.notna(row['Date Entree Soci√©t√©']) else None,
                    date_sortie_societe=pd.to_datetime(row['Date Sortie soci√©t√©']).date() if pd.notna(row['Date Sortie soci√©t√©']) else None,

                    # Valeurs par d√©faut
                    grade='Junior',
                    practice_id=None,  # √Ä assigner manuellement plus tard
                    date_premiere_mission=None,
                    notes=f"Import√© depuis Excel le {datetime.now().strftime('%d/%m/%Y')}"
                )

                session.add(consultant)
                results["importes"] += 1
                print(f"‚úÖ {consultant.prenom} {consultant.nom} import√© avec succ√®s")

            except Exception as e:
                error_msg = f"Ligne {index + 2}: {str(e)}"
                results["erreurs"].append(error_msg)
                print(f"‚ùå Erreur ligne {index + 2}: {e}")

        # Sauvegarder en base
        session.commit()
        session.close()

        return results

    except Exception as e:
        results["erreurs"].append(f"Erreur globale: {str(e)}")
        return results


def show_import_summary(results):
    """Affiche un r√©sum√© de l'import"""
    print("\\nüìä R√âSUM√â DE L'IMPORT")
    print("=" * 30)
    print(f"üìã Total lignes trait√©es: {results['total_lignes']}")
    print(f"‚úÖ Consultants import√©s: {results['importes']}")
    print(f"‚ö†Ô∏è  Doublons ignor√©s: {results['doublons']}")
    print(f"‚ùå Erreurs: {len(results['erreurs'])}")

    if results['erreurs']:
        print("\\nüîç D√©tail des erreurs:")
        for error in results['erreurs']:
            print(f"  ‚Ä¢ {error}")


# UTILISATION:
# results = import_consultants_from_excel()
# show_import_summary(results)
'''

    print(import_code)

    return import_code


if __name__ == "__main__":
    # Analyser le fichier
    df = analyze_excel_file()

    if df is not None:
        # Proposer le mapping
        show_mapping_proposal()

        # G√©n√©rer la fonction d'import
        create_import_function()

        print("\nüéØ PROCHAINES √âTAPES:")
        print("1. V√©rifier le mapping propos√©")
        print("2. Adapter si n√©cessaire")
        print("3. Ex√©cuter l'import avec: import_consultants_from_excel()")
        print("4. Assigner les practices manuellement apr√®s import")
