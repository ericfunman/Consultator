"""
Script de g√©n√©ration de donn√©es de test pour valider les performances
G√©n√®re 1000 consultants avec 2000 documents et 10000 missions minimum
"""

import os
import random
import sys
from datetime import date
from datetime import datetime
from datetime import timedelta

from faker import Faker

# Ajouter le dossier app au path
sys.path.append(os.path.join(os.path.dirname(__file__), "app"))

from database.database import get_database_session
from database.database import init_database
from database.models import CV
from database.models import BusinessManager
from database.models import Competence
from database.models import Consultant
from database.models import ConsultantBusinessManager
from database.models import ConsultantCompetence
from database.models import Mission
from database.models import Practice

fake = Faker("fr_FR")

# Listes de donn√©es r√©alistes
PRACTICES = [
    ("Data Engineering", "Practice sp√©cialis√©e en ing√©nierie de donn√©es"),
    ("Data Science", "Practice d'analyse et science des donn√©es"),
    ("Cloud & DevOps", "Practice cloud et automatisation"),
    ("Frontend Development", "Practice d√©veloppement front-end"),
    ("Backend Development", "Practice d√©veloppement back-end"),
    ("Cybers√©curit√©", "Practice s√©curit√© informatique"),
    ("Consultation M√©tier", "Practice conseil fonctionnel"),
    ("Architecture IT", "Practice architecture technique"),
]

COMPETENCES_TECHNIQUES = [
    ("Python", "Backend", "Langage de programmation"),
    ("Java", "Backend", "Langage de programmation"),
    ("JavaScript", "Frontend", "Langage de programmation"),
    ("TypeScript", "Frontend", "Langage de programmation"),
    ("React", "Frontend", "Framework frontend"),
    ("Angular", "Frontend", "Framework frontend"),
    ("Vue.js", "Frontend", "Framework frontend"),
    ("Spring Boot", "Backend", "Framework Java"),
    ("Django", "Backend", "Framework Python"),
    ("Flask", "Backend", "Framework Python"),
    ("Node.js", "Backend", "Runtime JavaScript"),
    ("PostgreSQL", "Database", "Base de donn√©es relationnelle"),
    ("MongoDB", "Database", "Base de donn√©es NoSQL"),
    ("Redis", "Database", "Cache et base de donn√©es"),
    ("Docker", "DevOps", "Conteneurisation"),
    ("Kubernetes", "DevOps", "Orchestration de conteneurs"),
    ("AWS", "Cloud", "Amazon Web Services"),
    ("Azure", "Cloud", "Microsoft Azure"),
    ("GCP", "Cloud", "Google Cloud Platform"),
    ("Terraform", "DevOps", "Infrastructure as Code"),
    ("Jenkins", "DevOps", "CI/CD"),
    ("GitLab CI", "DevOps", "CI/CD"),
    ("Apache Spark", "Data", "Traitement de donn√©es"),
    ("Apache Kafka", "Data", "Streaming de donn√©es"),
    ("Elasticsearch", "Data", "Moteur de recherche"),
    ("Tableau", "Data", "Visualisation de donn√©es"),
    ("Power BI", "Data", "Visualisation Microsoft"),
    ("Jupyter", "Data", "Notebooks de donn√©es"),
    ("TensorFlow", "AI/ML", "Machine Learning"),
    ("PyTorch", "AI/ML", "Deep Learning"),
    ("Scikit-learn", "AI/ML", "Machine Learning"),
]

COMPETENCES_FONCTIONNELLES = [
    ("Gestion de projet", "Management", "Pilotage de projets"),
    ("Scrum Master", "Methodologie", "Agilit√© Scrum"),
    ("Product Owner", "Methodologie", "Gestion produit"),
    ("Business Analysis", "Analyse", "Analyse m√©tier"),
    ("UX/UI Design", "Design", "Exp√©rience utilisateur"),
    ("Architecture Solution", "Architecture", "Conception solution"),
    ("Conseil Transformation", "Conseil", "Accompagnement changement"),
    ("Formation", "Conseil", "Transmission de comp√©tences"),
    ("Leadership", "Management", "Encadrement d'√©quipes"),
    ("Communication", "Soft Skills", "Communication interpersonnelle"),
]

CLIENTS = [
    "BNP Paribas",
    "Soci√©t√© G√©n√©rale",
    "Cr√©dit Agricole",
    "BPCE",
    "Cr√©dit Mutuel",
    "AXA",
    "Allianz",
    "Generali",
    "MAIF",
    "Groupama",
    "Orange",
    "SFR",
    "Bouygues Telecom",
    "Free",
    "EDF",
    "Engie",
    "TotalEnergies",
    "Schneider Electric",
    "Airbus",
    "Thales",
    "Dassault Syst√®mes",
    "Capgemini",
    "Atos",
    "Sopra Steria",
    "Worldline",
    "Devoteam",
    "SNCF",
    "Air France-KLM",
    "Accor",
    "Carrefour",
    "L'Or√©al",
    "Danone",
    "Michelin",
    "Peugeot PSA",
    "Minist√®re de l'Int√©rieur",
    "Minist√®re des Finances",
    "CNAM",
    "P√¥le Emploi",
    "La Poste",
    "RATP",
    "Veolia",
    "Vinci",
]

BUSINESS_MANAGERS = [
    ("Jean", "Dupont", "j.dupont@consultator.fr"),
    ("Marie", "Martin", "m.martin@consultator.fr"),
    ("Pierre", "Bernard", "p.bernard@consultator.fr"),
    ("Sophie", "Durand", "s.durand@consultator.fr"),
    ("Marc", "Moreau", "m.moreau@consultator.fr"),
    ("Isabelle", "Petit", "i.petit@consultator.fr"),
    ("Laurent", "Robert", "l.robert@consultator.fr"),
    ("Nathalie", "Richard", "n.richard@consultator.fr"),
    ("Olivier", "Dubois", "o.dubois@consultator.fr"),
    ("Catherine", "Leroy", "c.leroy@consultator.fr"),
]


def create_practices(session):
    """Cr√©e les practices"""
    print("üè¢ Cr√©ation des practices...")

    practices = []
    for nom, description in PRACTICES:
        # V√©rifier si elle existe d√©j√†
        existing = session.query(Practice).filter(Practice.nom == nom).first()
        if not existing:
            practice = Practice(
                nom=nom,
                description=description,
                responsable=fake.name(),
                date_creation=fake.date_time_between(start_date="-2y", end_date="now"),
            )
            session.add(practice)
            practices.append(practice)
        else:
            practices.append(existing)

    session.flush()
    print(f"‚úÖ {len(practices)} practices disponibles")
    return practices


def create_competences(session):
    """Cr√©e les comp√©tences techniques et fonctionnelles"""
    print("üîß Cr√©ation des comp√©tences...")

    competences = []

    # Comp√©tences techniques
    for nom, categorie, description in COMPETENCES_TECHNIQUES:
        # V√©rifier si elle existe d√©j√†
        existing = session.query(Competence).filter(Competence.nom == nom).first()
        if not existing:
            competence = Competence(
                nom=nom,
                categorie=categorie,
                type_competence="technique",
                description=description,
                niveau_requis=random.choice(["junior", "medior", "senior"]),
            )
            session.add(competence)
            competences.append(competence)
        else:
            competences.append(existing)

    # Comp√©tences fonctionnelles
    for nom, categorie, description in COMPETENCES_FONCTIONNELLES:
        # V√©rifier si elle existe d√©j√†
        existing = session.query(Competence).filter(Competence.nom == nom).first()
        if not existing:
            competence = Competence(
                nom=nom,
                categorie=categorie,
                type_competence="fonctionnelle",
                description=description,
                niveau_requis=random.choice(["junior", "medior", "senior"]),
            )
            session.add(competence)
            competences.append(competence)
        else:
            competences.append(existing)

    session.flush()
    print(f"‚úÖ {len(competences)} comp√©tences disponibles")
    return competences


def create_business_managers(session):
    """Cr√©e les business managers"""
    print("üë®‚Äçüíº Cr√©ation des business managers...")

    business_managers = []
    for prenom, nom, email in BUSINESS_MANAGERS:
        # V√©rifier si il existe d√©j√†
        existing = (
            session.query(BusinessManager)
            .filter(BusinessManager.email == email)
            .first()
        )
        if not existing:
            bm = BusinessManager(
                prenom=prenom,
                nom=nom,
                email=email,
                telephone=fake.phone_number(),
                date_creation=fake.date_time_between(start_date="-2y", end_date="now"),
                notes=fake.text(max_nb_chars=100) if random.random() < 0.3 else None,
            )
            session.add(bm)
            business_managers.append(bm)
        else:
            business_managers.append(existing)

    session.flush()
    print(f"‚úÖ {len(business_managers)} business managers disponibles")
    return business_managers


def create_consultants(session, practices, business_managers, nb_consultants=1000):
    """Cr√©e les consultants"""
    print(f"üë• Cr√©ation de {nb_consultants} consultants...")

    consultants = []
    email_counter = 0  # Compteur pour garantir l'unicit√© des emails

    for i in range(nb_consultants):
        if i % 100 == 0:
            print(f"  üìù Cr√©ation consultant {i+1}/{nb_consultants}")

        # G√©n√©rer des donn√©es consultant
        prenom = fake.first_name()
        nom = fake.last_name()
        # Utiliser un compteur incr√©mental pour garantir l'unicit√©
        email_counter += 1
        email = f"{prenom.lower()}.{nom.lower()}.{email_counter}@email.com"

        consultant = Consultant(
            prenom=prenom,
            nom=nom,
            email=email,
            telephone=fake.phone_number(),
            salaire_actuel=random.randint(35000, 80000),
            practice_id=random.choice(practices).id,
            disponibilite=random.choice([True, False]),
            notes=fake.text(max_nb_chars=200) if random.random() < 0.2 else None,
            date_creation=fake.date_time_between(start_date="-2y", end_date="now"),
            derniere_maj=fake.date_time_between(start_date="-6m", end_date="now"),
        )

        session.add(consultant)
        consultants.append(consultant)

        # Attribution d'un business manager
        if random.random() < 0.9:  # 90% des consultants ont un BM
            bm = random.choice(business_managers)
            date_debut = fake.date_between(start_date="-1y", end_date="now")

            cbm = ConsultantBusinessManager(
                consultant=consultant,
                business_manager=bm,
                date_debut=date_debut,
                date_fin=(
                    None
                    if random.random() < 0.8
                    else fake.date_between(start_date=date_debut, end_date="now")
                ),
                commentaire=(
                    fake.text(max_nb_chars=100) if random.random() < 0.2 else None
                ),
            )
            session.add(cbm)

    session.flush()
    print(f"‚úÖ {len(consultants)} consultants cr√©√©s")
    return consultants


def create_consultant_competences(session, consultants, competences):
    """Attribue des comp√©tences aux consultants"""
    print("üîó Attribution des comp√©tences aux consultants...")

    competences_count = 0

    for i, consultant in enumerate(consultants):
        if i % 200 == 0:
            print(f"  üîß Comp√©tences pour consultant {i+1}/{len(consultants)}")

        # Chaque consultant a entre 3 et 15 comp√©tences
        nb_competences = random.randint(3, 15)
        consultant_competences = random.sample(competences, nb_competences)

        for competence in consultant_competences:
            cc = ConsultantCompetence(
                consultant_id=consultant.id,
                competence_id=competence.id,
                annees_experience=round(random.uniform(0.5, 10.0), 1),
                niveau_maitrise=random.choice(["debutant", "intermediaire", "expert"]),
                projets_realises=(
                    fake.text(max_nb_chars=100) if random.random() < 0.3 else None
                ),
                date_ajout=fake.date_time_between(start_date="-1y", end_date="now"),
            )
            session.add(cc)
            competences_count += 1

    session.flush()
    print(f"‚úÖ {competences_count} attributions de comp√©tences cr√©√©es")


def create_missions(session, consultants, min_missions=10000):
    """Cr√©e les missions pour les consultants"""
    print(f"üéØ Cr√©ation d'au minimum {min_missions} missions...")

    missions_count = 0
    target_per_consultant = max(10, min_missions // len(consultants))

    for i, consultant in enumerate(consultants):
        if i % 100 == 0:
            print(f"  üéØ Missions pour consultant {i+1}/{len(consultants)}")

        # Chaque consultant a entre 5 et 20 missions
        nb_missions = random.randint(5, target_per_consultant + 10)

        for _ in range(nb_missions):
            # Dates de mission coh√©rentes
            date_debut = fake.date_between(start_date="-3y", end_date="now")

            # 70% de missions termin√©es, 30% en cours
            if random.random() < 0.7:
                date_fin = fake.date_between(start_date=date_debut, end_date="now")
                statut = "terminee"
            else:
                date_fin = None
                statut = "en_cours"

            client = random.choice(CLIENTS)

            mission = Mission(
                consultant_id=consultant.id,
                nom_mission=f"Mission {fake.word().title()} chez {client}",
                client=client,
                role=fake.job(),
                date_debut=date_debut,
                date_fin=date_fin,
                statut=statut,
                taux_journalier=random.randint(400, 1200),
                revenus_generes=random.randint(5000, 50000) if date_fin else 0,
                technologies_utilisees=", ".join(
                    random.sample(
                        [comp[0] for comp in COMPETENCES_TECHNIQUES],
                        random.randint(2, 6),
                    )
                ),
                description=fake.text(max_nb_chars=300),
            )

            session.add(mission)
            missions_count += 1

    session.flush()
    print(f"‚úÖ {missions_count} missions cr√©√©es")
    return missions_count


def create_cvs(session, consultants, min_cvs=2000):
    """Cr√©e des entr√©es CV pour les consultants"""
    print(f"üìÑ Cr√©ation d'au minimum {min_cvs} CVs...")

    cvs_count = 0
    target_per_consultant = max(2, min_cvs // len(consultants))

    for i, consultant in enumerate(consultants):
        if i % 200 == 0:
            print(f"  üìÑ CVs pour consultant {i+1}/{len(consultants)}")

        # Chaque consultant a entre 1 et 3 CVs
        nb_cvs = random.randint(1, target_per_consultant + 1)

        for j in range(nb_cvs):
            cv = CV(
                consultant_id=consultant.id,
                fichier_nom=f"CV_{consultant.prenom}_{consultant.nom}_{j+1}.pdf",
                fichier_path=f"/uploads/cv_{consultant.id}_{j+1}.pdf",
                contenu_extrait=fake.text(max_nb_chars=1000),
                date_upload=fake.date_time_between(start_date="-1y", end_date="now"),
                taille_fichier=random.randint(100000, 2000000),  # 100KB √† 2MB
            )

            session.add(cv)
            cvs_count += 1

    session.flush()
    print(f"‚úÖ {cvs_count} CVs cr√©√©s")
    return cvs_count


def generate_test_data():
    """G√©n√®re toutes les donn√©es de test"""
    print("üöÄ G√©n√©ration des donn√©es de test pour validation des performances")
    print("=" * 60)

    # Initialiser la base de donn√©es
    init_database()

    start_time = datetime.now()

    with get_database_session() as session:
        try:
            # 1. Cr√©er les donn√©es de r√©f√©rence
            practices = create_practices(session)
            competences = create_competences(session)
            business_managers = create_business_managers(session)

            session.commit()
            print("‚úÖ Donn√©es de r√©f√©rence commit√©es")

            # 2. Cr√©er les consultants
            consultants = create_consultants(
                session, practices, business_managers, 1000
            )
            session.commit()
            print("‚úÖ Consultants committ√©s")

            # 3. Attribuer des comp√©tences
            create_consultant_competences(session, consultants, competences)
            session.commit()
            print("‚úÖ Comp√©tences consultants committ√©es")

            # 4. Cr√©er les missions
            missions_count = create_missions(session, consultants, 10000)
            session.commit()
            print("‚úÖ Missions committ√©es")

            # 5. Cr√©er les CVs
            cvs_count = create_cvs(session, consultants, 2000)
            session.commit()
            print("‚úÖ CVs committ√©s")

            end_time = datetime.now()
            duration = end_time - start_time

            print("=" * 60)
            print("üéâ G√âN√âRATION TERMIN√âE AVEC SUCC√àS!")
            print(f"‚è±Ô∏è  Dur√©e totale: {duration}")
            print(f"üë• Consultants: {len(consultants)}")
            print(f"üéØ Missions: {missions_count}")
            print(f"üìÑ CVs: {cvs_count}")
            print(f"üîß Comp√©tences: {len(competences)}")
            print(f"üè¢ Practices: {len(practices)}")
            print(f"üë®‚Äçüíº Business Managers: {len(business_managers)}")
            print("=" * 60)

        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
            session.rollback()
            raise


if __name__ == "__main__":
    generate_test_data()
