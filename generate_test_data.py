#!/usr/bin/env python3
"""
Script pour g√©n√©rer 1000 consultants de test pour Consultator
Version optimis√©e avec donn√©es r√©alistes fran√ßaises
"""

import os
import random
import sys
from datetime import date, datetime, timedelta
from faker import Faker

# Ajouter le r√©pertoire app au PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "app"))

from app.database.database import get_database_session, init_database
from app.database.models import (
    Consultant,
    Practice,
    BusinessManager,
    Competence,
    ConsultantCompetence,
    Mission,
    Langue,
    ConsultantLangue,
    ConsultantBusinessManager,
)

# Configuration
fake = Faker("fr_FR")
NB_CONSULTANTS = 1000

# Donn√©es de r√©f√©rence
PRACTICES = [
    "Data Science",
    "Frontend",
    "Backend",
    "DevOps",
    "Mobile",
    "Cloud",
    "IA/ML",
    "Cybers√©curit√©",
    "Blockchain",
    "IoT",
]

BUSINESS_MANAGERS = [
    "Marie Dubois",
    "Pierre Martin",
    "Sophie Bernard",
    "Jean Durand",
    "Claire Moreau",
    "Philippe Leroy",
    "Nathalie Rousseau",
    "Marc Petit",
]

COMPETENCES_TECH = [
    "Python",
    "JavaScript",
    "Java",
    "React",
    "Angular",
    "Vue.js",
    "Node.js",
    "Django",
    "Flask",
    "Spring Boot",
    "Docker",
    "Kubernetes",
    "AWS",
    "Azure",
    "GCP",
    "MySQL",
    "PostgreSQL",
    "MongoDB",
    "Redis",
    "Git",
    "Jenkins",
    "GitLab",
    "Terraform",
    "Ansible",
]

COMPETENCES_FONCTIONNELLES = [
    "Gestion de projet",
    "Architecture logicielle",
    "UX/UI Design",
    "Analyse fonctionnelle",
    "Tests automatis√©s",
    "Agilit√©",
    "Scrum",
    "DevOps",
    "S√©curit√©",
    "Performance",
    "Big Data",
    "Machine Learning",
]

LANGUES = [
    ("Fran√ßais", "Natif"),
    ("Anglais", "Courant"),
    ("Espagnol", "Interm√©diaire"),
    ("Allemand", "Notions"),
    ("Italien", "Notions"),
    ("Mandarin", "D√©butant"),
]

GRADES = ["Junior", "Confirm√©", "Senior", "Expert", "Principal", "Architecte"]

CLIENTS = [
    "BNP Paribas",
    "Soci√©t√© G√©n√©rale",
    "Cr√©dit Agricole",
    "Orange",
    "SFR",
    "Bouygues",
    "SNCF",
    "Air France",
    "Renault",
    "Peugeot",
    "L'Or√©al",
    "Danone",
    "Total",
    "EDF",
    "Airbus",
    "Thales",
    "Capgemini",
    "Accenture",
]


def create_practices():
    """Cr√©er les practices"""
    print("üè¢ Cr√©ation des practices...")
    practices = []

    with get_database_session() as session:
        for i, practice_name in enumerate(PRACTICES):
            existing = (
                session.query(Practice).filter(Practice.nom == practice_name).first()
            )
            if not existing:
                practice = Practice(
                    nom=practice_name,
                    description=f"Practice {practice_name}",
                    responsable=random.choice(BUSINESS_MANAGERS),
                    date_creation=datetime.now(),
                    actif=True,
                )
                session.add(practice)
                practices.append(practice)

        session.commit()
        # R√©cup√©rer toutes les practices (existantes + nouvelles)
        all_practices = session.query(Practice).all()
        print(
            f"‚úÖ {len(practices)} nouvelles practices cr√©√©es ({len(all_practices)} total)"
        )
    return all_practices


def create_business_managers():
    """Cr√©er les business managers"""
    print("üëî Cr√©ation des business managers...")
    managers = []

    with get_database_session() as session:
        for manager_name in BUSINESS_MANAGERS:
            parts = manager_name.split()
            email = f"{parts[0].lower()}.{parts[-1].lower()}@consultator.com"

            existing = (
                session.query(BusinessManager)
                .filter(BusinessManager.email == email)
                .first()
            )
            if not existing:
                manager = BusinessManager(
                    nom=parts[-1],
                    prenom=parts[0],
                    email=email,
                    telephone=fake.phone_number(),
                    actif=True,
                )
                session.add(manager)
                managers.append(manager)

        session.commit()
        # R√©cup√©rer tous les managers (existants + nouveaux)
        all_managers = session.query(BusinessManager).all()
        print(
            f"‚úÖ {len(managers)} nouveaux business managers cr√©√©s ({len(all_managers)} total)"
        )
    return all_managers


def create_competences():
    """Cr√©er les comp√©tences"""
    print("‚ö° Cr√©ation des comp√©tences...")
    competences = []

    with get_database_session() as session:
        # Comp√©tences techniques
        for comp_name in COMPETENCES_TECH:
            existing = (
                session.query(Competence).filter(Competence.nom == comp_name).first()
            )
            if not existing:
                competence = Competence(
                    nom=comp_name,
                    categorie="Technique",
                    description=f"Comp√©tence technique {comp_name}",
                )
                session.add(competence)
                competences.append(competence)

        # Comp√©tences fonctionnelles
        for comp_name in COMPETENCES_FONCTIONNELLES:
            existing = (
                session.query(Competence).filter(Competence.nom == comp_name).first()
            )
            if not existing:
                competence = Competence(
                    nom=comp_name,
                    categorie="Fonctionnelle",
                    description=f"Comp√©tence fonctionnelle {comp_name}",
                )
                session.add(competence)
                competences.append(competence)

        session.commit()
        # R√©cup√©rer toutes les comp√©tences (existantes + nouvelles)
        all_competences = session.query(Competence).all()
        print(
            f"‚úÖ {len(competences)} nouvelles comp√©tences cr√©√©es ({len(all_competences)} total)"
        )
    return all_competences


def create_langues():
    """Cr√©er les langues"""
    print("üåç Cr√©ation des langues...")
    langues = []

    with get_database_session() as session:
        for langue_nom, _ in LANGUES:
            if not session.query(Langue).filter(Langue.nom == langue_nom).first():
                langue = Langue(nom=langue_nom, code_iso=langue_nom[:2].lower())
                session.add(langue)
                langues.append(langue)

        session.commit()
        print(f"‚úÖ {len(langues)} langues cr√©√©es")
    return langues


def create_consultants(practices, managers, competences, langues):
    """Cr√©er 1000 consultants avec donn√©es r√©alistes"""
    print(f"üë• G√©n√©ration de {NB_CONSULTANTS} consultants...")

    consultants_created = 0
    batch_size = 50

    for batch in range(0, NB_CONSULTANTS, batch_size):
        batch_consultants = []

        with get_database_session() as session:
            # R√©cup√©rer les IDs des practices, managers, etc.
            practice_ids = [p.id for p in session.query(Practice).all()]
            manager_ids = [m.id for m in session.query(BusinessManager).all()]
            competence_ids = [c.id for c in session.query(Competence).all()]
            langue_ids = [l.id for l in session.query(Langue).all()]

            for i in range(min(batch_size, NB_CONSULTANTS - batch)):
                consultant_number = batch + i + 1

                # Donn√©es personnelles
                sexe = random.choice(["M", "F"])
                if sexe == "M":
                    prenom = fake.first_name_male()
                else:
                    prenom = fake.first_name_female()

                nom = fake.last_name()

                # Calcul de l'√¢ge et de l'exp√©rience
                age = random.randint(22, 60)
                experience = min(age - 22, random.randint(0, 35))

                # Grade bas√© sur l'exp√©rience
                if experience < 2:
                    grade = "Junior"
                elif experience < 5:
                    grade = "Confirm√©"
                elif experience < 10:
                    grade = "Senior"
                elif experience < 15:
                    grade = "Expert"
                else:
                    grade = random.choice(["Principal", "Architecte"])

                # Donn√©es de contact avec num√©ro unique
                email = f"{prenom.lower()}.{nom.lower()}.{consultant_number:04d}@consultator-test.com"

                # Salaire bas√© sur le grade
                salaire_base = {
                    "Junior": random.randint(35000, 45000),
                    "Confirm√©": random.randint(45000, 60000),
                    "Senior": random.randint(60000, 80000),
                    "Expert": random.randint(80000, 100000),
                    "Principal": random.randint(100000, 130000),
                    "Architecte": random.randint(120000, 150000),
                }

                consultant = Consultant(
                    nom=nom,
                    prenom=prenom,
                    email=email,
                    telephone=fake.phone_number(),
                    date_entree_societe=fake.date_between(
                        start_date="-10y", end_date="today"
                    ),
                    grade=grade,
                    practice_id=random.choice(practice_ids),
                    salaire_actuel=salaire_base[grade],
                    disponibilite=random.choice([True, False]),
                )

                session.add(consultant)
                session.flush()  # Pour obtenir l'ID

                # Affecter un business manager au consultant
                manager_id = random.choice(manager_ids)
                consultant_manager = ConsultantBusinessManager(
                    consultant_id=consultant.id,
                    business_manager_id=manager_id,
                    date_debut=consultant.date_entree_societe
                    or fake.date_between(start_date="-5y", end_date="today"),
                )
                session.add(consultant_manager)

                # Comp√©tences (3-8 par consultant)
                nb_competences = random.randint(3, 8)
                consultant_competences = random.sample(competence_ids, nb_competences)

                for comp_id in consultant_competences:
                    consultant_comp = ConsultantCompetence(
                        consultant_id=consultant.id,
                        competence_id=comp_id,
                        niveau_maitrise=random.choice(
                            ["debutant", "intermediaire", "avance", "expert"]
                        ),
                        annees_experience=random.randint(0, min(experience, 15)),
                    )
                    session.add(consultant_comp)

                # Langues (1-3 par consultant)
                nb_langues = random.randint(1, min(3, len(langue_ids)))
                consultant_langues = random.sample(langue_ids, nb_langues)

                for langue_id in consultant_langues:
                    niveau_num = random.randint(1, 5)  # 1=D√©butant √† 5=Natif
                    consultant_langue = ConsultantLangue(
                        consultant_id=consultant.id,
                        langue_id=langue_id,
                        niveau=niveau_num,
                    )
                    session.add(consultant_langue)

                batch_consultants.append(consultant)

            session.commit()
            consultants_created += len(batch_consultants)
            print(
                f"‚úÖ Batch {batch//batch_size + 1}: {len(batch_consultants)} consultants cr√©√©s (Total: {consultants_created})"
            )

    return consultants_created


def create_missions(nb_missions=200):
    """Cr√©er des missions d'exemple"""
    print(f"üìã Cr√©ation de {nb_missions} missions...")

    with get_database_session() as session:
        consultant_ids = [c.id for c in session.query(Consultant).all()]

        for i in range(nb_missions):
            consultant_id = random.choice(consultant_ids)

            # Dates de mission
            date_debut = fake.date_between(start_date="-2y", end_date="today")
            duree_jours = random.randint(30, 365)
            date_fin = date_debut + timedelta(days=duree_jours)

            mission = Mission(
                consultant_id=consultant_id,
                client=random.choice(CLIENTS),
                nom_mission=fake.catch_phrase(),
                description=fake.text(max_nb_chars=200),
                date_debut=date_debut,
                date_fin=date_fin,
                taux_journalier=random.randint(400, 1200),
                statut=random.choice(["En cours", "Termin√©e", "Planifi√©e"]),
            )
            session.add(mission)

        session.commit()
        print(f"‚úÖ {nb_missions} missions cr√©√©es")


def main():
    """Script principal"""
    print("üöÄ G√©n√©ration de donn√©es de test pour Consultator")
    print("=" * 60)

    # Initialiser la base de donn√©es
    print("üîß Initialisation de la base de donn√©es...")
    init_database()
    print("‚úÖ Base de donn√©es initialis√©e")

    # Cr√©er les donn√©es de r√©f√©rence
    practices = create_practices()
    managers = create_business_managers()
    competences = create_competences()
    langues = create_langues()

    # Cr√©er les consultants
    nb_consultants = create_consultants(practices, managers, competences, langues)

    # Cr√©er des missions
    create_missions()

    print("\n" + "=" * 60)
    print(f"üéâ G√©n√©ration termin√©e avec succ√®s !")
    print(f"üìä R√©sum√©:")
    print(f"   ‚Ä¢ {len(PRACTICES)} practices")
    print(f"   ‚Ä¢ {len(BUSINESS_MANAGERS)} business managers")
    print(f"   ‚Ä¢ {len(COMPETENCES_TECH + COMPETENCES_FONCTIONNELLES)} comp√©tences")
    print(f"   ‚Ä¢ {len(LANGUES)} langues")
    print(f"   ‚Ä¢ {nb_consultants} consultants")
    print(f"   ‚Ä¢ 200 missions")
    print("=" * 60)


if __name__ == "__main__":
    main()
