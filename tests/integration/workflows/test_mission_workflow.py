"""Tests d'int√©gration pour le workflow mission complet"""

from datetime import date
from datetime import datetime
from datetime import timedelta
from unittest.mock import MagicMock
from unittest.mock import Mock
from unittest.mock import patch

import pytest
import streamlit as st

from app.database.database import get_database_session
from app.database.models import Consultant
from app.database.models import Mission
from app.database.models import Practice

# Import des services principaux
from app.services.consultant_service import ConsultantService


# Fixtures pour les tests de mission
@pytest.fixture
def sample_mission_data():
    """Donn√©es de test pour une mission"""
    return {
        "nom_mission": "D√©veloppement Application Web",
        "client": "Entreprise ABC",
        "description": "D√©veloppement complet d'une application web responsive",
        "date_debut": date.today(),
        "date_fin": date.today() + timedelta(days=90),
        "statut": "en_cours",
        "technologies_utilisees": "React, Node.js, MongoDB",
        "revenus_generes": 0,
        "role": "D√©veloppeur Full-Stack",
    }


@pytest.fixture
def sample_consultant_for_mission():
    """Cr√©er un consultant de test pour les missions"""
    import uuid

    unique_id = str(uuid.uuid4())[:8]

    data = {
        "prenom": "Marie",
        "nom": f"Leroy_{unique_id}",
        "email": f"marie.leroy.{unique_id}@test.com",
        "telephone": "0123456789",
        "salaire_actuel": 55000,
        "practice_id": 1,
        "disponibilite": True,
        "notes": "Consultant pour tests missions",
        "societe": "TestCorp",
        "grade": "Senior",
        "type_contrat": "CDI",
    }

    result = ConsultantService.create_consultant(data)
    assert result is True

    consultant = ConsultantService.get_consultant_by_email(data["email"])
    yield consultant.id

    # Nettoyage
    try:
        ConsultantService.delete_consultant(consultant.id)
    except:
        pass


class TestMissionWorkflowIntegration:
    """Tests d'int√©gration pour le workflow mission complet"""

    def test_complete_mission_lifecycle(
        self, sample_consultant_for_mission, sample_mission_data
    ):
        """Test du cycle de vie complet d'une mission"""

        consultant_id = sample_consultant_for_mission
        mission_id = None

        try:
            # === PHASE 1: Cr√©ation de la mission ===
            print("=== PHASE 1: Cr√©ation de la mission ===")

            mission_data = sample_mission_data.copy()
            mission_data["consultant_id"] = consultant_id

            with get_database_session() as session:
                mission = Mission(**mission_data)
                session.add(mission)
                session.commit()
                mission_id = mission.id

            # V√©rifier que la mission a √©t√© cr√©√©e
            with get_database_session() as session:
                created_mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                assert created_mission is not None
                assert created_mission.nom_mission == sample_mission_data["nom_mission"]
                assert created_mission.client == sample_mission_data["client"]
                assert created_mission.statut == "en_cours"

            print(f"‚úÖ Mission cr√©√©e avec ID: {mission_id}")

            # === PHASE 2: Modification de la mission ===
            print("=== PHASE 2: Modification de la mission ===")

            with get_database_session() as session:
                mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                mission.description = "Description mise √† jour pour le test"
                mission.technologies_utilisees = "React, Node.js, MongoDB, Docker"
                mission.role = "Lead D√©veloppeur"
                session.commit()

            # V√©rifier les modifications
            with get_database_session() as session:
                updated_mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                assert (
                    updated_mission.description
                    == "Description mise √† jour pour le test"
                )
                assert updated_mission.role == "Lead D√©veloppeur"

            print("‚úÖ Mission modifi√©e avec succ√®s")

            # === PHASE 3: Cl√¥ture de la mission ===
            print("=== PHASE 3: Cl√¥ture de la mission ===")

            with get_database_session() as session:
                mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                mission.statut = "terminee"
                mission.date_fin = date.today() + timedelta(days=85)  # Fin anticip√©e
                mission.revenus_generes = 45000
                session.commit()

            # V√©rifier la cl√¥ture
            with get_database_session() as session:
                closed_mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                assert closed_mission.statut == "terminee"
                assert closed_mission.revenus_generes == 45000

            print("‚úÖ Mission cl√¥tur√©e avec succ√®s")

            # === PHASE 4: V√©rification des impacts ===
            print("=== PHASE 4: V√©rification des impacts ===")

            # V√©rifier que le consultant a la mission dans son historique
            consultant_with_stats = ConsultantService.get_consultant_with_stats(
                consultant_id
            )
            assert len(consultant_with_stats["missions"]) > 0

            mission_in_profile = next(
                (m for m in consultant_with_stats["missions"] if m["id"] == mission_id),
                None,
            )
            assert mission_in_profile is not None
            assert mission_in_profile["statut"] == "terminee"
            assert mission_in_profile["revenus_generes"] == 45000

            print("‚úÖ Impacts v√©rifi√©s dans le profil consultant")

            print("üéâ CYCLE DE VIE MISSION R√âUSSI !")

        finally:
            # === NETTOYAGE ===
            if mission_id:
                print("=== NETTOYAGE MISSION ===")
                try:
                    with get_database_session() as session:
                        mission = (
                            session.query(Mission)
                            .filter(Mission.id == mission_id)
                            .first()
                        )
                        if mission:
                            session.delete(mission)
                            session.commit()
                    print("‚úÖ Mission supprim√©e (nettoyage)")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors du nettoyage mission: {e}")

    def test_multiple_missions_workflow(self, sample_consultant_for_mission):
        """Test de gestion de plusieurs missions pour un consultant"""

        consultant_id = sample_consultant_for_mission
        mission_ids = []

        try:
            # Cr√©er plusieurs missions
            missions_data = [
                {
                    "nom_mission": "Mission 1 - API Development",
                    "client": "Client A",
                    "description": "D√©veloppement API REST",
                    "date_debut": date.today() - timedelta(days=30),
                    "date_fin": date.today() + timedelta(days=30),
                    "statut": "en_cours",
                    "technologies_utilisees": "Python, FastAPI",
                    "revenus_generes": 0,
                    "consultant_id": consultant_id,
                },
                {
                    "nom_mission": "Mission 2 - Frontend Development",
                    "client": "Client B",
                    "description": "D√©veloppement interface utilisateur",
                    "date_debut": date.today() - timedelta(days=60),
                    "date_fin": date.today() - timedelta(days=10),
                    "statut": "terminee",
                    "technologies_utilisees": "React, TypeScript",
                    "revenus_generes": 35000,
                    "consultant_id": consultant_id,
                },
                {
                    "nom_mission": "Mission 3 - Database Design",
                    "client": "Client C",
                    "description": "Conception base de donn√©es",
                    "date_debut": date.today() - timedelta(days=90),
                    "date_fin": date.today() - timedelta(days=20),
                    "statut": "terminee",
                    "technologies_utilisees": "PostgreSQL, MongoDB",
                    "revenus_generes": 28000,
                    "consultant_id": consultant_id,
                },
            ]

            # Cr√©er les missions
            for mission_data in missions_data:
                with get_database_session() as session:
                    mission = Mission(**mission_data)
                    session.add(mission)
                    session.commit()
                    mission_ids.append(mission.id)

            # V√©rifier que toutes les missions sont cr√©√©es
            with get_database_session() as session:
                missions = (
                    session.query(Mission)
                    .filter(Mission.consultant_id == consultant_id)
                    .all()
                )
                assert len(missions) == 3

            # V√©rifier les statistiques du consultant
            consultant_with_stats = ConsultantService.get_consultant_with_stats(
                consultant_id
            )
            assert len(consultant_with_stats["missions"]) == 3

            # Calculer les revenus totaux
            total_revenus = sum(
                m["revenus_generes"] for m in consultant_with_stats["missions"]
            )
            assert total_revenus == 63000  # 0 + 35000 + 28000

            # V√©rifier le nombre de missions termin√©es
            completed_missions = [
                m
                for m in consultant_with_stats["missions"]
                if m["statut"] == "terminee"
            ]
            assert len(completed_missions) == 2

            # V√©rifier qu'il y a une mission en cours
            active_missions = [
                m
                for m in consultant_with_stats["missions"]
                if m["statut"] == "en_cours"
            ]
            assert len(active_missions) == 1

            print("‚úÖ Gestion de plusieurs missions r√©ussie")

        finally:
            # Nettoyage
            for mission_id in mission_ids:
                try:
                    with get_database_session() as session:
                        mission = (
                            session.query(Mission)
                            .filter(Mission.id == mission_id)
                            .first()
                        )
                        if mission:
                            session.delete(mission)
                            session.commit()
                except:
                    pass

    def test_mission_status_transitions(self, sample_consultant_for_mission):
        """Test des transitions d'√©tat des missions"""

        consultant_id = sample_consultant_for_mission
        mission_id = None

        try:
            # Cr√©er une mission
            mission_data = {
                "nom_mission": "Test Status Transitions",
                "client": "Test Client",
                "description": "Test des transitions d'√©tat",
                "date_debut": date.today(),
                "date_fin": date.today() + timedelta(days=60),
                "statut": "en_cours",
                "technologies_utilisees": "Python",
                "revenus_generes": 0,
                "consultant_id": consultant_id,
            }

            with get_database_session() as session:
                mission = Mission(**mission_data)
                session.add(mission)
                session.commit()
                mission_id = mission.id

            # Test des transitions d'√©tat
            status_transitions = [
                ("en_cours", "Mission en cours"),
                ("suspendue", "Mission suspendue temporairement"),
                ("terminee", "Mission termin√©e avec succ√®s"),
                ("annulee", "Mission annul√©e"),
            ]

            for status, description in status_transitions:
                with get_database_session() as session:
                    mission = (
                        session.query(Mission).filter(Mission.id == mission_id).first()
                    )
                    mission.statut = status
                    if status == "terminee":
                        mission.revenus_generes = 30000
                    session.commit()

                # V√©rifier le changement d'√©tat
                with get_database_session() as session:
                    updated_mission = (
                        session.query(Mission).filter(Mission.id == mission_id).first()
                    )
                    assert updated_mission.statut == status

                print(f"‚úÖ Transition vers '{status}' r√©ussie")

            # V√©rifier l'impact sur les statistiques du consultant
            consultant_with_stats = ConsultantService.get_consultant_with_stats(
                consultant_id
            )
            missions = consultant_with_stats["missions"]
            assert len(missions) == 1

            final_mission = missions[0]
            assert final_mission["statut"] == "annulee"  # Dernier √©tat

            print("‚úÖ Transitions d'√©tat des missions r√©ussies")

        finally:
            # Nettoyage
            if mission_id:
                try:
                    with get_database_session() as session:
                        mission = (
                            session.query(Mission)
                            .filter(Mission.id == mission_id)
                            .first()
                        )
                        if mission:
                            session.delete(mission)
                            session.commit()
                except:
                    pass

    def test_mission_date_management(self, sample_consultant_for_mission):
        """Test de la gestion des dates dans les missions"""

        consultant_id = sample_consultant_for_mission
        mission_id = None

        try:
            # Cr√©er une mission avec des dates
            base_date = date.today()
            mission_data = {
                "nom_mission": "Test Date Management",
                "client": "Test Client",
                "description": "Test de gestion des dates",
                "date_debut": base_date,
                "date_fin": base_date + timedelta(days=30),
                "statut": "en_cours",
                "technologies_utilisees": "Python",
                "revenus_generes": 0,
                "consultant_id": consultant_id,
            }

            with get_database_session() as session:
                mission = Mission(**mission_data)
                session.add(mission)
                session.commit()
                mission_id = mission.id

            # Test de modification des dates
            new_start_date = base_date + timedelta(days=5)
            new_end_date = base_date + timedelta(days=45)

            with get_database_session() as session:
                mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                mission.date_debut = new_start_date
                mission.date_fin = new_end_date
                session.commit()

            # V√©rifier les nouvelles dates
            with get_database_session() as session:
                updated_mission = (
                    session.query(Mission).filter(Mission.id == mission_id).first()
                )
                assert updated_mission.date_debut == new_start_date
                assert updated_mission.date_fin == new_end_date

            # Test de calcul de dur√©e
            duration_days = (updated_mission.date_fin - updated_mission.date_debut).days
            assert duration_days == 40

            print("‚úÖ Gestion des dates des missions r√©ussie")

        finally:
            # Nettoyage
            if mission_id:
                try:
                    with get_database_session() as session:
                        mission = (
                            session.query(Mission)
                            .filter(Mission.id == mission_id)
                            .first()
                        )
                        if mission:
                            session.delete(mission)
                            session.commit()
                except:
                    pass
