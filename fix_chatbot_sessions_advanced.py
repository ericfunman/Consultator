#!/usr/bin/env python3
"""
Script avanc√© pour corriger TOUS les usages de self.session dans ChatbotService
Approche par m√©thode pour g√©rer les context managers correctement
"""

import re
from pathlib import Path


def fix_method_sessions():
    """Corrige les m√©thodes qui utilisent self.session de mani√®re intensive"""
    
    chatbot_file = Path("app/services/chatbot_service.py")
    
    if not chatbot_file.exists():
        print(f"‚ùå Fichier non trouv√©: {chatbot_file}")
        return False
    
    print(f"üîß Correction avanc√©e des sessions dans {chatbot_file}")
    
    # Lire le contenu
    with open(chatbot_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    changes_made = 0
    
    # Fonction pour wrap une m√©thode avec un context manager
    def wrap_method_with_session(method_name, content):
        # Pattern pour trouver la m√©thode
        method_pattern = rf'(    def {method_name}\([^)]*\):[^:]*?:.*?\n)(.*?)(\n    def |\nclass |\Z)'
        
        match = re.search(method_pattern, content, re.DOTALL)
        if not match:
            return content, 0
        
        method_signature = match.group(1)
        method_body = match.group(2)
        next_section = match.group(3)
        
        # V√©rifier si la m√©thode utilise self.session
        if 'self.session' not in method_body:
            return content, 0
        
        # Ajouter le context manager au d√©but du corps de la m√©thode
        lines = method_body.split('\n')
        
        # Trouver la premi√®re ligne significative (pas les docstrings/commentaires)
        first_code_line_idx = 0
        in_docstring = False
        for i, line in enumerate(lines):
            stripped = line.strip()
            if stripped.startswith('"""') or stripped.startswith("'''"):
                if stripped.endswith('"""') or stripped.endswith("'''"):
                    # Docstring sur une ligne
                    continue
                else:
                    # D√©but de docstring multi-ligne
                    in_docstring = not in_docstring
                    continue
            elif in_docstring:
                if stripped.endswith('"""') or stripped.endswith("'''"):
                    in_docstring = False
                continue
            elif stripped.startswith('#') or not stripped:
                continue
            else:
                first_code_line_idx = i
                break
        
        # Ins√©rer le context manager
        indent = '        '  # 8 spaces pour √™tre dans la m√©thode
        session_context = f"{indent}with get_database_session() as session:"
        
        # Remplacer self.session par session dans le corps
        new_body_lines = []
        for i, line in enumerate(lines):
            if i == first_code_line_idx:
                # Ajouter le context manager avant la premi√®re ligne de code
                new_body_lines.append(session_context)
                # Indenter la ligne actuelle
                new_line = line.replace('self.session', 'session')
                if line.strip():  # Si ce n'est pas une ligne vide
                    new_line = '    ' + new_line  # Ajouter 4 espaces d'indentation
                new_body_lines.append(new_line)
            else:
                # Remplacer self.session et ajuster l'indentation si n√©cessaire
                new_line = line.replace('self.session', 'session')
                if line.strip() and not line.startswith('        #') and 'self.session' in line:
                    # Ajouter indentation pour √™tre dans le context manager
                    new_line = '    ' + new_line
                new_body_lines.append(new_line)
        
        new_method_body = '\n'.join(new_body_lines)
        
        # Reconstruire la m√©thode
        new_method = method_signature + new_method_body + next_section
        
        # Remplacer dans le contenu
        old_method = method_signature + method_body + next_section
        new_content = content.replace(old_method, new_method)
        
        return new_content, 1
    
    # Liste des m√©thodes critiques √† corriger
    critical_methods = [
        '_generate_statistics',
        '_handle_availability_question',
        '_handle_cv_question',
        '_handle_performance_question',
        '_handle_statistics_question'
    ]
    
    for method_name in critical_methods:
        content, changes = wrap_method_with_session(method_name, content)
        changes_made += changes
        if changes:
            print(f"‚úÖ M√©thode {method_name} corrig√©e")
    
    # Corrections simples pour les lignes isol√©es restantes
    simple_replacements = [
        (r'(\s+)consultants_total = self\.session\.query\(Consultant\)\.count\(\)',
         r'\1with get_database_session() as session:\n\1    consultants_total = session.query(Consultant).count()'),
        (r'(\s+)missions_total = self\.session\.query\(Mission\)\.count\(\)',
         r'\1with get_database_session() as session:\n\1    missions_total = session.query(Mission).count()'),
        (r'(\s+)practices_total = self\.session\.query\(Practice\)\.filter\(Practice\.actif\)\.count\(\)',
         r'\1with get_database_session() as session:\n\1    practices_total = session.query(Practice).filter(Practice.actif).count()'),
        (r'(\s+)cvs_total = self\.session\.query\(CV\)\.count\(\)',
         r'\1with get_database_session() as session:\n\1    cvs_total = session.query(CV).count()'),
    ]
    
    for pattern, replacement in simple_replacements:
        if re.search(pattern, content):
            content = re.sub(pattern, replacement, content)
            changes_made += 1
            print(f"‚úÖ Pattern simple corrig√©: {pattern[:50]}...")
    
    # √âcrire le fichier modifi√©
    if content != original_content:
        with open(chatbot_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ {changes_made} corrections avanc√©es appliqu√©es")
        return True
    else:
        print("‚ÑπÔ∏è Aucune correction avanc√©e n√©cessaire")
        return False


if __name__ == "__main__":
    try:
        success = fix_method_sessions()
        if success:
            print("\nüéâ Corrections avanc√©es termin√©es!")
            print("üí° Les m√©thodes critiques utilisent maintenant des sessions context-managed")
            print("‚ö° Cela devrait √©liminer les timeouts d'inactivit√© du chatbot")
        else:
            print("\n‚ö†Ô∏è Aucune correction avanc√©e appliqu√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
