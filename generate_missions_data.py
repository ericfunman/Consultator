"""
Script pour g√©n√©rer des missions fictives pour les consultants
Cr√©e des missions r√©alistes avec des clients, dates, et r√©mun√©rations
"""

import os
import sys
import random
from datetime import timedelta, date
from typing import List, Dict

# Ajouter le chemin de l'application
current_dir = os.path.dirname(__file__)
app_dir = os.path.join(current_dir, "app")
if app_dir not in sys.path:
    sys.path.insert(0, app_dir)

try:
    from database.database import get_database_session, init_database
    from database.models import Consultant, Mission

    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

# Donn√©es fictives pour les clients (noms seulement)
CLIENTS_DATA = [
    "Soci√©t√© G√©n√©rale",
    "BNP Paribas",
    "Cr√©dit Agricole",
    "Orange",
    "EDF",
    "SNCF Connect",
    "Airbus",
    "Thales",
    "Capgemini",
    "Accenture",
    "Dassault Syst√®mes",
    "L'Or√©al",
    "Renault",
    "PSA Peugeot",
    "Carrefour",
    "LVMH",
    "Danone",
    "Total Energies",
    "Veolia",
    "Bouygues",
]

# Types de missions par secteur (simplifi√©)
MISSION_TYPES = [
    "Transformation digitale",
    "Migration vers le cloud AWS",
    "D√©veloppement application mobile",
    "Mise en place architecture microservices",
    "Projet de d√©mat√©rialisation",
    "Refonte syst√®me de paiement",
    "Conformit√© r√©glementaire RGPD",
    "Optimisation des processus m√©tier",
    "D√©ploiement r√©seau 5G",
    "Modernisation SI client",
    "D√©veloppement portail web",
    "Projet IoT entreprise",
    "Smart Grid et compteurs intelligents",
    "Plateforme de trading √©nerg√©tique",
    "Syst√®me de gestion maintenance",
    "Application mobile terrain",
    "Syst√®me de r√©servation nouvelle g√©n√©ration",
    "Optimisation planification",
    "Plateforme data analytics",
    "Modernisation infrastructure",
    "Syst√®me de maintenance pr√©dictive",
    "Plateforme de conception collaborative",
    "Application de suivi production",
    "Syst√®me qualit√© et tra√ßabilit√©",
    "Syst√®me de communication s√©curis√©",
    "Plateforme de cybers√©curit√©",
    "Application de g√©olocalisation",
    "Audit architecture SI",
    "Accompagnement m√©thodes agiles",
    "Strat√©gie cloud native",
    "D√©veloppement nouvelles fonctionnalit√©s",
    "Int√©gration intelligence artificielle",
    "Optimisation performance logiciel",
    "Syst√®me embarqu√© v√©hicule connect√©",
    "Application mobile conducteur",
    "Syst√®me de production intelligent",
    "Infrastructure v√©hicule autonome",
]


def generate_random_date(start_year: int = 2020, end_year: int = 2025) -> date:
    """G√©n√®re une date al√©atoire entre les ann√©es sp√©cifi√©es"""
    start_date = date(start_year, 1, 1)
    end_date = date(end_year, 12, 31)

    delta = end_date - start_date
    random_days = random.randint(0, delta.days)

    return start_date + timedelta(days=random_days)


def generate_missions_for_consultant(
    consultant_id: int, consultant_name: str
) -> List[Dict]:
    """G√©n√®re 2-5 missions pour un consultant"""

    num_missions = random.randint(2, 5)
    missions = []

    print(f"  üë§ G√©n√©ration de {num_missions} missions pour {consultant_name}")

    for i in range(num_missions):
        # S√©lectionner un client al√©atoire
        client_nom = random.choice(CLIENTS_DATA)

        # S√©lectionner un type de mission
        mission_type = random.choice(MISSION_TYPES)
        nom_mission = f"{mission_type} - {client_nom}"

        # G√©n√©rer les dates
        date_debut = generate_random_date(2022, 2024)

        # 70% de chance que la mission soit termin√©e
        statut_en_cours = random.random() < 0.3

        if statut_en_cours:
            date_fin = None
            statut = "en_cours"
            # Mission en cours depuis au moins 1 mois
            if date_debut > date.today() - timedelta(days=30):
                date_debut = date.today() - timedelta(days=random.randint(30, 200))
        else:
            # Mission termin√©e
            statut = "terminee"
            duration_days = random.randint(30, 365)  # Entre 1 mois et 1 an
            date_fin = date_debut + timedelta(days=duration_days)

            # S'assurer que la mission termin√©e ne d√©passe pas aujourd'hui
            if date_fin > date.today():
                date_fin = date.today() - timedelta(days=random.randint(1, 30))

        # Calculer la r√©mun√©ration
        # TJM entre 400‚Ç¨ et 1200‚Ç¨ selon l'exp√©rience
        tjm = random.randint(400, 1200)
        taux_journalier = tjm  # Pour compatibilit√©

        # Calculer les revenus g√©n√©r√©s (estimation)
        if date_fin:
            duration_days = (date_fin - date_debut).days
            jours_travailles = max(1, int(duration_days * 5 / 7))  # 5 jours par semaine
            revenus_generes = tjm * jours_travailles
        else:
            # Mission en cours - estimation depuis le d√©but
            duration_days = (date.today() - date_debut).days
            jours_travailles = max(1, int(duration_days * 5 / 7))
            revenus_generes = tjm * jours_travailles

        # R√¥le/poste sur la mission
        roles = [
            "D√©veloppeur Full Stack",
            "Architecte Solution",
            "Lead Developer",
            "Consultant Technique",
            "Chef de Projet Technique",
            "D√©veloppeur Backend",
            "D√©veloppeur Frontend",
            "DevOps Engineer",
            "Data Engineer",
            "Analyste Fonctionnel",
            "Scrum Master",
            "Product Owner Technique",
        ]
        role = random.choice(roles)

        # Technologies utilis√©es
        tech_sets = [
            "Java, Spring Boot, Angular, PostgreSQL, Docker",
            "Python, Django, React, MongoDB, AWS",
            "C#, .NET Core, Azure, SQL Server, Kubernetes",
            "Node.js, Express, Vue.js, Redis, GCP",
            "PHP, Symfony, MySQL, Docker, Jenkins",
            "Kotlin, Android, Firebase, API REST",
            "Swift, iOS, Core Data, CloudKit",
            "Go, Kubernetes, Docker, AWS, Terraform",
            "Python, FastAPI, React, PostgreSQL, Docker",
            "TypeScript, NestJS, Angular, MongoDB, Azure",
        ]

        technologies_utilisees = random.choice(tech_sets)

        # Description de mission
        descriptions = [
            f"Mission de {mission_type.lower()} pour {client_nom}. Collaboration √©troite avec les √©quipes techniques et m√©tier pour d√©livrer une solution robuste et scalable.",
            f"Projet {mission_type.lower()} dans le cadre de la transformation digitale de {client_nom}. Mise en place d'une architecture moderne et performante.",
            f"D√©veloppement et mise en ≈ìuvre de {mission_type.lower()} pour optimiser les processus m√©tier de {client_nom}. Approche agile avec livraisons it√©ratives.",
            f"Accompagnement de {client_nom} sur le projet {mission_type.lower()} avec une m√©thodologie DevOps et des pratiques de d√©veloppement modernes.",
        ]

        description = random.choice(descriptions)

        mission_data = {
            "consultant_id": consultant_id,
            "nom_mission": nom_mission,
            "client": client_nom,
            "role": role,
            "description": description,
            "date_debut": date_debut,
            "date_fin": date_fin,
            "statut": statut,
            "taux_journalier": taux_journalier,
            "tjm": tjm,
            "revenus_generes": revenus_generes,
            "technologies_utilisees": technologies_utilisees,
        }

        missions.append(mission_data)

    return missions


def create_missions():
    """Cr√©e les missions pour tous les consultants"""
    print("üéØ Cr√©ation des missions...")

    with get_database_session() as session:
        # V√©rifier si des missions existent d√©j√†
        existing_missions = session.query(Mission).count()
        if existing_missions > 0:
            print(f"‚ÑπÔ∏è {existing_missions} missions d√©j√† pr√©sentes")
            try:
                # Security: Validation stricte de l'input utilisateur
                user_input = (
                    input(
                        "Voulez-vous supprimer les missions existantes et en cr√©er de nouvelles ? (y/N): "
                    )
                    .strip()
                    .lower()
                )
                # Limiter aux r√©ponses autoris√©es
                if user_input not in ["y", "yes", "n", "no", ""]:
                    print("‚ùå R√©ponse invalide. Op√©ration annul√©e")
                    return

                if user_input not in ["y", "yes"]:
                    print("‚ùå Op√©ration annul√©e")
                    return
            except (EOFError, KeyboardInterrupt):
                print("\n‚ùå Op√©ration annul√©e")
                return

            # Supprimer les missions existantes
            session.query(Mission).delete()
            session.commit()
            print("üóëÔ∏è Missions existantes supprim√©es")

        # R√©cup√©rer tous les consultants
        consultants = session.query(Consultant).all()
        if not consultants:
            print("‚ùå Aucun consultant trouv√©. Veuillez d'abord cr√©er des consultants.")
            return

        print(f"üë• {len(consultants)} consultants trouv√©s")

        total_missions = 0

        for consultant in consultants:
            consultant_name = f"{consultant.prenom} {consultant.nom}"
            missions_data = generate_missions_for_consultant(
                consultant.id, consultant_name
            )

            # Cr√©er les missions en base
            for mission_data in missions_data:
                mission = Mission(**mission_data)
                session.add(mission)
                total_missions += 1

        session.commit()
        print(f"‚úÖ {total_missions} missions cr√©√©es avec succ√®s !")

        # Statistiques
        missions_en_cours = (
            session.query(Mission).filter(Mission.statut == "en_cours").count()
        )
        missions_terminees = (
            session.query(Mission).filter(Mission.statut == "terminee").count()
        )
        total_revenus = (
            session.query(Mission.revenus_generes)
            .filter(Mission.revenus_generes.isnot(None))
            .all()
        )
        total_revenus_sum = sum(r[0] for r in total_revenus if r[0])

        print(f"üìä Statistiques:")
        print(f"  üîÑ Missions en cours: {missions_en_cours}")
        print(f"  ‚úÖ Missions termin√©es: {missions_terminees}")
        print(f"  üìà Total missions: {total_missions}")
        print(f"  üí∞ Revenus g√©n√©r√©s: {total_revenus_sum:,.0f}‚Ç¨")


def main():
    """Fonction principale"""
    print("üöÄ G√©n√©ration des donn√©es de missions fictives")
    print("=" * 50)

    try:
        # Initialiser la base de donn√©es si n√©cessaire
        init_database()

        # Cr√©er les missions
        create_missions()

        print("\n" + "=" * 50)
        print("‚úÖ G√©n√©ration termin√©e avec succ√®s !")
        print(
            "Vous pouvez maintenant tester les fonctionnalit√©s de missions dans l'application."
        )

    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
