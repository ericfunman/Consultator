"""
Script de test pour v√©rifier le bon fonctionnement du syst√®me de dashboard
V√©rifie toutes les fonctionnalit√©s importantes
"""

import os
import sys

# Ajouter le r√©pertoire parent au PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database.database import get_database_session
from app.services.dashboard_service import DashboardService, DashboardDataService
from app.services.widget_factory import WidgetFactory

def test_database_tables():
    """Test 1: V√©rifier que les tables dashboard existent"""
    print("üîç Test 1: V√©rification des tables dashboard...")
    
    try:
        with get_database_session() as session:
            # Test des requ√™tes de base
            widgets = session.execute("SELECT COUNT(*) FROM widget_catalog").scalar()
            dashboards = session.execute("SELECT COUNT(*) FROM dashboard_configurations").scalar()
            instances = session.execute("SELECT COUNT(*) FROM dashboard_widget_instances").scalar()
            
            print(f"   ‚úÖ Tables existantes:")
            print(f"      üì¶ widget_catalog: {widgets} widgets")
            print(f"      üìä dashboard_configurations: {dashboards} dashboards")
            print(f"      üß© dashboard_widget_instances: {instances} instances")
            
            return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_dashboard_service():
    """Test 2: V√©rifier les services dashboard"""
    print("\nüîç Test 2: Services dashboard...")
    
    try:
        # Test DashboardService
        dashboards = DashboardService.get_all_dashboards()
        print(f"   ‚úÖ DashboardService: {len(dashboards)} dashboards trouv√©s")
        
        for dashboard in dashboards:
            print(f"      üìä {dashboard.name} ({dashboard.target_role})")
        
        # Test DashboardDataService
        data_service = DashboardDataService()
        
        # Test des donn√©es intercontrat
        intercontrat_data = data_service.get_intercontrat_data()
        print(f"   ‚úÖ Donn√©es intercontrat: {intercontrat_data}")
        
        # Test des donn√©es revenue
        revenue_data = data_service.get_revenue_by_bm_data()
        print(f"   ‚úÖ Donn√©es revenue: {len(revenue_data)} BMs")
        
        # Test des KPIs globaux
        global_kpis = data_service.get_global_kpis()
        print(f"   ‚úÖ KPIs globaux: {len(global_kpis)} indicateurs")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_widget_factory():
    """Test 3: V√©rifier le WidgetFactory"""
    print("\nüîç Test 3: Widget Factory...")
    
    try:
        factory = WidgetFactory()
        
        # Test des widgets disponibles
        available_widgets = [
            'intercontrat_rate',
            'consultants_sans_mission', 
            'revenue_by_bm',
            'global_kpis',
            'intercontrat_trend',
            'top_bm_performance'
        ]
        
        for widget_type in available_widgets:
            # On ne peut pas tester le rendu complet sans Streamlit,
            # mais on peut v√©rifier que les m√©thodes existent
            method_name = f"render_{widget_type}"
            if hasattr(factory, method_name):
                print(f"   ‚úÖ Widget {widget_type}: m√©thode {method_name} disponible")
            else:
                print(f"   ‚ùå Widget {widget_type}: m√©thode {method_name} manquante")
                
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_dashboard_access():
    """Test 4: V√©rifier l'acc√®s aux dashboards par r√¥le"""
    print("\nüîç Test 4: Acc√®s dashboards par r√¥le...")
    
    try:
        # Test pour r√¥le direction
        direction_dashboards = DashboardService.get_dashboards_for_role('direction')
        print(f"   ‚úÖ Dashboards direction: {len(direction_dashboards)}")
        
        # Test pour r√¥le bm
        bm_dashboards = DashboardService.get_dashboards_for_role('bm')
        print(f"   ‚úÖ Dashboards BM: {len(bm_dashboards)}")
        
        # Test pour r√¥le inexistant
        unknown_dashboards = DashboardService.get_dashboards_for_role('unknown')
        print(f"   ‚úÖ Dashboards inconnus: {len(unknown_dashboards)}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def main():
    """Ex√©cution de tous les tests"""
    print("üöÄ TESTS DU SYST√àME DASHBOARD")
    print("=" * 50)
    
    tests = [
        test_database_tables,
        test_dashboard_service,
        test_widget_factory,
        test_dashboard_access
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test {test.__name__} √©chou√©: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS DES TESTS")
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ TOUS LES TESTS R√âUSSIS ({passed}/{total})")
        print("‚úÖ Le syst√®me dashboard est op√©rationnel !")
        print("\nüöÄ Vous pouvez maintenant:")
        print("   ‚Ä¢ Aller dans Business Managers > Onglet Dashboard")
        print("   ‚Ä¢ Utiliser les dashboards Direction et BM")
        print("   ‚Ä¢ Cr√©er de nouveaux dashboards personnalis√©s")
    else:
        print(f"‚ö†Ô∏è  TESTS PARTIELS ({passed}/{total})")
        print("üîß Certaines fonctionnalit√©s peuvent n√©cessiter des corrections")

if __name__ == "__main__":
    main()