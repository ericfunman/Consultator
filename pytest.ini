[tool:pytest]
# Configuration pytest pour Consultator

# Dossiers de tests
testpaths = tests

# Patterns de découverte
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Marqueurs personnalisés
markers =
    unit: Tests unitaires rapides
    integration: Tests d'intégration avec DB
    regression: Tests de non-régression
    slow: Tests lents (>5s)
    ui: Tests d'interface utilisateur
    import: Tests d'import de données
    service: Tests de services métier
    critical: Tests critiques à ne pas ignorer

# Options par défaut
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=10
    --durations=10
    --cov-report=term-missing
    --cov-report=xml
    --cov=app
    --cov-fail-under=50
    --ignore=tests_backup
    --ignore=tests_disabled
    --ignore=tests/problematic_tests
    --ignore=tests/regression_backup
    --ignore=diagnostic_openai.py
    --ignore=test_openai_simple.py
    --ignore=test_openai_gpt4.py
    --ignore=test_openai_certifi.py
    --ignore=test_grok_ai.py
    --ignore=test_intent_analysis.py
    --ignore=test_intent_simple.py
    --ignore=test_ui_enhancements.py
    --ignore=test_affectation_display.py

# Filtres d'avertissement
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*pandas.*:FutureWarning
    
# Timeout pour les tests lents
timeout = 300
timeout_method = thread

# Coverage
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    setup.py
    
[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
