"""
Script pour v√©rifier et s'assurer que chaque consultant a au moins une mission
Ajoute des missions aux consultants qui n'en ont pas
"""

import os
import sys
import random
from datetime import datetime, timedelta, date
from typing import List, Dict, Set

# Ajouter le chemin de l'application
current_dir = os.path.dirname(__file__)
app_dir = os.path.join(current_dir, 'app')
if app_dir not in sys.path:
    sys.path.insert(0, app_dir)

try:
    from database.database import get_database_session, init_database
    from database.models import Consultant, Mission
    from sqlalchemy import func
    print("‚úÖ Imports r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

# Donn√©es fictives pour les clients
CLIENTS_DATA = [
    "Soci√©t√© G√©n√©rale",
    "BNP Paribas", 
    "Cr√©dit Agricole",
    "Orange",
    "EDF",
    "SNCF Connect",
    "Airbus",
    "Thales",
    "Capgemini",
    "Accenture",
    "Dassault Syst√®mes",
    "L'Or√©al",
    "Renault",
    "PSA Peugeot",
    "Carrefour",
    "LVMH",
    "Danone",
    "Total Energies",
    "Veolia",
    "Bouygues",
]

# Types de missions
MISSION_TYPES = [
    "Transformation digitale",
    "Migration vers le cloud AWS",
    "D√©veloppement application mobile",
    "Mise en place architecture microservices",
    "Projet de d√©mat√©rialisation",
    "Refonte syst√®me de paiement",
    "Conformit√© r√©glementaire RGPD",
    "Optimisation des processus m√©tier",
    "D√©ploiement r√©seau 5G",
    "Modernisation SI client",
    "D√©veloppement portail web",
    "Projet IoT entreprise",
    "Smart Grid et compteurs intelligents",
    "Plateforme de trading √©nerg√©tique",
    "Syst√®me de gestion maintenance",
    "Application mobile terrain",
    "Syst√®me de r√©servation nouvelle g√©n√©ration",
    "Optimisation planification",
    "Plateforme data analytics",
    "Modernisation infrastructure",
    "Syst√®me de maintenance pr√©dictive",
    "Plateforme de conception collaborative",
    "Application de suivi production",
    "Syst√®me qualit√© et tra√ßabilit√©",
    "Syst√®me de communication s√©curis√©",
    "Plateforme de cybers√©curit√©",
    "Application de g√©olocalisation",
    "Audit architecture SI",
    "Accompagnement m√©thodes agiles",
    "Strat√©gie cloud native",
    "D√©veloppement nouvelles fonctionnalit√©s",
    "Int√©gration intelligence artificielle",
    "Optimisation performance logiciel",
    "Syst√®me embarqu√© v√©hicule connect√©",
    "Application mobile conducteur",
    "Syst√®me de production intelligent",
    "Infrastructure v√©hicule autonome"
]

def analyze_consultant_missions():
    """Analyse les consultants et leurs missions"""
    print("üîç Analyse des missions par consultant...")
    
    with get_database_session() as session:
        # R√©cup√©rer tous les consultants
        consultants = session.query(Consultant).all()
        if not consultants:
            print("‚ùå Aucun consultant trouv√©.")
            return [], []
        
        print(f"üë• {len(consultants)} consultants trouv√©s")
        
        consultants_with_missions = []
        consultants_without_missions = []
        
        for consultant in consultants:
            # Compter les missions pour ce consultant
            mission_count = session.query(Mission).filter(
                Mission.consultant_id == consultant.id
            ).count()
            
            consultant_name = f"{consultant.prenom} {consultant.nom}"
            
            if mission_count > 0:
                consultants_with_missions.append({
                    'id': consultant.id,
                    'name': consultant_name,
                    'mission_count': mission_count
                })
                print(f"  ‚úÖ {consultant_name}: {mission_count} mission(s)")
            else:
                consultants_without_missions.append({
                    'id': consultant.id,
                    'name': consultant_name,
                    'consultant': consultant
                })
                print(f"  ‚ùå {consultant_name}: 0 mission")
        
        print(f"\nüìä R√©sum√©:")
        print(f"  ‚úÖ Consultants avec missions: {len(consultants_with_missions)}")
        print(f"  ‚ùå Consultants sans mission: {len(consultants_without_missions)}")
        
        return consultants_with_missions, consultants_without_missions

def generate_random_date(start_year: int = 2020, end_year: int = 2025) -> date:
    """G√©n√®re une date al√©atoire entre les ann√©es sp√©cifi√©es"""
    start_date = date(start_year, 1, 1)
    end_date = date(end_year, 12, 31)
    
    delta = end_date - start_date
    random_days = random.randint(0, delta.days)
    
    return start_date + timedelta(days=random_days)

def create_mission_for_consultant(consultant_id: int, consultant_name: str) -> Dict:
    """Cr√©e une mission pour un consultant sp√©cifique"""
    
    # S√©lectionner un client al√©atoire
    client_nom = random.choice(CLIENTS_DATA)
    
    # S√©lectionner un type de mission
    mission_type = random.choice(MISSION_TYPES)
    nom_mission = f"{mission_type} - {client_nom}"
    
    # G√©n√©rer les dates
    date_debut = generate_random_date(2022, 2024)
    
    # 60% de chance que la mission soit termin√©e pour avoir un historique
    statut_en_cours = random.random() < 0.4
    
    if statut_en_cours:
        date_fin = None
        statut = "en_cours"
        # Mission en cours depuis au moins 1 mois
        if date_debut > date.today() - timedelta(days=30):
            date_debut = date.today() - timedelta(days=random.randint(30, 180))
    else:
        # Mission termin√©e
        statut = "terminee"
        duration_days = random.randint(60, 300)  # Entre 2 mois et 10 mois
        date_fin = date_debut + timedelta(days=duration_days)
        
        # S'assurer que la mission termin√©e ne d√©passe pas aujourd'hui
        if date_fin > date.today():
            date_fin = date.today() - timedelta(days=random.randint(1, 30))
    
    # Calculer la r√©mun√©ration
    # TJM entre 450‚Ç¨ et 1100‚Ç¨ selon l'exp√©rience
    tjm = random.randint(450, 1100)
    taux_journalier = tjm  # Pour compatibilit√©
    
    # Calculer les revenus g√©n√©r√©s (estimation)
    if date_fin:
        duration_days = (date_fin - date_debut).days
        jours_travailles = max(1, int(duration_days * 5 / 7))  # 5 jours par semaine
        revenus_generes = tjm * jours_travailles
    else:
        # Mission en cours - estimation depuis le d√©but
        duration_days = (date.today() - date_debut).days
        jours_travailles = max(1, int(duration_days * 5 / 7))
        revenus_generes = tjm * jours_travailles
    
    # R√¥le/poste sur la mission
    roles = [
        "D√©veloppeur Full Stack",
        "Architecte Solution",
        "Lead Developer",
        "Consultant Technique",
        "Chef de Projet Technique",
        "D√©veloppeur Backend",
        "D√©veloppeur Frontend",
        "DevOps Engineer",
        "Data Engineer",
        "Analyste Fonctionnel",
        "Scrum Master",
        "Product Owner Technique",
        "Consultant Senior",
        "Expert Technique"
    ]
    role = random.choice(roles)
    
    # Technologies utilis√©es
    tech_sets = [
        "Java, Spring Boot, Angular, PostgreSQL, Docker",
        "Python, Django, React, MongoDB, AWS",
        "C#, .NET Core, Azure, SQL Server, Kubernetes",
        "Node.js, Express, Vue.js, Redis, GCP",
        "PHP, Symfony, MySQL, Docker, Jenkins",
        "Kotlin, Android, Firebase, API REST",
        "Swift, iOS, Core Data, CloudKit",
        "Go, Kubernetes, Docker, AWS, Terraform",
        "Python, FastAPI, React, PostgreSQL, Docker",
        "TypeScript, NestJS, Angular, MongoDB, Azure",
        "Java, Microservices, Kafka, Elasticsearch, AWS",
        "React Native, Node.js, GraphQL, MongoDB",
        "Flutter, Dart, Firebase, GCP",
        "Scala, Spark, Kafka, Cassandra, AWS"
    ]
    
    technologies_utilisees = random.choice(tech_sets)
    
    # Description de mission
    descriptions = [
        f"Mission de {mission_type.lower()} pour {client_nom}. Collaboration √©troite avec les √©quipes techniques et m√©tier pour d√©livrer une solution robuste et scalable. Mise en place de bonnes pratiques de d√©veloppement et d'architecture.",
        f"Projet {mission_type.lower()} dans le cadre de la transformation digitale de {client_nom}. Conception et d√©veloppement d'une architecture moderne et performante avec focus sur la qualit√© et la maintenabilit√©.",
        f"D√©veloppement et mise en ≈ìuvre de {mission_type.lower()} pour optimiser les processus m√©tier de {client_nom}. Approche agile avec livraisons it√©ratives et implication forte des utilisateurs finaux.",
        f"Accompagnement de {client_nom} sur le projet {mission_type.lower()} avec une m√©thodologie DevOps et des pratiques de d√©veloppement modernes. Formation des √©quipes et transfert de comp√©tences."
    ]
    
    description = random.choice(descriptions)
    
    print(f"  üìù Cr√©ation mission: {nom_mission[:50]}... pour {consultant_name}")
    
    mission_data = {
        "consultant_id": consultant_id,
        "nom_mission": nom_mission,
        "client": client_nom,
        "role": role,
        "description": description,
        "date_debut": date_debut,
        "date_fin": date_fin,
        "statut": statut,
        "taux_journalier": taux_journalier,
        "tjm": tjm,
        "revenus_generes": revenus_generes,
        "technologies_utilisees": technologies_utilisees
    }
    
    return mission_data

def add_missions_to_consultants_without(consultants_without_missions: List[Dict]):
    """Ajoute des missions aux consultants qui n'en ont pas"""
    
    if not consultants_without_missions:
        print("‚úÖ Tous les consultants ont d√©j√† au moins une mission !")
        return 0
    
    print(f"\nüéØ Ajout de missions pour {len(consultants_without_missions)} consultants...")
    
    with get_database_session() as session:
        missions_added = 0
        
        for consultant_info in consultants_without_missions:
            consultant_id = consultant_info['id']
            consultant_name = consultant_info['name']
            
            # Cr√©er 1 √† 3 missions pour ce consultant
            num_missions = random.randint(1, 3)
            
            print(f"\nüë§ {consultant_name} - Ajout de {num_missions} mission(s):")
            
            for i in range(num_missions):
                mission_data = create_mission_for_consultant(consultant_id, consultant_name)
                
                # Cr√©er la mission en base
                mission = Mission(**mission_data)
                session.add(mission)
                missions_added += 1
        
        # Sauvegarder toutes les missions
        session.commit()
        
        print(f"\n‚úÖ {missions_added} nouvelles missions cr√©√©es avec succ√®s !")
        return missions_added

def verify_all_consultants_have_missions():
    """V√©rifie que tous les consultants ont maintenant au moins une mission"""
    print("\nüîç V√©rification finale...")
    
    with get_database_session() as session:
        # Requ√™te pour trouver les consultants sans mission
        consultants_without_missions = session.query(Consultant).filter(
            ~Consultant.id.in_(
                session.query(Mission.consultant_id).distinct()
            )
        ).all()
        
        if consultants_without_missions:
            print(f"‚ùå {len(consultants_without_missions)} consultant(s) sans mission d√©tect√©(s):")
            for consultant in consultants_without_missions:
                print(f"  - {consultant.prenom} {consultant.nom}")
            return False
        else:
            # Statistiques finales
            total_consultants = session.query(Consultant).count()
            total_missions = session.query(Mission).count()
            
            print(f"‚úÖ Tous les consultants ont au moins une mission !")
            print(f"üìä Statistiques finales:")
            print(f"  üë• Total consultants: {total_consultants}")
            print(f"  üéØ Total missions: {total_missions}")
            print(f"  üìà Moyenne missions/consultant: {total_missions/total_consultants:.1f}")
            
            return True

def main():
    """Fonction principale"""
    print("üöÄ V√©rification et ajout de missions pour tous les consultants")
    print("=" * 60)
    
    try:
        # Initialiser la base de donn√©es si n√©cessaire
        init_database()
        
        # Analyser la situation actuelle
        consultants_with_missions, consultants_without_missions = analyze_consultant_missions()
        
        # Ajouter des missions si n√©cessaire
        if consultants_without_missions:
            missions_added = add_missions_to_consultants_without(consultants_without_missions)
            
            # V√©rification finale
            verify_all_consultants_have_missions()
            
            print(f"\nüéâ Mission accomplie ! {missions_added} nouvelles missions ajout√©es.")
        else:
            print("\nüéâ Parfait ! Tous les consultants ont d√©j√† au moins une mission.")
        
        print("\n" + "=" * 60)
        print("‚úÖ V√©rification termin√©e avec succ√®s !")
        print("Vous pouvez maintenant tester l'application avec la certitude que chaque consultant a des missions.")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()