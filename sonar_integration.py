"""
Configuration pour l'int√©gration continue avec SonarQube
Gestion automatique des analyses de qualit√© de code
"""

import json
import subprocess
import time
import xml.etree.ElementTree as ET
from datetime import datetime
from pathlib import Path

import requests


class SonarIntegration:
    """Gestionnaire d'int√©gration SonarQube pour l'analyse continue"""

    def __init__(
        self, sonar_url="http://localhost:9000", project_key="consultator-app"
    ):
        self.sonar_url = sonar_url
        self.project_key = project_key
        self.reports_dir = Path("reports")
        self.reports_dir.mkdir(exist_ok=True)

    def run_quality_analysis(self):
        """Ex√©cute l'analyse compl√®te de qualit√© de code"""
        print("üîç D√©marrage de l'analyse de qualit√© compl√®te...")

        # 1. Pylint
        self._run_pylint()

        # 2. Flake8
        self._run_flake8()

        # 3. Bandit (s√©curit√©)
        self._run_bandit()

        # 4. Tests avec coverage
        self._run_tests_with_coverage()

        # 5. SonarQube Scanner
        self._run_sonar_scanner()

        print("‚úÖ Analyse de qualit√© termin√©e !")

    def _run_pylint(self):
        """Ex√©cute Pylint et g√©n√®re le rapport"""
        print("üìä Ex√©cution de Pylint...")
        try:
            result = subprocess.run(
                ["pylint", "app/", "--output-format=parseable", "--score=yes"],
                capture_output=True,
                text=True,
            )

            with open(
                self.reports_dir / "pylint-report.txt", "w", encoding="utf-8"
            ) as f:
                f.write(result.stdout)
                f.write(result.stderr)

            print(f"‚úÖ Rapport Pylint g√©n√©r√© : {self.reports_dir}/pylint-report.txt")

        except Exception as e:
            print(f"‚ùå Erreur Pylint : {e}")

    def _run_flake8(self):
        """Ex√©cute Flake8 et g√©n√®re le rapport"""
        print("üìä Ex√©cution de Flake8...")
        try:
            result = subprocess.run(
                [
                    "flake8",
                    "app/",
                    "--format=default",
                    "--output-file",
                    str(self.reports_dir / "flake8-report.txt"),
                ],
                capture_output=True,
                text=True,
            )

            print(f"‚úÖ Rapport Flake8 g√©n√©r√© : {self.reports_dir}/flake8-report.txt")

        except Exception as e:
            print(f"‚ùå Erreur Flake8 : {e}")

    def _run_bandit(self):
        """Ex√©cute Bandit (analyse de s√©curit√©)"""
        print("üîí Ex√©cution de Bandit...")
        try:
            result = subprocess.run(
                [
                    "bandit",
                    "-r",
                    "app/",
                    "-f",
                    "json",
                    "-o",
                    str(self.reports_dir / "bandit-report.json"),
                ],
                capture_output=True,
                text=True,
            )

            print(f"‚úÖ Rapport Bandit g√©n√©r√© : {self.reports_dir}/bandit-report.json")

        except Exception as e:
            print(f"‚ùå Erreur Bandit : {e}")

    def _run_tests_with_coverage(self):
        """Ex√©cute les tests avec coverage"""
        print("üß™ Ex√©cution des tests avec coverage...")
        try:
            # Coverage run
            subprocess.run(
                ["coverage", "run", "--source=app", "-m", "pytest", "tests/", "-v"],
                check=True,
            )

            # Coverage XML pour SonarQube
            subprocess.run(
                ["coverage", "xml", "-o", str(self.reports_dir / "coverage.xml")],
                check=True,
            )

            # Coverage HTML pour visualisation
            subprocess.run(
                ["coverage", "html", "-d", str(self.reports_dir / "htmlcov")],
                check=True,
            )

            print(f"‚úÖ Rapports de coverage g√©n√©r√©s")

        except Exception as e:
            print(f"‚ùå Erreur coverage : {e}")

    def _run_sonar_scanner(self):
        """Ex√©cute SonarQube Scanner"""
        print("üîç Ex√©cution de SonarQube Scanner...")
        try:
            result = subprocess.run(
                [
                    "sonar-scanner",
                    f"-Dsonar.projectKey={self.project_key}",
                    f"-Dsonar.host.url={self.sonar_url}",
                    "-Dsonar.projectBaseDir=.",
                    "-Dsonar.python.coverage.reportPaths=reports/coverage.xml",
                    "-Dsonar.python.pylint.reportPath=reports/pylint-report.txt",
                    "-Dsonar.python.flake8.reportPath=reports/flake8-report.txt",
                    "-Dsonar.python.bandit.reportPath=reports/bandit-report.json",
                ],
                capture_output=True,
                text=True,
            )

            print("‚úÖ Analyse SonarQube termin√©e")
            return result.returncode == 0

        except Exception as e:
            print(f"‚ùå Erreur SonarQube Scanner : {e}")
            return False

    def get_quality_gate_status(self):
        """R√©cup√®re le statut de la Quality Gate"""
        try:
            response = requests.get(
                f"{self.sonar_url}/api/qualitygates/project_status",
                params={"projectKey": self.project_key},
            )

            if response.status_code == 200:
                data = response.json()
                return data.get("projectStatus", {}).get("status")
            else:
                print(f"‚ùå Erreur r√©cup√©ration Quality Gate : {response.status_code}")
                return None

        except Exception as e:
            print(f"‚ùå Erreur API SonarQube : {e}")
            return None

    def wait_for_analysis_completion(self, timeout=300):
        """Attend la fin de l'analyse SonarQube"""
        print("‚è≥ Attente de la fin de l'analyse...")
        start_time = time.time()

        while time.time() - start_time < timeout:
            status = self.get_quality_gate_status()

            if status == "OK":
                print("‚úÖ Quality Gate : PASSED")
                return True
            elif status == "ERROR":
                print("‚ùå Quality Gate : FAILED")
                return False
            elif status is None:
                print("üîÑ Analyse en cours...")
                time.sleep(10)
            else:
                print(f"üîÑ Statut : {status}")
                time.sleep(10)

        print("‚è∞ Timeout atteint")
        return False

    def generate_quality_report(self):
        """G√©n√®re un rapport de qualit√© consolid√©"""
        print("üìã G√©n√©ration du rapport de qualit√©...")

        report = {
            "timestamp": datetime.now().isoformat(),
            "project": self.project_key,
            "reports": [],
        }

        # Pylint score
        pylint_file = self.reports_dir / "pylint-report.txt"
        if pylint_file.exists():
            with open(pylint_file, "r", encoding="utf-8") as f:
                content = f.read()
                if "Your code has been rated at" in content:
                    score_line = [
                        line
                        for line in content.split("\n")
                        if "Your code has been rated at" in line
                    ]
                    if score_line:
                        score = score_line[0].split("rated at ")[1].split("/10")[0]
                        report["reports"].append(
                            {
                                "tool": "Pylint",
                                "score": float(score),
                                "status": (
                                    "PASSED" if float(score) >= 8.0 else "WARNING"
                                ),
                            }
                        )

        # Coverage
        coverage_file = self.reports_dir / "coverage.xml"
        if coverage_file.exists():
            try:
                tree = ET.parse(coverage_file)
                root = tree.getroot()
                coverage_pct = float(root.attrib.get("line-rate", 0)) * 100
                report["reports"].append(
                    {
                        "tool": "Coverage",
                        "percentage": coverage_pct,
                        "status": "PASSED" if coverage_pct >= 80 else "WARNING",
                    }
                )
            except Exception as e:
                print(f"‚ùå Erreur lecture coverage : {e}")

        # Quality Gate
        quality_gate = self.get_quality_gate_status()
        if quality_gate:
            report["quality_gate"] = quality_gate

        # Sauvegarde du rapport
        report_file = (
            self.reports_dir
            / f"quality-report-{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ Rapport qualit√© sauvegard√© : {report_file}")
        return report


def main():
    """Point d'entr√©e principal"""
    sonar = SonarIntegration()

    # Analyse compl√®te
    sonar.run_quality_analysis()

    # Attente et v√©rification
    success = sonar.wait_for_analysis_completion()

    # G√©n√©ration du rapport final
    report = sonar.generate_quality_report()

    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DE L'ANALYSE DE QUALIT√â")
    print("=" * 50)

    for item in report.get("reports", []):
        tool = item["tool"]
        if "score" in item:
            print(f"{tool}: {item['score']}/10 - {item['status']}")
        elif "percentage" in item:
            print(f"{tool}: {item['percentage']:.1f}% - {item['status']}")

    if "quality_gate" in report:
        print(f"Quality Gate: {report['quality_gate']}")

    return success


if __name__ == "__main__":
    main()
