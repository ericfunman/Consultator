name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Initialize database
      run: |
        python -c "from app.database.database import init_database; init_database()"

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing -n auto --tb=short || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install pylint black flake8 isort bandit radon

    - name: Run Black (code formatting)
      run: |
        black --check --diff app/

    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff app/

    - name: Run Flake8 (linting)
      run: |
        flake8 app/ --max-line-length=150 --extend-ignore=E203,W503,F401,F841,W291,W293,E501,C901,E722,F541 --max-complexity=20 || true

    - name: Run Pylint
      run: |
        pylint app/ --output-format=text || true

    - name: Run Bandit (security)
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Radon (complexity)
      run: |
        radon cc app/ -a -o SCORE > complexity_report.txt || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2

    - name: Deploy to Streamlit Cloud
      run: |
        echo "ðŸš€ DÃ©ploiement vers Streamlit Cloud"
        # Note: Configuration Streamlit Cloud Ã  faire manuellement
        # ou utiliser l'API Streamlit si disponible
