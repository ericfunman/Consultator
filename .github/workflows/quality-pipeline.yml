name: Quality Assurance Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_reques        if [ -n "$SONAR_TOKEN" ]; then
          echo "‚úÖ SONAR_TOKEN trouv√© (longueur: ${#SONAR_TOKEN})"
          echo "üîß Token starts with: ${SONAR_TOKEN:0:4}..."
          # D√©finir une variable pour indiquer que SonarQube peut √™tre ex√©cut√©
          echo "SONARQUBE_ENABLED=true" >> $GITHUB_ENV
        else
          echo "‚ùå SONAR_TOKEN manquant - SonarQube sera skip"
          echo ""
          echo "üìã INSTRUCTIONS POUR CONFIGURER SONARQUBE :"
          echo "=========================================="
          echo "1. Allez sur https://sonarcloud.io/account/security/"
          echo "2. G√©n√©rez un nouveau token"
          echo "3. Dans GitHub : Settings > Secrets and variables > Actions"
          echo "4. Ajoutez un nouveau secret nomm√© 'SONAR_TOKEN'"
          echo "5. Collez votre token SonarCloud"
          echo ""
          echo "üîó Liens utiles :"
          echo "- SonarCloud: https://sonarcloud.io"
          echo "- Documentation: https://docs.sonarsource.com/sonarcloud/"
          echo "SONARQUBE_ENABLED=false" >> $GITHUB_ENV
        fiho "üìã INSTRUCTIONS POUR CONFIGURER SONARQUBE :" branches: [ main, master ]
  schedule:
    # Ex√©cution quotidienne √† 6h00 UTC
    - cron: '0 6 * * *'

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # N√©cessaire pour SonarQube

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Requirements de base install√©s"

    - name: Install test dependencies
      run: |
        pip install -r requirements-test.txt
        echo "‚úÖ D√©pendances de test install√©es"

    - name: Verify linting tools installation
      run: |
        echo "üîç V√©rification des outils de linting..."
        python -c "import pylint; print('‚úÖ Pylint OK')" || echo "‚ùå Pylint manquant"
        python -c "import flake8; print('‚úÖ Flake8 OK')" || echo "‚ùå Flake8 manquant"
        python -c "import bandit; print('‚úÖ Bandit OK')" || echo "‚ùå Bandit manquant"
        echo "‚úÖ V√©rification termin√©e"

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run automated quality pipeline
      run: |
        python run_quality_pipeline.py --skip-install
      continue-on-error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          !reports/htmlcov/

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12' && env.CODECOV_TOKEN != ''
      uses: codecov/codecov-action@v4
      with:
        file: ./reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

    - name: Check coverage file
      if: matrix.python-version == '3.12'
      run: |
        if [ -f reports/coverage.xml ]; then
          echo "‚úÖ Fichier de couverture trouv√©"
          head -10 reports/coverage.xml
        else
          echo "‚ö†Ô∏è Fichier de couverture manquant - g√©n√©ration d'un fichier vide"
          mkdir -p reports
          echo '<?xml version="1.0" encoding="UTF-8"?><coverage></coverage>' > reports/coverage.xml
        fi

    - name: Check SonarQube token
      if: matrix.python-version == '3.12'
      run: |
        echo "üîç V√©rification du token SonarQube..."
        if [ -n "$SONAR_TOKEN" ]; then
          echo "‚úÖ SONAR_TOKEN trouv√©"
          echo "üîß Token length: ${#SONAR_TOKEN}"
        else
          echo "‚ùå SONAR_TOKEN manquant - SonarQube sera skip"
          echo ""
          echo "ÔøΩ INSTRUCTIONS POUR CONFIGURER SONARQUBE :"
          echo "=========================================="
          echo "1. Allez sur https://sonarcloud.io/account/security/"
          echo "2. G√©n√©rez un nouveau token"
          echo "3. Dans GitHub : Settings > Secrets and variables > Actions"
          echo "4. Ajoutez un nouveau secret nomm√© 'SONAR_TOKEN'"
          echo "5. Collez votre token SonarCloud"
          echo ""
          echo "üîó Liens utiles :"
          echo "- SonarCloud: https://sonarcloud.io"
          echo "- Documentation: https://docs.sonarsource.com/sonarcloud/"
        fi
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Setup SonarQube properties
      if: matrix.python-version == '3.12' && env.SONARQUBE_ENABLED == 'true'
      run: |
        echo "üîß Configuration SonarQube..."
        # S'assurer que le fichier de couverture existe
        if [ ! -f reports/coverage.xml ]; then
          echo "‚ö†Ô∏è Fichier coverage.xml manquant, cr√©ation d'un fichier vide"
          mkdir -p reports
          echo '<?xml version="1.0" encoding="UTF-8"?><coverage></coverage>' > reports/coverage.xml
        fi

    - name: SonarQube Scan
      if: matrix.python-version == '3.12' && env.SONARQUBE_ENABLED == 'true'
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=ericfunman_Consultator
          -Dsonar.organization=ericfunman
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.python.coverage.reportPaths=reports/coverage.xml

  regression-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run regression tests
      run: |
        python run_quality_pipeline.py --regression-only

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/quality-report.txt')) {
            const report = fs.readFileSync('reports/quality-report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## üìä Rapport de Qualit√© Automatique\n\n```\n' + report + '\n```'
            });
          }

  performance-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        echo "üîç Recherche de tests de performance..."
        mkdir -p reports

        # Cr√©er un fichier benchmark vide par d√©faut
        echo '{"benchmarks": []}' > reports/benchmark.json

        # Essayer d'ex√©cuter les tests de performance
        if pytest tests/test_performance_v14.py -v --benchmark-json=reports/benchmark.json --benchmark-save=benchmark_results; then
          echo "‚úÖ Tests de performance ex√©cut√©s avec succ√®s"
        elif pytest tests/ -k "performance" -v --benchmark-json=reports/benchmark.json --benchmark-save=benchmark_results; then
          echo "‚úÖ Tests de performance trouv√©s et ex√©cut√©s"
        elif pytest tests/ -v --benchmark-json=reports/benchmark.json --benchmark-save=benchmark_results; then
          echo "‚úÖ Tous les tests ex√©cut√©s en mode benchmark"
        else
          echo "‚ÑπÔ∏è Aucune ex√©cution de benchmark possible, fichier par d√©faut conserv√©"
        fi

        # V√©rifier le contenu du fichier benchmark
        if [ -f reports/benchmark.json ]; then
          echo "‚úÖ Fichier benchmark g√©n√©r√©:"
          head -20 reports/benchmark.json
        else
          echo "‚ùå Fichier benchmark manquant"
          exit 1
        fi

    - name: Configure Git identity
      run: |
        git config --global user.email "lapinae@gmail.com"
        git config --global user.name "Eric Lapina"
        echo "‚úÖ Identit√© Git configur√©e pour Eric Lapina"

    - name: Create gh-pages branch if needed
      run: |
        echo "üîß V√©rification de la branche gh-pages..."
        if ! git ls-remote --heads origin gh-pages | grep gh-pages; then
          echo "üìù Cr√©ation de la branche gh-pages..."
          git checkout --orphan gh-pages
          git rm -rf .
          echo "# Performance Benchmarks" > README.md
          echo "Ce repository contient les r√©sultats des benchmarks de performance." >> README.md
          git add README.md
          git commit -m "Initial commit for gh-pages branch"
          git push origin gh-pages
          git checkout master
          echo "‚úÖ Branche gh-pages cr√©√©e"
        else
          echo "‚úÖ Branche gh-pages existe d√©j√†"
        fi

    - name: Store benchmark result
      if: always()
      continue-on-error: true
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: reports/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        fail-on-alert: false
        alert-threshold: 200%

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        mkdir -p reports
        pip install bandit
        bandit -r app/ -f json -o reports/bandit-security.json || echo "Bandit completed with warnings"

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output reports/safety-check.json || echo "Safety completed with warnings"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/*security*.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-check, regression-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "D√©ploiement en staging..."
        # Ici, ajouter les commandes de d√©ploiement sp√©cifiques

  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality-check, regression-tests, performance-tests, security-scan]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "D√©ploiement en production..."
        # Ici, ajouter les commandes de d√©ploiement sp√©cifiques

  notify-teams:
    runs-on: ubuntu-latest
    needs: [quality-check, regression-tests]
    if: always()

    steps:
    - name: Notify Teams
      if: failure()
      run: |
        echo "Notification d'√©chec du pipeline envoy√©e"
        # Ici, ajouter la notification Teams/Slack/Discord

    - name: Notify success
      if: success()
      run: |
        echo "Pipeline r√©ussi - notification envoy√©e"
