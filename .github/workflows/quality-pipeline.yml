name: Quality Assurance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ex√©cution quotidienne √† 6h00 UTC
    - cron: '0 6 * * *'

jobs:
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # N√©cessaire pour SonarQube

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run automated quality pipeline
      run: |
        python run_quality_pipeline.py --skip-install
      continue-on-error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          !reports/htmlcov/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./reports/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: SonarQube Scan
      if: matrix.python-version == '3.11'
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: .sonarqube/report-task.txt

  regression-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run regression tests
      run: |
        python run_quality_pipeline.py --regression-only

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/quality-report.txt')) {
            const report = fs.readFileSync('reports/quality-report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## üìä Rapport de Qualit√© Automatique\n\n```\n' + report + '\n```'
            });
          }

  performance-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -m "performance" --benchmark-only --benchmark-json=reports/benchmark.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: reports/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o reports/bandit-security.json

    - name: Run Safety check
      run: |
        safety check --json --output reports/safety-check.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: reports/*security*.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-check, regression-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "D√©ploiement en staging..."
        # Ici, ajouter les commandes de d√©ploiement sp√©cifiques

  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality-check, regression-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "D√©ploiement en production..."
        # Ici, ajouter les commandes de d√©ploiement sp√©cifiques

  notify-teams:
    runs-on: ubuntu-latest
    needs: [quality-check, regression-tests]
    if: always()

    steps:
    - name: Notify Teams
      if: failure()
      run: |
        echo "Notification d'√©chec du pipeline envoy√©e"
        # Ici, ajouter la notification Teams/Slack/Discord

    - name: Notify success
      if: success()
      run: |
        echo "Pipeline r√©ussi - notification envoy√©e"
