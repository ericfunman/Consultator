name: SonarCloud Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist faker

    - name: Initialize database
      run: |
        python -c "from app.database.database import init_database; init_database()"

    - name: Run tests with coverage
      run: |
        mkdir -p reports
        echo "üöÄ Starting test execution with coverage..."
        echo "Creating initial coverage file..."
        echo '<?xml version="1.0" ?><coverage version="7.10.6" timestamp="'$(date +%s)'000" lines-valid="0" lines-covered="0" line-rate="0.0" branches-covered="0" branches-valid="0" branch-rate="0" complexity="0"><sources><source>.</source></sources><packages></packages></coverage>' > reports/coverage.xml

        echo "Running tests..."
        if pytest --cov=app --cov-report=xml:reports/coverage.xml --cov-report=html:reports/htmlcov --tb=no -q --maxfail=5; then
          echo "‚úÖ Tests passed successfully"
        else
          echo "‚ùå Some tests failed, but coverage file should still be generated"
          # Check if coverage file exists and has content
          if [ -f reports/coverage.xml ] && [ $(wc -c < reports/coverage.xml) -gt 200 ]; then
            echo "‚úÖ Coverage file exists and has content"
          else
            echo "‚ö†Ô∏è Coverage file is empty or too small, keeping initial file"
          fi
        fi

    - name: Verify coverage file
      run: |
        echo "üîç Verifying coverage file..."
        if [ -f reports/coverage.xml ]; then
          echo "‚úÖ Coverage file exists"
          # Check if file has content (more than just empty XML)
          if [ $(wc -c < reports/coverage.xml) -gt 100 ]; then
            echo "‚úÖ Coverage file has content"
            head -3 reports/coverage.xml
            # Extract coverage percentage from XML
            COVERAGE=$(grep -o 'line-rate="[^"]*"' reports/coverage.xml | head -1 | sed 's/line-rate="//' | sed 's/"//')
            if [ ! -z "$COVERAGE" ]; then
              COVERAGE_PERCENT=$(echo "scale=2; $COVERAGE * 100" | bc 2>/dev/null || echo "0")
              echo "üìä Coverage rate: ${COVERAGE_PERCENT}%"
            fi
          else
            echo "‚ö†Ô∏è Coverage file is empty or too small"
            cat reports/coverage.xml
          fi
        else
          echo "‚ùå Coverage file not found!"
          ls -la reports/
          exit 1
        fi

    - name: Setup Java
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH

    - name: Setup SonarQube Scanner
      run: |
        wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner.zip
        echo "SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-5.0.1.3006-linux" >> $GITHUB_ENV
        echo "$(pwd)/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

    - name: SonarCloud Scan
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "üîß Starting SonarQube analysis..."
        # Ensure coverage file exists
        if [ ! -f reports/coverage.xml ]; then
          echo "Creating minimal coverage file..."
          mkdir -p reports
          echo '<?xml version="1.0" ?><coverage version="7.10.6" timestamp="'$(date +%s)'000" lines-valid="0" lines-covered="0" line-rate="0.0" branches-covered="0" branches-valid="0" branch-rate="0" complexity="0"><sources><source>.</source></sources><packages></packages></coverage>' > reports/coverage.xml
        fi

        echo "Coverage file size: $(wc -c < reports/coverage.xml) bytes"
        head -3 reports/coverage.xml

        sonar-scanner \
          -Dsonar.projectKey=ericfunman_Consultator \
          -Dsonar.organization=ericfunman \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.python.coverage.reportPaths=reports/coverage.xml \
          -Dsonar.sources=app \
          -Dsonar.tests=tests \
          -Dsonar.exclusions=**/test_*.py,**/*_test.py,**/conftest.py,**/migrations/**
