#!/usr/bin/env python3
"""
Script pour v√©rifier l'√©tat du CI/CD GitHub Actions
"""
import json
import requests
from datetime import datetime

def check_github_actions():
    """V√©rifie l'√©tat des derni√®res ex√©cutions GitHub Actions"""
    repo = "ericfunman/Consultator"
    url = f"https://api.github.com/repos/{repo}/actions/runs?per_page=3"
    
    try:
        print(f"üîç V√©rification du CI/CD pour {repo}...")
        response = requests.get(url)
        response.raise_for_status()
        
        data = response.json()
        runs = data.get("workflow_runs", [])
        
        if not runs:
            print("‚ùå Aucune ex√©cution trouv√©e")
            return
        
        print(f"\nüìä {len(runs)} derni√®res ex√©cutions:\n")
        
        for i, run in enumerate(runs, 1):
            name = run.get("name", "Unknown")
            status = run.get("status", "unknown")
            conclusion = run.get("conclusion", "N/A")
            created = run.get("created_at", "")
            branch = run.get("head_branch", "unknown")
            commit = run.get("head_sha", "")[:7]
            run_number = run.get("run_number", 0)
            html_url = run.get("html_url", "")
            
            # Emoji pour le statut
            status_emoji = {
                "completed": "‚úÖ" if conclusion == "success" else "‚ùå",
                "in_progress": "‚è≥",
                "queued": "‚è±Ô∏è",
                "waiting": "‚è∏Ô∏è"
            }.get(status, "‚ùì")
            
            conclusion_emoji = {
                "success": "‚úÖ",
                "failure": "‚ùå",
                "cancelled": "üö´",
                "skipped": "‚è≠Ô∏è",
                "timed_out": "‚è±Ô∏è"
            }.get(conclusion, "")
            
            print(f"{status_emoji} Run #{run_number} - {name}")
            print(f"   Status: {status} | Conclusion: {conclusion} {conclusion_emoji}")
            print(f"   Branch: {branch} | Commit: {commit}")
            print(f"   Cr√©√©: {created}")
            print(f"   URL: {html_url}")
            
            # Si √©chec, r√©cup√©rer les d√©tails
            if conclusion == "failure":
                print(f"\n   üîç R√©cup√©ration des d√©tails de l'√©chec...")
                jobs_url = run.get("jobs_url", "")
                if jobs_url:
                    jobs_response = requests.get(jobs_url)
                    if jobs_response.status_code == 200:
                        jobs_data = jobs_response.json()
                        failed_jobs = [j for j in jobs_data.get("jobs", []) if j.get("conclusion") == "failure"]
                        
                        for job in failed_jobs:
                            job_name = job.get("name", "Unknown")
                            print(f"      ‚ùå Job √©chou√©: {job_name}")
                            
                            # R√©cup√©rer les steps √©chou√©s
                            steps = job.get("steps", [])
                            for step in steps:
                                if step.get("conclusion") == "failure":
                                    step_name = step.get("name", "Unknown")
                                    print(f"         üí• Step: {step_name}")
            
            print()
        
    except requests.RequestException as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")

if __name__ == "__main__":
    check_github_actions()
