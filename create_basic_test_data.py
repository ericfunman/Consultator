"""
Script simple pour g√©n√©rer des donn√©es de test de base
"""

import sys
import os
from datetime import datetime
from faker import Faker

# Ajouter le dossier app au path
sys.path.append(os.path.join(os.path.dirname(__file__), "app"))

from app.database.database import get_database_session, init_database
from app.database.models import Practice, BusinessManager, Consultant, Competence

fake = Faker("fr_FR")

def create_basic_data():
    """Cr√©e des donn√©es de test de base"""
    print("üöÄ G√©n√©ration de donn√©es de test simples")
    print("=" * 50)

    # Initialiser la base de donn√©es
    init_database()

    # G√©n√©rer un suffixe unique pour √©viter les conflits
    import time
    unique_suffix = str(int(time.time()))[-4:]  # 4 derniers chiffres du timestamp

    with get_database_session() as session:
        try:
            # 1. Cr√©er quelques practices
            print("üè¢ Cr√©ation des practices...")
            practices_data = [
                (f"Data Engineering {unique_suffix}", "Ing√©nierie des donn√©es"),
                (f"Data Science {unique_suffix}", "Science des donn√©es"),
                (f"Cloud & DevOps {unique_suffix}", "Cloud et automatisation"),
                (f"Frontend Development {unique_suffix}", "D√©veloppement frontend"),
                (f"Backend Development {unique_suffix}", "D√©veloppement backend")
            ]

            practices = []
            for nom, description in practices_data:
                practice = Practice(
                    nom=nom,
                    description=description,
                    responsable=fake.name(),
                    actif=True,
                    date_creation=datetime.now()
                )
                session.add(practice)
                practices.append(practice)

            session.commit()
            print(f"‚úÖ {len(practices)} practices cr√©√©es")

            # 2. Cr√©er quelques business managers
            print("üë®‚Äçüíº Cr√©ation des business managers...")
            bm_data = [
                ("Dupont", "Jean", f"j.dupont{unique_suffix}@consultator.fr"),
                ("Martin", "Marie", f"m.martin{unique_suffix}@consultator.fr"),
                ("Bernard", "Pierre", f"p.bernard{unique_suffix}@consultator.fr"),
                ("Durand", "Sophie", f"s.durand{unique_suffix}@consultator.fr"),
                ("Moreau", "Marc", f"m.moreau{unique_suffix}@consultator.fr")
            ]

            business_managers = []
            for nom, prenom, email in bm_data:
                bm = BusinessManager(
                    nom=nom,
                    prenom=prenom,
                    email=email,
                    telephone=fake.phone_number(),
                    actif=True,
                    date_creation=datetime.now()
                )
                session.add(bm)
                business_managers.append(bm)

            session.commit()
            print(f"‚úÖ {len(business_managers)} business managers cr√©√©s")

            # 3. Cr√©er quelques consultants
            print("üë• Cr√©ation des consultants...")
            consultants_data = [
                ("Dupont", "Jean", f"jean.dupont{unique_suffix}@email.com", 65000),
                ("Martin", "Marie", f"marie.martin{unique_suffix}@email.com", 58000),
                ("Bernard", "Pierre", f"pierre.bernard{unique_suffix}@email.com", 72000),
                ("Durand", "Sophie", f"sophie.durand{unique_suffix}@email.com", 55000),
                ("Moreau", "Marc", f"marc.moreau{unique_suffix}@email.com", 68000),
                ("Petit", "Isabelle", f"isabelle.petit{unique_suffix}@email.com", 61000),
                ("Robert", "Laurent", f"laurent.robert{unique_suffix}@email.com", 69000),
                ("Richard", "Nathalie", f"nathalie.richard{unique_suffix}@email.com", 56000),
                ("Dubois", "Olivier", f"olivier.dubois{unique_suffix}@email.com", 73000),
                ("Leroy", "Catherine", f"catherine.leroy{unique_suffix}@email.com", 59000)
            ]

            consultants = []
            for nom, prenom, email, salaire in consultants_data:
                consultant = Consultant(
                    nom=nom,
                    prenom=prenom,
                    email=email,
                    telephone=fake.phone_number(),
                    salaire_actuel=salaire,
                    practice_id=practices[len(consultants) % len(practices)].id,
                    disponibilite=fake.boolean(),
                    date_creation=datetime.now(),
                    derniere_maj=datetime.now()
                )
                session.add(consultant)
                consultants.append(consultant)

            session.commit()
            print(f"‚úÖ {len(consultants)} consultants cr√©√©s")

            # 4. Cr√©er quelques comp√©tences
            print("üîß Cr√©ation des comp√©tences...")
            competences_data = [
                ("Python", "Backend", "Langage de programmation"),
                ("Java", "Backend", "Langage de programmation"),
                ("JavaScript", "Frontend", "Langage de programmation"),
                ("React", "Frontend", "Framework frontend"),
                ("SQL", "Database", "Langage de base de donn√©es"),
                ("AWS", "Cloud", "Services cloud"),
                ("Docker", "DevOps", "Conteneurisation"),
                ("Git", "DevOps", "Contr√¥le de version")
            ]

            competences = []
            for nom, categorie, description in competences_data:
                competence = Competence(
                    nom=nom,
                    categorie=categorie,
                    type_competence="technique",
                    description=description
                )
                session.add(competence)
                competences.append(competence)

            session.commit()
            print(f"‚úÖ {len(competences)} comp√©tences cr√©√©es")

            print("=" * 50)
            print("üéâ DONN√âES DE TEST CR√â√âES AVEC SUCC√àS!")
            print(f"üè¢ Practices: {len(practices)}")
            print(f"üë®‚Äçüíº Business Managers: {len(business_managers)}")
            print(f"üë• Consultants: {len(consultants)}")
            print(f"üîß Comp√©tences: {len(competences)}")
            print("=" * 50)

        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
            session.rollback()
            raise

if __name__ == "__main__":
    create_basic_data()
