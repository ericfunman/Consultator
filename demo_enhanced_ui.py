"""
D√©monstration des am√©liorations UI pour Consultator
Montre l'utilisation des nouveaux composants d'interface
"""

import streamlit as st
import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.ui.enhanced_ui import (
    AdvancedUIFilters,
    RealTimeSearch,
    DataTableEnhancer,
    LoadingSpinner,
    NotificationManager,
    create_enhanced_consultants_view
)
from app.services.cache_service import get_cache_stats


def main():
    """Fonction principale de d√©monstration"""
    st.set_page_config(
        page_title="Consultator - UI Am√©lior√©e",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("üöÄ Consultator - Interface Am√©lior√©e")
    st.markdown("---")

    # Menu de navigation
    menu = st.sidebar.selectbox(
        "Navigation",
        ["Vue Consultants Am√©lior√©e", "D√©monstration Composants", "Statistiques Cache"]
    )

    if menu == "Vue Consultants Am√©lior√©e":
        show_enhanced_consultants_view()
    elif menu == "D√©monstration Composants":
        show_component_demo()
    elif menu == "Statistiques Cache":
        show_cache_stats()


def show_enhanced_consultants_view():
    """Affiche la vue am√©lior√©e des consultants"""
    st.header("üë• Vue Consultants Am√©lior√©e")

    st.markdown("""
    Cette vue int√®gre toutes les am√©liorations UI :
    - üîç **Filtres avanc√©s** dans la sidebar
    - ‚ö° **Recherche en temps r√©el** avec debounce
    - üìä **Tableau interactif** avec s√©lection
    - üéØ **Actions contextuelles** sur les √©l√©ments s√©lectionn√©s
    - üìà **M√©triques en temps r√©el**
    """)

    try:
        create_enhanced_consultants_view()
    except Exception as e:
        st.error(f"Erreur lors du chargement de la vue : {str(e)}")
        st.info("Assurez-vous que la base de donn√©es est initialis√©e et que les services sont disponibles.")


def show_component_demo():
    """D√©montre l'utilisation des diff√©rents composants"""
    st.header("üß© D√©monstration des Composants UI")

    tab1, tab2, tab3, tab4 = st.tabs([
        "üîç Filtres Avanc√©s",
        "‚ö° Recherche Temps R√©el",
        "üìä Tableaux Am√©lior√©s",
        "üîî Notifications"
    ])

    with tab1:
        st.subheader("Filtres Avanc√©s")
        st.markdown("""
        Les filtres avanc√©s permettent de :
        - Filtrer par texte (nom, email, soci√©t√©)
        - Filtrer par practice, grade, disponibilit√©
        - Filtrer par salaire et exp√©rience
        - Filtrer par dates d'entr√©e
        - R√©initialiser facilement tous les filtres
        """)

        # Exemple d'utilisation
        filters = AdvancedUIFilters()
        st.code("""
# Utilisation basique
filters = AdvancedUIFilters()
applied_filters = filters.render_filters_sidebar()
filtered_data = filters.apply_filters(data)
        """)

    with tab2:
        st.subheader("Recherche en Temps R√©el")
        st.markdown("""
        La recherche en temps r√©el offre :
        - Recherche instantan√©e pendant la saisie
        - Debounce pour √©viter les requ√™tes trop fr√©quentes
        - Cache intelligent des r√©sultats
        - Performance optimis√©e
        """)

        # Exemple d'utilisation
        search = RealTimeSearch()
        st.code("""
# Utilisation de la recherche
search = RealTimeSearch()
if search.should_search():
    results = search.search_with_cache(search_term)
        """)

    with tab3:
        st.subheader("Tableaux Am√©lior√©s")
        st.markdown("""
        Les tableaux am√©lior√©s incluent :
        - S√©lection d'une ligne √† la fois
        - Colonnes configurables
        - Actions contextuelles
        - Formatage automatique des donn√©es
        """)

        # Exemple d'utilisation
        st.code("""
# Affichage d'un tableau am√©lior√©
event = DataTableEnhancer.render_enhanced_table(data)
if event.selection.rows:
    selected_item = data[event.selection.rows[0]]
    action = DataTableEnhancer.render_action_buttons(selected_item, ['view', 'edit'])
        """)

    with tab4:
        st.subheader("Syst√®me de Notifications")
        st.markdown("""
        Le syst√®me de notifications permet :
        - Messages de succ√®s, erreur, avertissement, info
        - Dur√©e configurable
        - Interface coh√©rente
        """)

        # D√©monstration des notifications
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            if st.button("‚úÖ Succ√®s"):
                NotificationManager.show_success("Op√©ration r√©ussie !")

        with col2:
            if st.button("‚ùå Erreur"):
                NotificationManager.show_error("Une erreur s'est produite")

        with col3:
            if st.button("‚ö†Ô∏è Avertissement"):
                NotificationManager.show_warning("Attention requise")

        with col4:
            if st.button("‚ÑπÔ∏è Info"):
                NotificationManager.show_info("Information importante")


def show_cache_stats():
    """Affiche les statistiques du cache"""
    st.header("üìä Statistiques du Cache")

    try:
        stats = get_cache_stats()

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("üì¶ Taille Cache", f"{stats.get('size', 0)} √©l√©ments")

        with col2:
            st.metric("‚ö° Hit Rate", f"{stats.get('hit_rate', 0):.1f}%")

        with col3:
            st.metric("üîÑ Requ√™tes", stats.get('total_requests', 0))

        with col4:
            st.metric("üíæ M√©moire", f"{stats.get('memory_usage', 0):.1f} MB")

        # Graphiques d√©taill√©s
        st.subheader("D√©tails des Performances")

        # Simulation de donn√©es pour les graphiques
        import pandas as pd
        import numpy as np

        # Donn√©es de performance simul√©es
        performance_data = pd.DataFrame({
            'Temps': pd.date_range(start='2024-01-01', periods=24, freq='H'),
            'Temps_R√©ponse_ms': np.random.normal(20, 5, 24),
            'Utilisation_Cache_%': np.random.uniform(70, 95, 24)
        })

        col1, col2 = st.columns(2)

        with col1:
            st.line_chart(performance_data.set_index('Temps')['Temps_R√©ponse_ms'])

        with col2:
            st.line_chart(performance_data.set_index('Temps')['Utilisation_Cache_%'])

    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des statistiques : {str(e)}")


if __name__ == "__main__":
    main()
